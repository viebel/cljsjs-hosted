/**********************************************************************
 * Extern for autobahn
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var autobahn = {
    "version": {},
    "transports": {
        "_repository": {
            "websocket": function () {},
            "longpoll": function () {},
            "rawsocket": function () {}
        },
        "register": function () {},
        "isRegistered": function () {},
        "get": function () {},
        "list": function () {}
    },
    "Connection": function () {},
    "Session": function () {},
    "Invocation": function () {},
    "Event": function () {},
    "Result": function () {},
    "Error": function () {},
    "Subscription": function () {},
    "Registration": function () {},
    "Publication": function () {},
    "serializer": {
        "JSONSerializer": function () {},
        "MsgpackSerializer": function () {},
        "CBORSerializer": function () {}
    },
    "auth_persona": function () {},
    "auth_cra": {
        "sign": function () {},
        "derive_key": function () {}
    },
    "when": {
        "promise": function () {},
        "resolve": function () {},
        "reject": function () {},
        "lift": function () {},
        "try": function () {},
        "attempt": function () {},
        "iterate": function () {},
        "unfold": function () {},
        "join": function () {},
        "all": function () {},
        "settle": function () {},
        "any": function () {},
        "some": function () {},
        "race": function () {},
        "map": function () {},
        "filter": function () {},
        "reduce": function () {},
        "reduceRight": function () {},
        "isPromiseLike": function () {},
        "Promise": {
            "resolve": function () {},
            "reject": function () {},
            "never": function () {},
            "_defer": function () {},
            "_handler": function () {},
            "all": function () {},
            "race": function () {},
            "_traverse": function () {},
            "_visitRemaining": function () {},
            "onFatalRejection": function () {},
            "onPotentiallyUnhandledRejectionHandled": function () {},
            "onPotentiallyUnhandledRejection": function () {},
            "exitContext": function () {},
            "enterContext": function () {},
            "createContext": function () {},
            "any": function () {},
            "some": function () {},
            "settle": function () {},
            "map": function () {},
            "filter": function () {},
            "reduce": function () {},
            "reduceRight": function () {},
            "iterate": function () {},
            "unfold": function () {}
        },
        "defer": function () {},
        "TimeoutError": function () {}
    },
    "msgpack": {
        "encode": function () {},
        "decode": function () {},
        "Encoder": function () {},
        "Decoder": function () {},
        "createCodec": function () {},
        "codec": {
            "preset": {
                "options": {
                    "preset": {}
                },
                "encode": function () {},
                "extPackers": {
                    "Error": function () {},
                    "EvalError": function () {},
                    "RangeError": function () {},
                    "ReferenceError": function () {},
                    "SyntaxError": function () {},
                    "TypeError": function () {},
                    "URIError": function () {},
                    "RegExp": function () {},
                    "Boolean": function () {},
                    "String": function () {},
                    "Date": function () {},
                    "Number": function () {},
                    "Int8Array": function () {},
                    "Uint8Array": function () {},
                    "Int16Array": function () {},
                    "Uint16Array": function () {},
                    "Int32Array": function () {},
                    "Uint32Array": function () {},
                    "Float32Array": function () {},
                    "Float64Array": function () {},
                    "Uint8ClampedArray": function () {},
                    "ArrayBuffer": function () {},
                    "DataView": function () {},
                    "Buffer": function () {}
                },
                "decode": function () {},
                "extUnpackers": {},
                "init": function () {},
                "addExtPacker": function () {},
                "getExtPacker": function () {},
                "addExtUnpacker": function () {},
                "getExtUnpacker": function () {}
            }
        }
    },
    "cbor": {
        "Commented": {
            "super_": {
                "super_": {
                    "ReadableState": function () {},
                    "super_": {
                        "EventEmitter": function () {},
                        "defaultMaxListeners": {},
                        "listenerCount": function () {}
                    },
                    "_fromList": function () {},
                    "Stream": function () {},
                    "Readable": function () {},
                    "Writable": {
                        "WritableState": function () {},
                        "super_": {
                            "EventEmitter": function () {},
                            "defaultMaxListeners": {},
                            "listenerCount": function () {}
                        }
                    },
                    "Duplex": function () {},
                    "Transform": {
                        "super_": function () {}
                    },
                    "PassThrough": {
                        "super_": {
                            "super_": function () {}
                        }
                    }
                }
            }
        },
        "Diagnose": {
            "super_": {
                "super_": {
                    "ReadableState": function () {},
                    "super_": {
                        "EventEmitter": function () {},
                        "defaultMaxListeners": {},
                        "listenerCount": function () {}
                    },
                    "_fromList": function () {},
                    "Stream": function () {},
                    "Readable": function () {},
                    "Writable": {
                        "WritableState": function () {},
                        "super_": {
                            "EventEmitter": function () {},
                            "defaultMaxListeners": {},
                            "listenerCount": function () {}
                        }
                    },
                    "Duplex": function () {},
                    "Transform": {
                        "super_": function () {}
                    },
                    "PassThrough": {
                        "super_": {
                            "super_": function () {}
                        }
                    }
                }
            }
        },
        "Decoder": {
            "NOT_FOUND": {},
            "One": {},
            "super_": {
                "super_": {
                    "super_": {
                        "ReadableState": function () {},
                        "super_": {
                            "EventEmitter": function () {},
                            "defaultMaxListeners": {},
                            "listenerCount": function () {}
                        },
                        "_fromList": function () {},
                        "Stream": function () {},
                        "Readable": function () {},
                        "Writable": {
                            "WritableState": function () {},
                            "super_": {
                                "EventEmitter": function () {},
                                "defaultMaxListeners": {},
                                "listenerCount": function () {}
                            }
                        },
                        "Duplex": function () {},
                        "Transform": function () {},
                        "PassThrough": {
                            "super_": function () {}
                        }
                    }
                }
            }
        },
        "Encoder": {
            "super_": {
                "super_": {
                    "ReadableState": function () {},
                    "super_": {
                        "EventEmitter": function () {},
                        "defaultMaxListeners": {},
                        "listenerCount": function () {}
                    },
                    "_fromList": function () {},
                    "Stream": function () {},
                    "Readable": function () {},
                    "Writable": {
                        "WritableState": function () {},
                        "super_": {
                            "EventEmitter": function () {},
                            "defaultMaxListeners": {},
                            "listenerCount": function () {}
                        }
                    },
                    "Duplex": function () {},
                    "Transform": {
                        "super_": function () {}
                    },
                    "PassThrough": {
                        "super_": {
                            "super_": function () {}
                        }
                    }
                }
            }
        },
        "Simple": function () {},
        "Tagged": function () {},
        "comment": function () {},
        "decodeAll": function () {},
        "decodeFirst": function () {},
        "decodeAllSync": function () {},
        "decodeFirstSync": function () {},
        "diagnose": function () {},
        "encode": function () {},
        "decode": function () {},
        "leveldb": {
            "decode": function () {},
            "encode": function () {},
            "buffer": {},
            "name": {}
        }
    },
    "util": {
        "rand_normal": function () {},
        "assert": function () {},
        "http_post": function () {},
        "defaults": function () {}
    },
    "log": {
        "debug": function () {},
        "warn": function () {}
    }
};
autobahn.transports._repository.websocket.prototype = {
    "type": function () {},
    "create": function () {}
};
autobahn.transports._repository.longpoll.prototype = {
    "type": function () {},
    "create": function () {}
};
autobahn.transports._repository.rawsocket.prototype = {
    "type": function () {},
    "create": function () {}
};
autobahn.Connection.prototype = {
    "_create_transport": function () {},
    "_init_transport_factories": function () {},
    "_autoreconnect_reset_timer": function () {},
    "_autoreconnect_reset": function () {},
    "_autoreconnect_advance": function () {},
    "open": function () {},
    "close": function () {}
};
autobahn.Session.prototype = {
    "log": function () {},
    "join": function () {},
    "leave": function () {},
    "call": function () {},
    "publish": function () {},
    "subscribe": function () {},
    "register": function () {},
    "unsubscribe": function () {},
    "unregister": function () {},
    "prefix": function () {},
    "resolve": function () {}
};
autobahn.Subscription.prototype = {
    "unsubscribe": function () {}
};
autobahn.Registration.prototype = {
    "unregister": function () {}
};
autobahn.serializer.JSONSerializer.prototype = {
    "serialize": function () {},
    "unserialize": function () {}
};
autobahn.serializer.MsgpackSerializer.prototype = {
    "serialize": function () {},
    "unserialize": function () {},
    "registerExtType": function () {}
};
autobahn.serializer.CBORSerializer.prototype = {
    "serialize": function () {},
    "unserialize": function () {}
};
autobahn.when.Promise.prototype = {
    "then": function () {},
    "catch": function () {},
    "_beget": function () {},
    "spread": function () {},
    "done": function () {},
    "otherwise": function () {},
    "ensure": function () {},
    "finally": function () {},
    "orElse": function () {},
    "else": function () {},
    "yield": function () {},
    "tap": function () {},
    "fold": function () {},
    "progress": function () {},
    "inspect": function () {},
    "withThis": function () {},
    "with": function () {},
    "delay": function () {},
    "timeout": function () {}
};
autobahn.when.TimeoutError.prototype = {
    "constructor": function () {}
};
autobahn.msgpack.Encoder.prototype = {
    "on": function () {},
    "once": function () {},
    "off": function () {},
    "emit": function () {},
    "encode": function () {},
    "end": function () {},
    "bufferish": function () {},
    "write": function () {},
    "fetch": function () {},
    "flush": function () {},
    "push": function () {},
    "pull": function () {},
    "read": function () {},
    "reserve": function () {},
    "send": function () {},
    "maxBufferSize": function () {},
    "minBufferSize": function () {},
    "offset": function () {},
    "start": function () {},
    "codec": function () {}
};
autobahn.msgpack.Decoder.prototype = {
    "on": function () {},
    "once": function () {},
    "off": function () {},
    "emit": function () {},
    "decode": function () {},
    "push": function () {},
    "end": function () {},
    "bufferish": function () {},
    "write": function () {},
    "fetch": function () {},
    "flush": function () {},
    "pull": function () {},
    "read": function () {},
    "reserve": function () {},
    "offset": function () {},
    "codec": function () {}
};
autobahn.cbor.Commented.prototype = {
    "push": function () {},
    "_write": function () {},
    "_read": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_writev": function () {},
    "end": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Commented.super_.prototype = {
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_write": function () {},
    "_writev": function () {},
    "end": function () {},
    "push": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "_read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Commented.super_.super_.prototype = {
    "push": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "_read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Commented.super_.super_.super_.prototype = {
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "addListener": function () {},
    "on": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Commented.super_.super_.Writable.prototype = {
    "pipe": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_write": function () {},
    "_writev": function () {},
    "end": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "addListener": function () {},
    "on": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Commented.super_.super_.Writable.WritableState.prototype = {
    "getBuffer": function () {}
};
autobahn.cbor.Commented.super_.super_.Writable.super_.prototype = {
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "addListener": function () {},
    "on": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Commented.super_.super_.Transform.prototype = {
    "push": function () {},
    "_transform": function () {},
    "_write": function () {},
    "_read": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_writev": function () {},
    "end": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Commented.super_.super_.PassThrough.prototype = {
    "_transform": function () {},
    "push": function () {},
    "_write": function () {},
    "_read": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_writev": function () {},
    "end": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Commented.super_.super_.PassThrough.super_.prototype = {
    "push": function () {},
    "_transform": function () {},
    "_write": function () {},
    "_read": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_writev": function () {},
    "end": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Diagnose.prototype = {
    "push": function () {},
    "_write": function () {},
    "_read": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_writev": function () {},
    "end": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Diagnose.super_.prototype = {
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_write": function () {},
    "_writev": function () {},
    "end": function () {},
    "push": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "_read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Diagnose.super_.super_.prototype = {
    "push": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "_read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Diagnose.super_.super_.super_.prototype = {
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "addListener": function () {},
    "on": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Diagnose.super_.super_.Writable.prototype = {
    "pipe": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_write": function () {},
    "_writev": function () {},
    "end": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "addListener": function () {},
    "on": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Diagnose.super_.super_.Writable.WritableState.prototype = {
    "getBuffer": function () {}
};
autobahn.cbor.Diagnose.super_.super_.Writable.super_.prototype = {
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "addListener": function () {},
    "on": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Diagnose.super_.super_.Transform.prototype = {
    "push": function () {},
    "_transform": function () {},
    "_write": function () {},
    "_read": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_writev": function () {},
    "end": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Diagnose.super_.super_.PassThrough.prototype = {
    "_transform": function () {},
    "push": function () {},
    "_write": function () {},
    "_read": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_writev": function () {},
    "end": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Diagnose.super_.super_.PassThrough.super_.prototype = {
    "push": function () {},
    "_transform": function () {},
    "_write": function () {},
    "_read": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_writev": function () {},
    "end": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Decoder.prototype = {
    "_transform": function () {},
    "__restart": function () {},
    "_flush": function () {},
    "push": function () {},
    "_write": function () {},
    "_read": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_writev": function () {},
    "end": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Decoder.super_.prototype = {
    "push": function () {},
    "_transform": function () {},
    "_write": function () {},
    "_read": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_writev": function () {},
    "end": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Decoder.super_.super_.prototype = {
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_write": function () {},
    "_writev": function () {},
    "end": function () {},
    "push": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "_read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Decoder.super_.super_.super_.prototype = {
    "push": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "_read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Decoder.super_.super_.super_.super_.prototype = {
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "addListener": function () {},
    "on": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Decoder.super_.super_.super_.Writable.prototype = {
    "pipe": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_write": function () {},
    "_writev": function () {},
    "end": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "addListener": function () {},
    "on": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Decoder.super_.super_.super_.Writable.WritableState.prototype = {
    "getBuffer": function () {}
};
autobahn.cbor.Decoder.super_.super_.super_.Writable.super_.prototype = {
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "addListener": function () {},
    "on": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Decoder.super_.super_.super_.PassThrough.prototype = {
    "_transform": function () {},
    "push": function () {},
    "_write": function () {},
    "_read": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_writev": function () {},
    "end": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Encoder.prototype = {
    "push": function () {},
    "_write": function () {},
    "_read": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_writev": function () {},
    "end": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Encoder.super_.prototype = {
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_write": function () {},
    "_writev": function () {},
    "end": function () {},
    "push": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "_read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Encoder.super_.super_.prototype = {
    "push": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "_read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Encoder.super_.super_.super_.prototype = {
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "addListener": function () {},
    "on": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Encoder.super_.super_.Writable.prototype = {
    "pipe": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_write": function () {},
    "_writev": function () {},
    "end": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "addListener": function () {},
    "on": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Encoder.super_.super_.Writable.WritableState.prototype = {
    "getBuffer": function () {}
};
autobahn.cbor.Encoder.super_.super_.Writable.super_.prototype = {
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "addListener": function () {},
    "on": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Encoder.super_.super_.Transform.prototype = {
    "push": function () {},
    "_transform": function () {},
    "_write": function () {},
    "_read": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_writev": function () {},
    "end": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Encoder.super_.super_.PassThrough.prototype = {
    "_transform": function () {},
    "push": function () {},
    "_write": function () {},
    "_read": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_writev": function () {},
    "end": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
autobahn.cbor.Encoder.super_.super_.PassThrough.super_.prototype = {
    "push": function () {},
    "_transform": function () {},
    "_write": function () {},
    "_read": function () {},
    "write": function () {},
    "cork": function () {},
    "uncork": function () {},
    "setDefaultEncoding": function () {},
    "_writev": function () {},
    "end": function () {},
    "unshift": function () {},
    "isPaused": function () {},
    "setEncoding": function () {},
    "read": function () {},
    "pipe": function () {},
    "unpipe": function () {},
    "on": function () {},
    "addListener": function () {},
    "resume": function () {},
    "pause": function () {},
    "wrap": function () {},
    "_events": function () {},
    "_maxListeners": function () {},
    "setMaxListeners": function () {},
    "emit": function () {},
    "once": function () {},
    "removeListener": function () {},
    "removeAllListeners": function () {},
    "listeners": function () {},
    "listenerCount": function () {}
};
/**********************************************************************
 * End Generated Extern for autobahn
 /**********************************************************************/