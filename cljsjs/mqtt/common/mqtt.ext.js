/**********************************************************************
 * Extern for mqtt
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var mqtt = {
  "MqttClient": {
    "super_": {
      "EventEmitter": function () {},
      "defaultMaxListeners": {},
      "listenerCount": function () {}
    }
  },
  "connect": {
    "MqttClient": {
      "super_": {
        "EventEmitter": function () {},
        "defaultMaxListeners": {},
        "listenerCount": function () {}
      }
    },
    "connect": function () {}
  }
};
mqtt.MqttClient.prototype = {
  "_checkDisconnecting": function () {},
  "_checkPing": function () {},
  "_cleanUp": function () {},
  "_clearReconnect": function () {},
  "_events": function () {},
  "_handleAck": function () {},
  "_handleConnack": function () {},
  "_handlePacket": function () {},
  "_handlePingresp": function () {},
  "_handlePublish": function () {},
  "_handlePubrel": function () {},
  "_maxListeners": function () {},
  "_nextId": function () {},
  "_reconnect": function () {},
  "_sendPacket": function () {},
  "_setupPingTimer": function () {},
  "_setupReconnect": function () {},
  "_setupStream": function () {},
  "_shiftPingInterval": function () {},
  "addListener": function () {},
  "emit": function () {},
  "end": function () {},
  "getLastMessageId": function () {},
  "handleMessage": function () {},
  "listenerCount": function () {},
  "listeners": function () {},
  "on": function () {},
  "once": function () {},
  "publish": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "removeOutgoingMessage": function () {},
  "setMaxListeners": function () {},
  "subscribe": function () {},
  "unsubscribe": function () {}
};
mqtt.MqttClient.super_.prototype = {
  "_events": function () {},
  "_maxListeners": function () {},
  "addListener": function () {},
  "emit": function () {},
  "listenerCount": function () {},
  "listeners": function () {},
  "on": function () {},
  "once": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "setMaxListeners": function () {}
};
mqtt.connect.MqttClient.prototype = {
  "_checkDisconnecting": function () {},
  "_checkPing": function () {},
  "_cleanUp": function () {},
  "_clearReconnect": function () {},
  "_events": function () {},
  "_handleAck": function () {},
  "_handleConnack": function () {},
  "_handlePacket": function () {},
  "_handlePingresp": function () {},
  "_handlePublish": function () {},
  "_handlePubrel": function () {},
  "_maxListeners": function () {},
  "_nextId": function () {},
  "_reconnect": function () {},
  "_sendPacket": function () {},
  "_setupPingTimer": function () {},
  "_setupReconnect": function () {},
  "_setupStream": function () {},
  "_shiftPingInterval": function () {},
  "addListener": function () {},
  "emit": function () {},
  "end": function () {},
  "getLastMessageId": function () {},
  "handleMessage": function () {},
  "listenerCount": function () {},
  "listeners": function () {},
  "on": function () {},
  "once": function () {},
  "publish": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "removeOutgoingMessage": function () {},
  "setMaxListeners": function () {},
  "subscribe": function () {},
  "unsubscribe": function () {}
};
mqtt.connect.MqttClient.super_.prototype = {
  "_events": function () {},
  "_maxListeners": function () {},
  "addListener": function () {},
  "emit": function () {},
  "listenerCount": function () {},
  "listeners": function () {},
  "on": function () {},
  "once": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "setMaxListeners": function () {}
};
/**********************************************************************
 * End Generated Extern for mqtt
/**********************************************************************/