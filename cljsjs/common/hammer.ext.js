/**********************************************************************
 * Extern for Hammer
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var Hammer = {
  "AttrRecognizer": function () {},
  "DIRECTION_ALL": {},
  "DIRECTION_DOWN": {},
  "DIRECTION_HORIZONTAL": {},
  "DIRECTION_LEFT": {},
  "DIRECTION_NONE": {},
  "DIRECTION_RIGHT": {},
  "DIRECTION_UP": {},
  "DIRECTION_VERTICAL": {},
  "INPUT_CANCEL": {},
  "INPUT_END": {},
  "INPUT_MOVE": {},
  "INPUT_START": {},
  "Input": function () {},
  "Manager": function () {},
  "MouseInput": function () {},
  "Pan": function () {},
  "Pinch": function () {},
  "PointerEventInput": function () {},
  "Press": function () {},
  "Recognizer": function () {},
  "Rotate": function () {},
  "STATE_BEGAN": {},
  "STATE_CANCELLED": {},
  "STATE_CHANGED": {},
  "STATE_ENDED": {},
  "STATE_FAILED": {},
  "STATE_POSSIBLE": {},
  "STATE_RECOGNIZED": {},
  "SingleTouchInput": function () {},
  "Swipe": function () {},
  "Tap": function () {},
  "TouchAction": function () {},
  "TouchInput": function () {},
  "TouchMouseInput": function () {},
  "VERSION": {},
  "assign": function () {},
  "bindFn": function () {},
  "defaults": {
    "cssProps": {
      "contentZooming": {},
      "tapHighlightColor": {},
      "touchCallout": {},
      "touchSelect": {},
      "userDrag": {},
      "userSelect": {}
    },
    "domEvents": {},
    "enable": {},
    "inputClass": {},
    "inputTarget": {},
    "preset": {},
    "touchAction": {}
  },
  "each": function () {},
  "extend": function () {},
  "inherit": function () {},
  "merge": function () {},
  "off": function () {},
  "on": function () {},
  "prefixed": function () {}
};
Hammer.AttrRecognizer.prototype = {
  "_super": function () {},
  "attrTest": function () {},
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "defaults": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
Hammer.Input.prototype = {
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
Hammer.Manager.prototype = {
  "add": function () {},
  "destroy": function () {},
  "emit": function () {},
  "get": function () {},
  "off": function () {},
  "on": function () {},
  "recognize": function () {},
  "remove": function () {},
  "set": function () {},
  "stop": function () {}
};
Hammer.MouseInput.prototype = {
  "_super": function () {},
  "constructor": function () {},
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
Hammer.Pan.prototype = {
  "_super": function () {},
  "attrTest": function () {},
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "defaults": function () {},
  "directionTest": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
Hammer.Pinch.prototype = {
  "_super": function () {},
  "attrTest": function () {},
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "defaults": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
Hammer.PointerEventInput.prototype = {
  "_super": function () {},
  "constructor": function () {},
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
Hammer.Press.prototype = {
  "_super": function () {},
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "defaults": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
Hammer.Recognizer.prototype = {
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "defaults": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
Hammer.Rotate.prototype = {
  "_super": function () {},
  "attrTest": function () {},
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "defaults": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
Hammer.SingleTouchInput.prototype = {
  "_super": function () {},
  "constructor": function () {},
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
Hammer.Swipe.prototype = {
  "_super": function () {},
  "attrTest": function () {},
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "defaults": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
Hammer.Tap.prototype = {
  "_super": function () {},
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "defaults": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "failTimeout": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
Hammer.TouchAction.prototype = {
  "compute": function () {},
  "preventDefaults": function () {},
  "preventSrc": function () {},
  "set": function () {},
  "update": function () {}
};
Hammer.TouchInput.prototype = {
  "_super": function () {},
  "constructor": function () {},
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
Hammer.TouchMouseInput.prototype = {
  "_super": function () {},
  "constructor": function () {},
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
/**********************************************************************
 * End Generated Extern for Hammer
/**********************************************************************/
