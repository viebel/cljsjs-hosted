/**********************************************************************
 * Extern for elliptic
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var elliptic = {
  "curve": {
    "base": {
      "BasePoint": function () {}
    },
    "edwards": {
      "super_": {
        "BasePoint": function () {}
      }
    },
    "mont": {
      "super_": {
        "BasePoint": function () {}
      }
    },
    "short": {
      "super_": {
        "BasePoint": function () {}
      }
    }
  },
  "curves": {
    "PresetCurve": function () {},
    "curve25519": {
      "curve": {
        "_fixedNafMul": function () {},
        "_maxwellTrick": {},
        "_wnafMul": function () {},
        "_wnafMulAdd": function () {},
        "_wnafT1": {},
        "_wnafT2": {},
        "_wnafT3": {},
        "_wnafT4": {},
        "a": {
          "_countBits": function () {},
          "_expand": function () {},
          "_forceRed": function () {},
          "_iaddn": function () {},
          "_init": function () {},
          "_initArray": function () {},
          "_initNumber": function () {},
          "_invmp": function () {},
          "_ishlnsubmul": function () {},
          "_normSign": function () {},
          "_parseBase": function () {},
          "_parseHex": function () {},
          "_wordDiv": function () {},
          "_zeroBits": function () {},
          "abs": function () {},
          "add": function () {},
          "addn": function () {},
          "and": function () {},
          "andln": function () {},
          "bincn": function () {},
          "bitLength": function () {},
          "byteLength": function () {},
          "clone": function () {},
          "cmp": function () {},
          "cmpn": function () {},
          "copy": function () {},
          "div": function () {},
          "divRound": function () {},
          "divmod": function () {},
          "divn": function () {},
          "egcd": function () {},
          "eq": function () {},
          "eqn": function () {},
          "forceRed": function () {},
          "fromRed": function () {},
          "fromTwos": function () {},
          "gcd": function () {},
          "gt": function () {},
          "gte": function () {},
          "gten": function () {},
          "gtn": function () {},
          "iabs": function () {},
          "iadd": function () {},
          "iaddn": function () {},
          "iand": function () {},
          "idivn": function () {},
          "imaskn": function () {},
          "imul": function () {},
          "imuln": function () {},
          "ineg": function () {},
          "inotn": function () {},
          "inspect": function () {},
          "invm": function () {},
          "ior": function () {},
          "isEven": function () {},
          "isNeg": function () {},
          "isOdd": function () {},
          "isZero": function () {},
          "ishln": function () {},
          "ishrn": function () {},
          "isqr": function () {},
          "isub": function () {},
          "isubn": function () {},
          "iuand": function () {},
          "iuor": function () {},
          "iushln": function () {},
          "iushrn": function () {},
          "iuxor": function () {},
          "ixor": function () {},
          "length": {},
          "lt": function () {},
          "lte": function () {},
          "lten": function () {},
          "ltn": function () {},
          "maskn": function () {},
          "mod": function () {},
          "modn": function () {},
          "mul": function () {},
          "mulTo": function () {},
          "mulf": function () {},
          "muln": function () {},
          "neg": function () {},
          "negative": {},
          "notn": function () {},
          "or": function () {},
          "pow": function () {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "_countBits": function () {},
              "_expand": function () {},
              "_forceRed": function () {},
              "_iaddn": function () {},
              "_init": function () {},
              "_initArray": function () {},
              "_initNumber": function () {},
              "_invmp": function () {},
              "_ishlnsubmul": function () {},
              "_normSign": function () {},
              "_parseBase": function () {},
              "_parseHex": function () {},
              "_wordDiv": function () {},
              "_zeroBits": function () {},
              "abs": function () {},
              "add": function () {},
              "addn": function () {},
              "and": function () {},
              "andln": function () {},
              "bincn": function () {},
              "bitLength": function () {},
              "byteLength": function () {},
              "clone": function () {},
              "cmp": function () {},
              "cmpn": function () {},
              "copy": function () {},
              "div": function () {},
              "divRound": function () {},
              "divmod": function () {},
              "divn": function () {},
              "egcd": function () {},
              "eq": function () {},
              "eqn": function () {},
              "forceRed": function () {},
              "fromRed": function () {},
              "fromTwos": function () {},
              "gcd": function () {},
              "gt": function () {},
              "gte": function () {},
              "gten": function () {},
              "gtn": function () {},
              "iabs": function () {},
              "iadd": function () {},
              "iaddn": function () {},
              "iand": function () {},
              "idivn": function () {},
              "imaskn": function () {},
              "imul": function () {},
              "imuln": function () {},
              "ineg": function () {},
              "inotn": function () {},
              "inspect": function () {},
              "invm": function () {},
              "ior": function () {},
              "isEven": function () {},
              "isNeg": function () {},
              "isOdd": function () {},
              "isZero": function () {},
              "ishln": function () {},
              "ishrn": function () {},
              "isqr": function () {},
              "isub": function () {},
              "isubn": function () {},
              "iuand": function () {},
              "iuor": function () {},
              "iushln": function () {},
              "iushrn": function () {},
              "iuxor": function () {},
              "ixor": function () {},
              "length": {},
              "lt": function () {},
              "lte": function () {},
              "lten": function () {},
              "ltn": function () {},
              "maskn": function () {},
              "mod": function () {},
              "modn": function () {},
              "mul": function () {},
              "mulTo": function () {},
              "mulf": function () {},
              "muln": function () {},
              "neg": function () {},
              "negative": {},
              "notn": function () {},
              "or": function () {},
              "pow": function () {},
              "red": {},
              "redAdd": function () {},
              "redIAdd": function () {},
              "redIMul": function () {},
              "redISqr": function () {},
              "redISub": function () {},
              "redInvm": function () {},
              "redMul": function () {},
              "redNeg": function () {},
              "redPow": function () {},
              "redShl": function () {},
              "redSqr": function () {},
              "redSqrt": function () {},
              "redSub": function () {},
              "setn": function () {},
              "shln": function () {},
              "shrn": function () {},
              "sqr": function () {},
              "strip": function () {},
              "sub": function () {},
              "subn": function () {},
              "testn": function () {},
              "toArray": function () {},
              "toArrayLike": function () {},
              "toBuffer": function () {},
              "toJSON": function () {},
              "toNumber": function () {},
              "toRed": function () {},
              "toString": function () {},
              "toTwos": function () {},
              "uand": function () {},
              "ucmp": function () {},
              "umod": function () {},
              "uor": function () {},
              "ushln": function () {},
              "ushrn": function () {},
              "uxor": function () {},
              "words": {},
              "xor": function () {},
              "zeroBits": function () {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {
              "_tmp": function () {},
              "constructor": {
                "super_": function () {}
              },
              "imulK": function () {},
              "ireduce": function () {},
              "k": {
                "_countBits": function () {},
                "_expand": function () {},
                "_forceRed": function () {},
                "_iaddn": function () {},
                "_init": function () {},
                "_initArray": function () {},
                "_initNumber": function () {},
                "_invmp": function () {},
                "_ishlnsubmul": function () {},
                "_normSign": function () {},
                "_parseBase": function () {},
                "_parseHex": function () {},
                "_wordDiv": function () {},
                "_zeroBits": function () {},
                "abs": function () {},
                "add": function () {},
                "addn": function () {},
                "and": function () {},
                "andln": function () {},
                "bincn": function () {},
                "bitLength": function () {},
                "byteLength": function () {},
                "clone": function () {},
                "cmp": function () {},
                "cmpn": function () {},
                "copy": function () {},
                "div": function () {},
                "divRound": function () {},
                "divmod": function () {},
                "divn": function () {},
                "egcd": function () {},
                "eq": function () {},
                "eqn": function () {},
                "forceRed": function () {},
                "fromRed": function () {},
                "fromTwos": function () {},
                "gcd": function () {},
                "gt": function () {},
                "gte": function () {},
                "gten": function () {},
                "gtn": function () {},
                "iabs": function () {},
                "iadd": function () {},
                "iaddn": function () {},
                "iand": function () {},
                "idivn": function () {},
                "imaskn": function () {},
                "imul": function () {},
                "imuln": function () {},
                "ineg": function () {},
                "inotn": function () {},
                "inspect": function () {},
                "invm": function () {},
                "ior": function () {},
                "isEven": function () {},
                "isNeg": function () {},
                "isOdd": function () {},
                "isZero": function () {},
                "ishln": function () {},
                "ishrn": function () {},
                "isqr": function () {},
                "isub": function () {},
                "isubn": function () {},
                "iuand": function () {},
                "iuor": function () {},
                "iushln": function () {},
                "iushrn": function () {},
                "iuxor": function () {},
                "ixor": function () {},
                "length": {},
                "lt": function () {},
                "lte": function () {},
                "lten": function () {},
                "ltn": function () {},
                "maskn": function () {},
                "mod": function () {},
                "modn": function () {},
                "mul": function () {},
                "mulTo": function () {},
                "mulf": function () {},
                "muln": function () {},
                "neg": function () {},
                "negative": {},
                "notn": function () {},
                "or": function () {},
                "pow": function () {},
                "red": {},
                "redAdd": function () {},
                "redIAdd": function () {},
                "redIMul": function () {},
                "redISqr": function () {},
                "redISub": function () {},
                "redInvm": function () {},
                "redMul": function () {},
                "redNeg": function () {},
                "redPow": function () {},
                "redShl": function () {},
                "redSqr": function () {},
                "redSqrt": function () {},
                "redSub": function () {},
                "setn": function () {},
                "shln": function () {},
                "shrn": function () {},
                "sqr": function () {},
                "strip": function () {},
                "sub": function () {},
                "subn": function () {},
                "testn": function () {},
                "toArray": function () {},
                "toArrayLike": function () {},
                "toBuffer": function () {},
                "toJSON": function () {},
                "toNumber": function () {},
                "toRed": function () {},
                "toString": function () {},
                "toTwos": function () {},
                "uand": function () {},
                "ucmp": function () {},
                "umod": function () {},
                "uor": function () {},
                "ushln": function () {},
                "ushrn": function () {},
                "uxor": function () {},
                "words": {},
                "xor": function () {},
                "zeroBits": function () {}
              },
              "n": {},
              "name": {},
              "p": {
                "_countBits": function () {},
                "_expand": function () {},
                "_forceRed": function () {},
                "_iaddn": function () {},
                "_init": function () {},
                "_initArray": function () {},
                "_initNumber": function () {},
                "_invmp": function () {},
                "_ishlnsubmul": function () {},
                "_normSign": function () {},
                "_parseBase": function () {},
                "_parseHex": function () {},
                "_wordDiv": function () {},
                "_zeroBits": function () {},
                "abs": function () {},
                "add": function () {},
                "addn": function () {},
                "and": function () {},
                "andln": function () {},
                "bincn": function () {},
                "bitLength": function () {},
                "byteLength": function () {},
                "clone": function () {},
                "cmp": function () {},
                "cmpn": function () {},
                "copy": function () {},
                "div": function () {},
                "divRound": function () {},
                "divmod": function () {},
                "divn": function () {},
                "egcd": function () {},
                "eq": function () {},
                "eqn": function () {},
                "forceRed": function () {},
                "fromRed": function () {},
                "fromTwos": function () {},
                "gcd": function () {},
                "gt": function () {},
                "gte": function () {},
                "gten": function () {},
                "gtn": function () {},
                "iabs": function () {},
                "iadd": function () {},
                "iaddn": function () {},
                "iand": function () {},
                "idivn": function () {},
                "imaskn": function () {},
                "imul": function () {},
                "imuln": function () {},
                "ineg": function () {},
                "inotn": function () {},
                "inspect": function () {},
                "invm": function () {},
                "ior": function () {},
                "isEven": function () {},
                "isNeg": function () {},
                "isOdd": function () {},
                "isZero": function () {},
                "ishln": function () {},
                "ishrn": function () {},
                "isqr": function () {},
                "isub": function () {},
                "isubn": function () {},
                "iuand": function () {},
                "iuor": function () {},
                "iushln": function () {},
                "iushrn": function () {},
                "iuxor": function () {},
                "ixor": function () {},
                "length": {},
                "lt": function () {},
                "lte": function () {},
                "lten": function () {},
                "ltn": function () {},
                "maskn": function () {},
                "mod": function () {},
                "modn": function () {},
                "mul": function () {},
                "mulTo": function () {},
                "mulf": function () {},
                "muln": function () {},
                "neg": function () {},
                "negative": {},
                "notn": function () {},
                "or": function () {},
                "pow": function () {},
                "red": {},
                "redAdd": function () {},
                "redIAdd": function () {},
                "redIMul": function () {},
                "redISqr": function () {},
                "redISub": function () {},
                "redInvm": function () {},
                "redMul": function () {},
                "redNeg": function () {},
                "redPow": function () {},
                "redShl": function () {},
                "redSqr": function () {},
                "redSqrt": function () {},
                "redSub": function () {},
                "setn": function () {},
                "shln": function () {},
                "shrn": function () {},
                "sqr": function () {},
                "strip": function () {},
                "sub": function () {},
                "subn": function () {},
                "testn": function () {},
                "toArray": function () {},
                "toArrayLike": function () {},
                "toBuffer": function () {},
                "toJSON": function () {},
                "toNumber": function () {},
                "toRed": function () {},
                "toString": function () {},
                "toTwos": function () {},
                "uand": function () {},
                "ucmp": function () {},
                "umod": function () {},
                "uor": function () {},
                "ushln": function () {},
                "ushrn": function () {},
                "uxor": function () {},
                "words": {},
                "xor": function () {},
                "zeroBits": function () {}
              },
              "split": function () {},
              "tmp": {
                "_countBits": function () {},
                "_expand": function () {},
                "_forceRed": function () {},
                "_iaddn": function () {},
                "_init": function () {},
                "_initArray": function () {},
                "_initNumber": function () {},
                "_invmp": function () {},
                "_ishlnsubmul": function () {},
                "_normSign": function () {},
                "_parseBase": function () {},
                "_parseHex": function () {},
                "_wordDiv": function () {},
                "_zeroBits": function () {},
                "abs": function () {},
                "add": function () {},
                "addn": function () {},
                "and": function () {},
                "andln": function () {},
                "bincn": function () {},
                "bitLength": function () {},
                "byteLength": function () {},
                "clone": function () {},
                "cmp": function () {},
                "cmpn": function () {},
                "copy": function () {},
                "div": function () {},
                "divRound": function () {},
                "divmod": function () {},
                "divn": function () {},
                "egcd": function () {},
                "eq": function () {},
                "eqn": function () {},
                "forceRed": function () {},
                "fromRed": function () {},
                "fromTwos": function () {},
                "gcd": function () {},
                "gt": function () {},
                "gte": function () {},
                "gten": function () {},
                "gtn": function () {},
                "iabs": function () {},
                "iadd": function () {},
                "iaddn": function () {},
                "iand": function () {},
                "idivn": function () {},
                "imaskn": function () {},
                "imul": function () {},
                "imuln": function () {},
                "ineg": function () {},
                "inotn": function () {},
                "inspect": function () {},
                "invm": function () {},
                "ior": function () {},
                "isEven": function () {},
                "isNeg": function () {},
                "isOdd": function () {},
                "isZero": function () {},
                "ishln": function () {},
                "ishrn": function () {},
                "isqr": function () {},
                "isub": function () {},
                "isubn": function () {},
                "iuand": function () {},
                "iuor": function () {},
                "iushln": function () {},
                "iushrn": function () {},
                "iuxor": function () {},
                "ixor": function () {},
                "length": {},
                "lt": function () {},
                "lte": function () {},
                "lten": function () {},
                "ltn": function () {},
                "maskn": function () {},
                "mod": function () {},
                "modn": function () {},
                "mul": function () {},
                "mulTo": function () {},
                "mulf": function () {},
                "muln": function () {},
                "neg": function () {},
                "negative": {},
                "notn": function () {},
                "or": function () {},
                "pow": function () {},
                "red": {},
                "redAdd": function () {},
                "redIAdd": function () {},
                "redIMul": function () {},
                "redISqr": function () {},
                "redISub": function () {},
                "redInvm": function () {},
                "redMul": function () {},
                "redNeg": function () {},
                "redPow": function () {},
                "redShl": function () {},
                "redSqr": function () {},
                "redSqrt": function () {},
                "redSub": function () {},
                "setn": function () {},
                "shln": function () {},
                "shrn": function () {},
                "sqr": function () {},
                "strip": function () {},
                "sub": function () {},
                "subn": function () {},
                "testn": function () {},
                "toArray": function () {},
                "toArrayLike": function () {},
                "toBuffer": function () {},
                "toJSON": function () {},
                "toNumber": function () {},
                "toRed": function () {},
                "toString": function () {},
                "toTwos": function () {},
                "uand": function () {},
                "ucmp": function () {},
                "umod": function () {},
                "uor": function () {},
                "ushln": function () {},
                "ushrn": function () {},
                "uxor": function () {},
                "words": {},
                "xor": function () {},
                "zeroBits": function () {}
              }
            },
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "redAdd": function () {},
          "redIAdd": function () {},
          "redIMul": function () {},
          "redISqr": function () {},
          "redISub": function () {},
          "redInvm": function () {},
          "redMul": function () {},
          "redNeg": function () {},
          "redPow": function () {},
          "redShl": function () {},
          "redSqr": function () {},
          "redSqrt": function () {},
          "redSub": function () {},
          "setn": function () {},
          "shln": function () {},
          "shrn": function () {},
          "sqr": function () {},
          "strip": function () {},
          "sub": function () {},
          "subn": function () {},
          "testn": function () {},
          "toArray": function () {},
          "toArrayLike": function () {},
          "toBuffer": function () {},
          "toJSON": function () {},
          "toNumber": function () {},
          "toRed": function () {},
          "toString": function () {},
          "toTwos": function () {},
          "uand": function () {},
          "ucmp": function () {},
          "umod": function () {},
          "uor": function () {},
          "ushln": function () {},
          "ushrn": function () {},
          "uxor": function () {},
          "words": {},
          "xor": function () {},
          "zeroBits": function () {}
        },
        "a24": {
          "_countBits": function () {},
          "_expand": function () {},
          "_forceRed": function () {},
          "_iaddn": function () {},
          "_init": function () {},
          "_initArray": function () {},
          "_initNumber": function () {},
          "_invmp": function () {},
          "_ishlnsubmul": function () {},
          "_normSign": function () {},
          "_parseBase": function () {},
          "_parseHex": function () {},
          "_wordDiv": function () {},
          "_zeroBits": function () {},
          "abs": function () {},
          "add": function () {},
          "addn": function () {},
          "and": function () {},
          "andln": function () {},
          "bincn": function () {},
          "bitLength": function () {},
          "byteLength": function () {},
          "clone": function () {},
          "cmp": function () {},
          "cmpn": function () {},
          "copy": function () {},
          "div": function () {},
          "divRound": function () {},
          "divmod": function () {},
          "divn": function () {},
          "egcd": function () {},
          "eq": function () {},
          "eqn": function () {},
          "forceRed": function () {},
          "fromRed": function () {},
          "fromTwos": function () {},
          "gcd": function () {},
          "gt": function () {},
          "gte": function () {},
          "gten": function () {},
          "gtn": function () {},
          "iabs": function () {},
          "iadd": function () {},
          "iaddn": function () {},
          "iand": function () {},
          "idivn": function () {},
          "imaskn": function () {},
          "imul": function () {},
          "imuln": function () {},
          "ineg": function () {},
          "inotn": function () {},
          "inspect": function () {},
          "invm": function () {},
          "ior": function () {},
          "isEven": function () {},
          "isNeg": function () {},
          "isOdd": function () {},
          "isZero": function () {},
          "ishln": function () {},
          "ishrn": function () {},
          "isqr": function () {},
          "isub": function () {},
          "isubn": function () {},
          "iuand": function () {},
          "iuor": function () {},
          "iushln": function () {},
          "iushrn": function () {},
          "iuxor": function () {},
          "ixor": function () {},
          "length": {},
          "lt": function () {},
          "lte": function () {},
          "lten": function () {},
          "ltn": function () {},
          "maskn": function () {},
          "mod": function () {},
          "modn": function () {},
          "mul": function () {},
          "mulTo": function () {},
          "mulf": function () {},
          "muln": function () {},
          "neg": function () {},
          "negative": {},
          "notn": function () {},
          "or": function () {},
          "pow": function () {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "_countBits": function () {},
              "_expand": function () {},
              "_forceRed": function () {},
              "_iaddn": function () {},
              "_init": function () {},
              "_initArray": function () {},
              "_initNumber": function () {},
              "_invmp": function () {},
              "_ishlnsubmul": function () {},
              "_normSign": function () {},
              "_parseBase": function () {},
              "_parseHex": function () {},
              "_wordDiv": function () {},
              "_zeroBits": function () {},
              "abs": function () {},
              "add": function () {},
              "addn": function () {},
              "and": function () {},
              "andln": function () {},
              "bincn": function () {},
              "bitLength": function () {},
              "byteLength": function () {},
              "clone": function () {},
              "cmp": function () {},
              "cmpn": function () {},
              "copy": function () {},
              "div": function () {},
              "divRound": function () {},
              "divmod": function () {},
              "divn": function () {},
              "egcd": function () {},
              "eq": function () {},
              "eqn": function () {},
              "forceRed": function () {},
              "fromRed": function () {},
              "fromTwos": function () {},
              "gcd": function () {},
              "gt": function () {},
              "gte": function () {},
              "gten": function () {},
              "gtn": function () {},
              "iabs": function () {},
              "iadd": function () {},
              "iaddn": function () {},
              "iand": function () {},
              "idivn": function () {},
              "imaskn": function () {},
              "imul": function () {},
              "imuln": function () {},
              "ineg": function () {},
              "inotn": function () {},
              "inspect": function () {},
              "invm": function () {},
              "ior": function () {},
              "isEven": function () {},
              "isNeg": function () {},
              "isOdd": function () {},
              "isZero": function () {},
              "ishln": function () {},
              "ishrn": function () {},
              "isqr": function () {},
              "isub": function () {},
              "isubn": function () {},
              "iuand": function () {},
              "iuor": function () {},
              "iushln": function () {},
              "iushrn": function () {},
              "iuxor": function () {},
              "ixor": function () {},
              "length": {},
              "lt": function () {},
              "lte": function () {},
              "lten": function () {},
              "ltn": function () {},
              "maskn": function () {},
              "mod": function () {},
              "modn": function () {},
              "mul": function () {},
              "mulTo": function () {},
              "mulf": function () {},
              "muln": function () {},
              "neg": function () {},
              "negative": {},
              "notn": function () {},
              "or": function () {},
              "pow": function () {},
              "red": {},
              "redAdd": function () {},
              "redIAdd": function () {},
              "redIMul": function () {},
              "redISqr": function () {},
              "redISub": function () {},
              "redInvm": function () {},
              "redMul": function () {},
              "redNeg": function () {},
              "redPow": function () {},
              "redShl": function () {},
              "redSqr": function () {},
              "redSqrt": function () {},
              "redSub": function () {},
              "setn": function () {},
              "shln": function () {},
              "shrn": function () {},
              "sqr": function () {},
              "strip": function () {},
              "sub": function () {},
              "subn": function () {},
              "testn": function () {},
              "toArray": function () {},
              "toArrayLike": function () {},
              "toBuffer": function () {},
              "toJSON": function () {},
              "toNumber": function () {},
              "toRed": function () {},
              "toString": function () {},
              "toTwos": function () {},
              "uand": function () {},
              "ucmp": function () {},
              "umod": function () {},
              "uor": function () {},
              "ushln": function () {},
              "ushrn": function () {},
              "uxor": function () {},
              "words": {},
              "xor": function () {},
              "zeroBits": function () {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {
              "_tmp": function () {},
              "constructor": {
                "super_": function () {}
              },
              "imulK": function () {},
              "ireduce": function () {},
              "k": {
                "_countBits": function () {},
                "_expand": function () {},
                "_forceRed": function () {},
                "_iaddn": function () {},
                "_init": function () {},
                "_initArray": function () {},
                "_initNumber": function () {},
                "_invmp": function () {},
                "_ishlnsubmul": function () {},
                "_normSign": function () {},
                "_parseBase": function () {},
                "_parseHex": function () {},
                "_wordDiv": function () {},
                "_zeroBits": function () {},
                "abs": function () {},
                "add": function () {},
                "addn": function () {},
                "and": function () {},
                "andln": function () {},
                "bincn": function () {},
                "bitLength": function () {},
                "byteLength": function () {},
                "clone": function () {},
                "cmp": function () {},
                "cmpn": function () {},
                "copy": function () {},
                "div": function () {},
                "divRound": function () {},
                "divmod": function () {},
                "divn": function () {},
                "egcd": function () {},
                "eq": function () {},
                "eqn": function () {},
                "forceRed": function () {},
                "fromRed": function () {},
                "fromTwos": function () {},
                "gcd": function () {},
                "gt": function () {},
                "gte": function () {},
                "gten": function () {},
                "gtn": function () {},
                "iabs": function () {},
                "iadd": function () {},
                "iaddn": function () {},
                "iand": function () {},
                "idivn": function () {},
                "imaskn": function () {},
                "imul": function () {},
                "imuln": function () {},
                "ineg": function () {},
                "inotn": function () {},
                "inspect": function () {},
                "invm": function () {},
                "ior": function () {},
                "isEven": function () {},
                "isNeg": function () {},
                "isOdd": function () {},
                "isZero": function () {},
                "ishln": function () {},
                "ishrn": function () {},
                "isqr": function () {},
                "isub": function () {},
                "isubn": function () {},
                "iuand": function () {},
                "iuor": function () {},
                "iushln": function () {},
                "iushrn": function () {},
                "iuxor": function () {},
                "ixor": function () {},
                "length": {},
                "lt": function () {},
                "lte": function () {},
                "lten": function () {},
                "ltn": function () {},
                "maskn": function () {},
                "mod": function () {},
                "modn": function () {},
                "mul": function () {},
                "mulTo": function () {},
                "mulf": function () {},
                "muln": function () {},
                "neg": function () {},
                "negative": {},
                "notn": function () {},
                "or": function () {},
                "pow": function () {},
                "red": {},
                "redAdd": function () {},
                "redIAdd": function () {},
                "redIMul": function () {},
                "redISqr": function () {},
                "redISub": function () {},
                "redInvm": function () {},
                "redMul": function () {},
                "redNeg": function () {},
                "redPow": function () {},
                "redShl": function () {},
                "redSqr": function () {},
                "redSqrt": function () {},
                "redSub": function () {},
                "setn": function () {},
                "shln": function () {},
                "shrn": function () {},
                "sqr": function () {},
                "strip": function () {},
                "sub": function () {},
                "subn": function () {},
                "testn": function () {},
                "toArray": function () {},
                "toArrayLike": function () {},
                "toBuffer": function () {},
                "toJSON": function () {},
                "toNumber": function () {},
                "toRed": function () {},
                "toString": function () {},
                "toTwos": function () {},
                "uand": function () {},
                "ucmp": function () {},
                "umod": function () {},
                "uor": function () {},
                "ushln": function () {},
                "ushrn": function () {},
                "uxor": function () {},
                "words": {},
                "xor": function () {},
                "zeroBits": function () {}
              },
              "n": {},
              "name": {},
              "p": {
                "_countBits": function () {},
                "_expand": function () {},
                "_forceRed": function () {},
                "_iaddn": function () {},
                "_init": function () {},
                "_initArray": function () {},
                "_initNumber": function () {},
                "_invmp": function () {},
                "_ishlnsubmul": function () {},
                "_normSign": function () {},
                "_parseBase": function () {},
                "_parseHex": function () {},
                "_wordDiv": function () {},
                "_zeroBits": function () {},
                "abs": function () {},
                "add": function () {},
                "addn": function () {},
                "and": function () {},
                "andln": function () {},
                "bincn": function () {},
                "bitLength": function () {},
                "byteLength": function () {},
                "clone": function () {},
                "cmp": function () {},
                "cmpn": function () {},
                "copy": function () {},
                "div": function () {},
                "divRound": function () {},
                "divmod": function () {},
                "divn": function () {},
                "egcd": function () {},
                "eq": function () {},
                "eqn": function () {},
                "forceRed": function () {},
                "fromRed": function () {},
                "fromTwos": function () {},
                "gcd": function () {},
                "gt": function () {},
                "gte": function () {},
                "gten": function () {},
                "gtn": function () {},
                "iabs": function () {},
                "iadd": function () {},
                "iaddn": function () {},
                "iand": function () {},
                "idivn": function () {},
                "imaskn": function () {},
                "imul": function () {},
                "imuln": function () {},
                "ineg": function () {},
                "inotn": function () {},
                "inspect": function () {},
                "invm": function () {},
                "ior": function () {},
                "isEven": function () {},
                "isNeg": function () {},
                "isOdd": function () {},
                "isZero": function () {},
                "ishln": function () {},
                "ishrn": function () {},
                "isqr": function () {},
                "isub": function () {},
                "isubn": function () {},
                "iuand": function () {},
                "iuor": function () {},
                "iushln": function () {},
                "iushrn": function () {},
                "iuxor": function () {},
                "ixor": function () {},
                "length": {},
                "lt": function () {},
                "lte": function () {},
                "lten": function () {},
                "ltn": function () {},
                "maskn": function () {},
                "mod": function () {},
                "modn": function () {},
                "mul": function () {},
                "mulTo": function () {},
                "mulf": function () {},
                "muln": function () {},
                "neg": function () {},
                "negative": {},
                "notn": function () {},
                "or": function () {},
                "pow": function () {},
                "red": {},
                "redAdd": function () {},
                "redIAdd": function () {},
                "redIMul": function () {},
                "redISqr": function () {},
                "redISub": function () {},
                "redInvm": function () {},
                "redMul": function () {},
                "redNeg": function () {},
                "redPow": function () {},
                "redShl": function () {},
                "redSqr": function () {},
                "redSqrt": function () {},
                "redSub": function () {},
                "setn": function () {},
                "shln": function () {},
                "shrn": function () {},
                "sqr": function () {},
                "strip": function () {},
                "sub": function () {},
                "subn": function () {},
                "testn": function () {},
                "toArray": function () {},
                "toArrayLike": function () {},
                "toBuffer": function () {},
                "toJSON": function () {},
                "toNumber": function () {},
                "toRed": function () {},
                "toString": function () {},
                "toTwos": function () {},
                "uand": function () {},
                "ucmp": function () {},
                "umod": function () {},
                "uor": function () {},
                "ushln": function () {},
                "ushrn": function () {},
                "uxor": function () {},
                "words": {},
                "xor": function () {},
                "zeroBits": function () {}
              },
              "split": function () {},
              "tmp": {
                "_countBits": function () {},
                "_expand": function () {},
                "_forceRed": function () {},
                "_iaddn": function () {},
                "_init": function () {},
                "_initArray": function () {},
                "_initNumber": function () {},
                "_invmp": function () {},
                "_ishlnsubmul": function () {},
                "_normSign": function () {},
                "_parseBase": function () {},
                "_parseHex": function () {},
                "_wordDiv": function () {},
                "_zeroBits": function () {},
                "abs": function () {},
                "add": function () {},
                "addn": function () {},
                "and": function () {},
                "andln": function () {},
                "bincn": function () {},
                "bitLength": function () {},
                "byteLength": function () {},
                "clone": function () {},
                "cmp": function () {},
                "cmpn": function () {},
                "copy": function () {},
                "div": function () {},
                "divRound": function () {},
                "divmod": function () {},
                "divn": function () {},
                "egcd": function () {},
                "eq": function () {},
                "eqn": function () {},
                "forceRed": function () {},
                "fromRed": function () {},
                "fromTwos": function () {},
                "gcd": function () {},
                "gt": function () {},
                "gte": function () {},
                "gten": function () {},
                "gtn": function () {},
                "iabs": function () {},
                "iadd": function () {},
                "iaddn": function () {},
                "iand": function () {},
                "idivn": function () {},
                "imaskn": function () {},
                "imul": function () {},
                "imuln": function () {},
                "ineg": function () {},
                "inotn": function () {},
                "inspect": function () {},
                "invm": function () {},
                "ior": function () {},
                "isEven": function () {},
                "isNeg": function () {},
                "isOdd": function () {},
                "isZero": function () {},
                "ishln": function () {},
                "ishrn": function () {},
                "isqr": function () {},
                "isub": function () {},
                "isubn": function () {},
                "iuand": function () {},
                "iuor": function () {},
                "iushln": function () {},
                "iushrn": function () {},
                "iuxor": function () {},
                "ixor": function () {},
                "length": {},
                "lt": function () {},
                "lte": function () {},
                "lten": function () {},
                "ltn": function () {},
                "maskn": function () {},
                "mod": function () {},
                "modn": function () {},
                "mul": function () {},
                "mulTo": function () {},
                "mulf": function () {},
                "muln": function () {},
                "neg": function () {},
                "negative": {},
                "notn": function () {},
                "or": function () {},
                "pow": function () {},
                "red": {},
                "redAdd": function () {},
                "redIAdd": function () {},
                "redIMul": function () {},
                "redISqr": function () {},
                "redISub": function () {},
                "redInvm": function () {},
                "redMul": function () {},
                "redNeg": function () {},
                "redPow": function () {},
                "redShl": function () {},
                "redSqr": function () {},
                "redSqrt": function () {},
                "redSub": function () {},
                "setn": function () {},
                "shln": function () {},
                "shrn": function () {},
                "sqr": function () {},
                "strip": function () {},
                "sub": function () {},
                "subn": function () {},
                "testn": function () {},
                "toArray": function () {},
                "toArrayLike": function () {},
                "toBuffer": function () {},
                "toJSON": function () {},
                "toNumber": function () {},
                "toRed": function () {},
                "toString": function () {},
                "toTwos": function () {},
                "uand": function () {},
                "ucmp": function () {},
                "umod": function () {},
                "uor": function () {},
                "ushln": function () {},
                "ushrn": function () {},
                "uxor": function () {},
                "words": {},
                "xor": function () {},
                "zeroBits": function () {}
              }
            },
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "redAdd": function () {},
          "redIAdd": function () {},
          "redIMul": function () {},
          "redISqr": function () {},
          "redISub": function () {},
          "redInvm": function () {},
          "redMul": function () {},
          "redNeg": function () {},
          "redPow": function () {},
          "redShl": function () {},
          "redSqr": function () {},
          "redSqrt": function () {},
          "redSub": function () {},
          "setn": function () {},
          "shln": function () {},
          "shrn": function () {},
          "sqr": function () {},
          "strip": function () {},
          "sub": function () {},
          "subn": function () {},
          "testn": function () {},
          "toArray": function () {},
          "toArrayLike": function () {},
          "toBuffer": function () {},
          "toJSON": function () {},
          "toNumber": function () {},
          "toRed": function () {},
          "toString": function () {},
          "toTwos": function () {},
          "uand": function () {},
          "ucmp": function () {},
          "umod": function () {},
          "uor": function () {},
          "ushln": function () {},
          "ushrn": function () {},
          "uxor": function () {},
          "words": {},
          "xor": function () {},
          "zeroBits": function () {}
        },
        "b": {
          "_countBits": function () {},
          "_expand": function () {},
          "_forceRed": function () {},
          "_iaddn": function () {},
          "_init": function () {},
          "_initArray": function () {},
          "_initNumber": function () {},
          "_invmp": function () {},
          "_ishlnsubmul": function () {},
          "_normSign": function () {},
          "_parseBase": function () {},
          "_parseHex": function () {},
          "_wordDiv": function () {},
          "_zeroBits": function () {},
          "abs": function () {},
          "add": function () {},
          "addn": function () {},
          "and": function () {},
          "andln": function () {},
          "bincn": function () {},
          "bitLength": function () {},
          "byteLength": function () {},
          "clone": function () {},
          "cmp": function () {},
          "cmpn": function () {},
          "copy": function () {},
          "div": function () {},
          "divRound": function () {},
          "divmod": function () {},
          "divn": function () {},
          "egcd": function () {},
          "eq": function () {},
          "eqn": function () {},
          "forceRed": function () {},
          "fromRed": function () {},
          "fromTwos": function () {},
          "gcd": function () {},
          "gt": function () {},
          "gte": function () {},
          "gten": function () {},
          "gtn": function () {},
          "iabs": function () {},
          "iadd": function () {},
          "iaddn": function () {},
          "iand": function () {},
          "idivn": function () {},
          "imaskn": function () {},
          "imul": function () {},
          "imuln": function () {},
          "ineg": function () {},
          "inotn": function () {},
          "inspect": function () {},
          "invm": function () {},
          "ior": function () {},
          "isEven": function () {},
          "isNeg": function () {},
          "isOdd": function () {},
          "isZero": function () {},
          "ishln": function () {},
          "ishrn": function () {},
          "isqr": function () {},
          "isub": function () {},
          "isubn": function () {},
          "iuand": function () {},
          "iuor": function () {},
          "iushln": function () {},
          "iushrn": function () {},
          "iuxor": function () {},
          "ixor": function () {},
          "length": {},
          "lt": function () {},
          "lte": function () {},
          "lten": function () {},
          "ltn": function () {},
          "maskn": function () {},
          "mod": function () {},
          "modn": function () {},
          "mul": function () {},
          "mulTo": function () {},
          "mulf": function () {},
          "muln": function () {},
          "neg": function () {},
          "negative": {},
          "notn": function () {},
          "or": function () {},
          "pow": function () {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "_countBits": function () {},
              "_expand": function () {},
              "_forceRed": function () {},
              "_iaddn": function () {},
              "_init": function () {},
              "_initArray": function () {},
              "_initNumber": function () {},
              "_invmp": function () {},
              "_ishlnsubmul": function () {},
              "_normSign": function () {},
              "_parseBase": function () {},
              "_parseHex": function () {},
              "_wordDiv": function () {},
              "_zeroBits": function () {},
              "abs": function () {},
              "add": function () {},
              "addn": function () {},
              "and": function () {},
              "andln": function () {},
              "bincn": function () {},
              "bitLength": function () {},
              "byteLength": function () {},
              "clone": function () {},
              "cmp": function () {},
              "cmpn": function () {},
              "copy": function () {},
              "div": function () {},
              "divRound": function () {},
              "divmod": function () {},
              "divn": function () {},
              "egcd": function () {},
              "eq": function () {},
              "eqn": function () {},
              "forceRed": function () {},
              "fromRed": function () {},
              "fromTwos": function () {},
              "gcd": function () {},
              "gt": function () {},
              "gte": function () {},
              "gten": function () {},
              "gtn": function () {},
              "iabs": function () {},
              "iadd": function () {},
              "iaddn": function () {},
              "iand": function () {},
              "idivn": function () {},
              "imaskn": function () {},
              "imul": function () {},
              "imuln": function () {},
              "ineg": function () {},
              "inotn": function () {},
              "inspect": function () {},
              "invm": function () {},
              "ior": function () {},
              "isEven": function () {},
              "isNeg": function () {},
              "isOdd": function () {},
              "isZero": function () {},
              "ishln": function () {},
              "ishrn": function () {},
              "isqr": function () {},
              "isub": function () {},
              "isubn": function () {},
              "iuand": function () {},
              "iuor": function () {},
              "iushln": function () {},
              "iushrn": function () {},
              "iuxor": function () {},
              "ixor": function () {},
              "length": {},
              "lt": function () {},
              "lte": function () {},
              "lten": function () {},
              "ltn": function () {},
              "maskn": function () {},
              "mod": function () {},
              "modn": function () {},
              "mul": function () {},
              "mulTo": function () {},
              "mulf": function () {},
              "muln": function () {},
              "neg": function () {},
              "negative": {},
              "notn": function () {},
              "or": function () {},
              "pow": function () {},
              "red": {},
              "redAdd": function () {},
              "redIAdd": function () {},
              "redIMul": function () {},
              "redISqr": function () {},
              "redISub": function () {},
              "redInvm": function () {},
              "redMul": function () {},
              "redNeg": function () {},
              "redPow": function () {},
              "redShl": function () {},
              "redSqr": function () {},
              "redSqrt": function () {},
              "redSub": function () {},
              "setn": function () {},
              "shln": function () {},
              "shrn": function () {},
              "sqr": function () {},
              "strip": function () {},
              "sub": function () {},
              "subn": function () {},
              "testn": function () {},
              "toArray": function () {},
              "toArrayLike": function () {},
              "toBuffer": function () {},
              "toJSON": function () {},
              "toNumber": function () {},
              "toRed": function () {},
              "toString": function () {},
              "toTwos": function () {},
              "uand": function () {},
              "ucmp": function () {},
              "umod": function () {},
              "uor": function () {},
              "ushln": function () {},
              "ushrn": function () {},
              "uxor": function () {},
              "words": {},
              "xor": function () {},
              "zeroBits": function () {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {
              "_tmp": function () {},
              "constructor": {
                "super_": function () {}
              },
              "imulK": function () {},
              "ireduce": function () {},
              "k": {
                "_countBits": function () {},
                "_expand": function () {},
                "_forceRed": function () {},
                "_iaddn": function () {},
                "_init": function () {},
                "_initArray": function () {},
                "_initNumber": function () {},
                "_invmp": function () {},
                "_ishlnsubmul": function () {},
                "_normSign": function () {},
                "_parseBase": function () {},
                "_parseHex": function () {},
                "_wordDiv": function () {},
                "_zeroBits": function () {},
                "abs": function () {},
                "add": function () {},
                "addn": function () {},
                "and": function () {},
                "andln": function () {},
                "bincn": function () {},
                "bitLength": function () {},
                "byteLength": function () {},
                "clone": function () {},
                "cmp": function () {},
                "cmpn": function () {},
                "copy": function () {},
                "div": function () {},
                "divRound": function () {},
                "divmod": function () {},
                "divn": function () {},
                "egcd": function () {},
                "eq": function () {},
                "eqn": function () {},
                "forceRed": function () {},
                "fromRed": function () {},
                "fromTwos": function () {},
                "gcd": function () {},
                "gt": function () {},
                "gte": function () {},
                "gten": function () {},
                "gtn": function () {},
                "iabs": function () {},
                "iadd": function () {},
                "iaddn": function () {},
                "iand": function () {},
                "idivn": function () {},
                "imaskn": function () {},
                "imul": function () {},
                "imuln": function () {},
                "ineg": function () {},
                "inotn": function () {},
                "inspect": function () {},
                "invm": function () {},
                "ior": function () {},
                "isEven": function () {},
                "isNeg": function () {},
                "isOdd": function () {},
                "isZero": function () {},
                "ishln": function () {},
                "ishrn": function () {},
                "isqr": function () {},
                "isub": function () {},
                "isubn": function () {},
                "iuand": function () {},
                "iuor": function () {},
                "iushln": function () {},
                "iushrn": function () {},
                "iuxor": function () {},
                "ixor": function () {},
                "length": {},
                "lt": function () {},
                "lte": function () {},
                "lten": function () {},
                "ltn": function () {},
                "maskn": function () {},
                "mod": function () {},
                "modn": function () {},
                "mul": function () {},
                "mulTo": function () {},
                "mulf": function () {},
                "muln": function () {},
                "neg": function () {},
                "negative": {},
                "notn": function () {},
                "or": function () {},
                "pow": function () {},
                "red": {},
                "redAdd": function () {},
                "redIAdd": function () {},
                "redIMul": function () {},
                "redISqr": function () {},
                "redISub": function () {},
                "redInvm": function () {},
                "redMul": function () {},
                "redNeg": function () {},
                "redPow": function () {},
                "redShl": function () {},
                "redSqr": function () {},
                "redSqrt": function () {},
                "redSub": function () {},
                "setn": function () {},
                "shln": function () {},
                "shrn": function () {},
                "sqr": function () {},
                "strip": function () {},
                "sub": function () {},
                "subn": function () {},
                "testn": function () {},
                "toArray": function () {},
                "toArrayLike": function () {},
                "toBuffer": function () {},
                "toJSON": function () {},
                "toNumber": function () {},
                "toRed": function () {},
                "toString": function () {},
                "toTwos": function () {},
                "uand": function () {},
                "ucmp": function () {},
                "umod": function () {},
                "uor": function () {},
                "ushln": function () {},
                "ushrn": function () {},
                "uxor": function () {},
                "words": {},
                "xor": function () {},
                "zeroBits": function () {}
              },
              "n": {},
              "name": {},
              "p": {
                "_countBits": function () {},
                "_expand": function () {},
                "_forceRed": function () {},
                "_iaddn": function () {},
                "_init": function () {},
                "_initArray": function () {},
                "_initNumber": function () {},
                "_invmp": function () {},
                "_ishlnsubmul": function () {},
                "_normSign": function () {},
                "_parseBase": function () {},
                "_parseHex": function () {},
                "_wordDiv": function () {},
                "_zeroBits": function () {},
                "abs": function () {},
                "add": function () {},
                "addn": function () {},
                "and": function () {},
                "andln": function () {},
                "bincn": function () {},
                "bitLength": function () {},
                "byteLength": function () {},
                "clone": function () {},
                "cmp": function () {},
                "cmpn": function () {},
                "copy": function () {},
                "div": function () {},
                "divRound": function () {},
                "divmod": function () {},
                "divn": function () {},
                "egcd": function () {},
                "eq": function () {},
                "eqn": function () {},
                "forceRed": function () {},
                "fromRed": function () {},
                "fromTwos": function () {},
                "gcd": function () {},
                "gt": function () {},
                "gte": function () {},
                "gten": function () {},
                "gtn": function () {},
                "iabs": function () {},
                "iadd": function () {},
                "iaddn": function () {},
                "iand": function () {},
                "idivn": function () {},
                "imaskn": function () {},
                "imul": function () {},
                "imuln": function () {},
                "ineg": function () {},
                "inotn": function () {},
                "inspect": function () {},
                "invm": function () {},
                "ior": function () {},
                "isEven": function () {},
                "isNeg": function () {},
                "isOdd": function () {},
                "isZero": function () {},
                "ishln": function () {},
                "ishrn": function () {},
                "isqr": function () {},
                "isub": function () {},
                "isubn": function () {},
                "iuand": function () {},
                "iuor": function () {},
                "iushln": function () {},
                "iushrn": function () {},
                "iuxor": function () {},
                "ixor": function () {},
                "length": {},
                "lt": function () {},
                "lte": function () {},
                "lten": function () {},
                "ltn": function () {},
                "maskn": function () {},
                "mod": function () {},
                "modn": function () {},
                "mul": function () {},
                "mulTo": function () {},
                "mulf": function () {},
                "muln": function () {},
                "neg": function () {},
                "negative": {},
                "notn": function () {},
                "or": function () {},
                "pow": function () {},
                "red": {},
                "redAdd": function () {},
                "redIAdd": function () {},
                "redIMul": function () {},
                "redISqr": function () {},
                "redISub": function () {},
                "redInvm": function () {},
                "redMul": function () {},
                "redNeg": function () {},
                "redPow": function () {},
                "redShl": function () {},
                "redSqr": function () {},
                "redSqrt": function () {},
                "redSub": function () {},
                "setn": function () {},
                "shln": function () {},
                "shrn": function () {},
                "sqr": function () {},
                "strip": function () {},
                "sub": function () {},
                "subn": function () {},
                "testn": function () {},
                "toArray": function () {},
                "toArrayLike": function () {},
                "toBuffer": function () {},
                "toJSON": function () {},
                "toNumber": function () {},
                "toRed": function () {},
                "toString": function () {},
                "toTwos": function () {},
                "uand": function () {},
                "ucmp": function () {},
                "umod": function () {},
                "uor": function () {},
                "ushln": function () {},
                "ushrn": function () {},
                "uxor": function () {},
                "words": {},
                "xor": function () {},
                "zeroBits": function () {}
              },
              "split": function () {},
              "tmp": {
                "_countBits": function () {},
                "_expand": function () {},
                "_forceRed": function () {},
                "_iaddn": function () {},
                "_init": function () {},
                "_initArray": function () {},
                "_initNumber": function () {},
                "_invmp": function () {},
                "_ishlnsubmul": function () {},
                "_normSign": function () {},
                "_parseBase": function () {},
                "_parseHex": function () {},
                "_wordDiv": function () {},
                "_zeroBits": function () {},
                "abs": function () {},
                "add": function () {},
                "addn": function () {},
                "and": function () {},
                "andln": function () {},
                "bincn": function () {},
                "bitLength": function () {},
                "byteLength": function () {},
                "clone": function () {},
                "cmp": function () {},
                "cmpn": function () {},
                "copy": function () {},
                "div": function () {},
                "divRound": function () {},
                "divmod": function () {},
                "divn": function () {},
                "egcd": function () {},
                "eq": function () {},
                "eqn": function () {},
                "forceRed": function () {},
                "fromRed": function () {},
                "fromTwos": function () {},
                "gcd": function () {},
                "gt": function () {},
                "gte": function () {},
                "gten": function () {},
                "gtn": function () {},
                "iabs": function () {},
                "iadd": function () {},
                "iaddn": function () {},
                "iand": function () {},
                "idivn": function () {},
                "imaskn": function () {},
                "imul": function () {},
                "imuln": function () {},
                "ineg": function () {},
                "inotn": function () {},
                "inspect": function () {},
                "invm": function () {},
                "ior": function () {},
                "isEven": function () {},
                "isNeg": function () {},
                "isOdd": function () {},
                "isZero": function () {},
                "ishln": function () {},
                "ishrn": function () {},
                "isqr": function () {},
                "isub": function () {},
                "isubn": function () {},
                "iuand": function () {},
                "iuor": function () {},
                "iushln": function () {},
                "iushrn": function () {},
                "iuxor": function () {},
                "ixor": function () {},
                "length": {},
                "lt": function () {},
                "lte": function () {},
                "lten": function () {},
                "ltn": function () {},
                "maskn": function () {},
                "mod": function () {},
                "modn": function () {},
                "mul": function () {},
                "mulTo": function () {},
                "mulf": function () {},
                "muln": function () {},
                "neg": function () {},
                "negative": {},
                "notn": function () {},
                "or": function () {},
                "pow": function () {},
                "red": {},
                "redAdd": function () {},
                "redIAdd": function () {},
                "redIMul": function () {},
                "redISqr": function () {},
                "redISub": function () {},
                "redInvm": function () {},
                "redMul": function () {},
                "redNeg": function () {},
                "redPow": function () {},
                "redShl": function () {},
                "redSqr": function () {},
                "redSqrt": function () {},
                "redSub": function () {},
                "setn": function () {},
                "shln": function () {},
                "shrn": function () {},
                "sqr": function () {},
                "strip": function () {},
                "sub": function () {},
                "subn": function () {},
                "testn": function () {},
                "toArray": function () {},
                "toArrayLike": function () {},
                "toBuffer": function () {},
                "toJSON": function () {},
                "toNumber": function () {},
                "toRed": function () {},
                "toString": function () {},
                "toTwos": function () {},
                "uand": function () {},
                "ucmp": function () {},
                "umod": function () {},
                "uor": function () {},
                "ushln": function () {},
                "ushrn": function () {},
                "uxor": function () {},
                "words": {},
                "xor": function () {},
                "zeroBits": function () {}
              }
            },
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "redAdd": function () {},
          "redIAdd": function () {},
          "redIMul": function () {},
          "redISqr": function () {},
          "redISub": function () {},
          "redInvm": function () {},
          "redMul": function () {},
          "redNeg": function () {},
          "redPow": function () {},
          "redShl": function () {},
          "redSqr": function () {},
          "redSqrt": function () {},
          "redSub": function () {},
          "setn": function () {},
          "shln": function () {},
          "shrn": function () {},
          "sqr": function () {},
          "strip": function () {},
          "sub": function () {},
          "subn": function () {},
          "testn": function () {},
          "toArray": function () {},
          "toArrayLike": function () {},
          "toBuffer": function () {},
          "toJSON": function () {},
          "toNumber": function () {},
          "toRed": function () {},
          "toString": function () {},
          "toTwos": function () {},
          "uand": function () {},
          "ucmp": function () {},
          "umod": function () {},
          "uor": function () {},
          "ushln": function () {},
          "ushrn": function () {},
          "uxor": function () {},
          "words": {},
          "xor": function () {},
          "zeroBits": function () {}
        },
        "decodePoint": function () {},
        "g": {
          "_encode": function () {},
          "_getBeta": function () {},
          "_getDoubles": function () {},
          "_getNAFPoints": function () {},
          "_hasDoubles": function () {},
          "add": function () {},
          "curve": {},
          "dbl": function () {},
          "dblp": function () {},
          "diffAdd": function () {},
          "encode": function () {},
          "encodeCompressed": function () {},
          "eq": function () {},
          "getX": function () {},
          "inspect": function () {},
          "isInfinity": function () {},
          "jumlAdd": function () {},
          "mul": function () {},
          "mulAdd": function () {},
          "normalize": function () {},
          "precompute": function () {},
          "precomputed": {},
          "type": {},
          "validate": function () {},
          "x": {
            "_countBits": function () {},
            "_expand": function () {},
            "_forceRed": function () {},
            "_iaddn": function () {},
            "_init": function () {},
            "_initArray": function () {},
            "_initNumber": function () {},
            "_invmp": function () {},
            "_ishlnsubmul": function () {},
            "_normSign": function () {},
            "_parseBase": function () {},
            "_parseHex": function () {},
            "_wordDiv": function () {},
            "_zeroBits": function () {},
            "abs": function () {},
            "add": function () {},
            "addn": function () {},
            "and": function () {},
            "andln": function () {},
            "bincn": function () {},
            "bitLength": function () {},
            "byteLength": function () {},
            "clone": function () {},
            "cmp": function () {},
            "cmpn": function () {},
            "copy": function () {},
            "div": function () {},
            "divRound": function () {},
            "divmod": function () {},
            "divn": function () {},
            "egcd": function () {},
            "eq": function () {},
            "eqn": function () {},
            "forceRed": function () {},
            "fromRed": function () {},
            "fromTwos": function () {},
            "gcd": function () {},
            "gt": function () {},
            "gte": function () {},
            "gten": function () {},
            "gtn": function () {},
            "iabs": function () {},
            "iadd": function () {},
            "iaddn": function () {},
            "iand": function () {},
            "idivn": function () {},
            "imaskn": function () {},
            "imul": function () {},
            "imuln": function () {},
            "ineg": function () {},
            "inotn": function () {},
            "inspect": function () {},
            "invm": function () {},
            "ior": function () {},
            "isEven": function () {},
            "isNeg": function () {},
            "isOdd": function () {},
            "isZero": function () {},
            "ishln": function () {},
            "ishrn": function () {},
            "isqr": function () {},
            "isub": function () {},
            "isubn": function () {},
            "iuand": function () {},
            "iuor": function () {},
            "iushln": function () {},
            "iushrn": function () {},
            "iuxor": function () {},
            "ixor": function () {},
            "length": {},
            "lt": function () {},
            "lte": function () {},
            "lten": function () {},
            "ltn": function () {},
            "maskn": function () {},
            "mod": function () {},
            "modn": function () {},
            "mul": function () {},
            "mulTo": function () {},
            "mulf": function () {},
            "muln": function () {},
            "neg": function () {},
            "negative": {},
            "notn": function () {},
            "or": function () {},
            "pow": function () {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "_countBits": function () {},
                "_expand": function () {},
                "_forceRed": function () {},
                "_iaddn": function () {},
                "_init": function () {},
                "_initArray": function () {},
                "_initNumber": function () {},
                "_invmp": function () {},
                "_ishlnsubmul": function () {},
                "_normSign": function () {},
                "_parseBase": function () {},
                "_parseHex": function () {},
                "_wordDiv": function () {},
                "_zeroBits": function () {},
                "abs": function () {},
                "add": function () {},
                "addn": function () {},
                "and": function () {},
                "andln": function () {},
                "bincn": function () {},
                "bitLength": function () {},
                "byteLength": function () {},
                "clone": function () {},
                "cmp": function () {},
                "cmpn": function () {},
                "copy": function () {},
                "div": function () {},
                "divRound": function () {},
                "divmod": function () {},
                "divn": function () {},
                "egcd": function () {},
                "eq": function () {},
                "eqn": function () {},
                "forceRed": function () {},
                "fromRed": function () {},
                "fromTwos": function () {},
                "gcd": function () {},
                "gt": function () {},
                "gte": function () {},
                "gten": function () {},
                "gtn": function () {},
                "iabs": function () {},
                "iadd": function () {},
                "iaddn": function () {},
                "iand": function () {},
                "idivn": function () {},
                "imaskn": function () {},
                "imul": function () {},
                "imuln": function () {},
                "ineg": function () {},
                "inotn": function () {},
                "inspect": function () {},
                "invm": function () {},
                "ior": function () {},
                "isEven": function () {},
                "isNeg": function () {},
                "isOdd": function () {},
                "isZero": function () {},
                "ishln": function () {},
                "ishrn": function () {},
                "isqr": function () {},
                "isub": function () {},
                "isubn": function () {},
                "iuand": function () {},
                "iuor": function () {},
                "iushln": function () {},
                "iushrn": function () {},
                "iuxor": function () {},
                "ixor": function () {},
                "length": {},
                "lt": function () {},
                "lte": function () {},
                "lten": function () {},
                "ltn": function () {},
                "maskn": function () {},
                "mod": function () {},
                "modn": function () {},
                "mul": function () {},
                "mulTo": function () {},
                "mulf": function () {},
                "muln": function () {},
                "neg": function () {},
                "negative": {},
                "notn": function () {},
                "or": function () {},
                "pow": function () {},
                "red": {},
                "redAdd": function () {},
                "redIAdd": function () {},
                "redIMul": function () {},
                "redISqr": function () {},
                "redISub": function () {},
                "redInvm": function () {},
                "redMul": function () {},
                "redNeg": function () {},
                "redPow": function () {},
                "redShl": function () {},
                "redSqr": function () {},
                "redSqrt": function () {},
                "redSub": function () {},
                "setn": function () {},
                "shln": function () {},
                "shrn": function () {},
                "sqr": function () {},
                "strip": function () {},
                "sub": function () {},
                "subn": function () {},
                "testn": function () {},
                "toArray": function () {},
                "toArrayLike": function () {},
                "toBuffer": function () {},
                "toJSON": function () {},
                "toNumber": function () {},
                "toRed": function () {},
                "toString": function () {},
                "toTwos": function () {},
                "uand": function () {},
                "ucmp": function () {},
                "umod": function () {},
                "uor": function () {},
                "ushln": function () {},
                "ushrn": function () {},
                "uxor": function () {},
                "words": {},
                "xor": function () {},
                "zeroBits": function () {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {
                "_tmp": function () {},
                "constructor": {},
                "imulK": function () {},
                "ireduce": function () {},
                "k": {},
                "n": {},
                "name": {},
                "p": {},
                "split": function () {},
                "tmp": {}
              },
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "z": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          }
        },
        "i4": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "n": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "one": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "p": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "point": function () {},
        "pointFromJSON": function () {},
        "red": {},
        "redN": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "two": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "type": {},
        "validate": function () {},
        "zero": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        }
      },
      "g": {},
      "hash": {
        "blockSize": {},
        "hmacStrength": {},
        "outSize": {},
        "padLength": {},
        "super_": function () {}
      },
      "n": {
        "length": {},
        "negative": {},
        "red": {},
        "words": {}
      }
    },
    "ed25519": {
      "curve": {
        "_fixedNafMul": function () {},
        "_maxwellTrick": {},
        "_mulA": function () {},
        "_mulC": function () {},
        "_wnafMul": function () {},
        "_wnafMulAdd": function () {},
        "_wnafT1": {},
        "_wnafT2": {},
        "_wnafT3": {},
        "_wnafT4": {},
        "a": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "c": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "c2": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "d": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "dd": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "decodePoint": function () {},
        "extended": {},
        "g": {
          "_encode": function () {},
          "_extAdd": function () {},
          "_extDbl": function () {},
          "_getBeta": function () {},
          "_getDoubles": function () {},
          "_getNAFPoints": function () {},
          "_hasDoubles": function () {},
          "_projAdd": function () {},
          "_projDbl": function () {},
          "add": function () {},
          "curve": {},
          "dbl": function () {},
          "dblp": function () {},
          "encode": function () {},
          "encodeCompressed": function () {},
          "eq": function () {},
          "eqXToP": function () {},
          "getX": function () {},
          "getY": function () {},
          "inspect": function () {},
          "isInfinity": function () {},
          "jmulAdd": function () {},
          "mixedAdd": function () {},
          "mul": function () {},
          "mulAdd": function () {},
          "neg": function () {},
          "normalize": function () {},
          "precompute": function () {},
          "precomputed": {},
          "t": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "toP": function () {},
          "type": {},
          "validate": function () {},
          "x": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "y": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "z": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "zOne": {}
        },
        "jpoint": function () {},
        "mOneA": {},
        "n": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "one": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "oneC": {},
        "p": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "point": function () {},
        "pointFromJSON": function () {},
        "pointFromX": function () {},
        "pointFromY": function () {},
        "red": {},
        "redN": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "twisted": {},
        "two": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "type": {},
        "validate": function () {},
        "zero": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        }
      },
      "g": {},
      "hash": {
        "blockSize": {},
        "hmacStrength": {},
        "outSize": {},
        "padLength": {},
        "super_": function () {}
      },
      "n": {
        "length": {},
        "negative": {},
        "red": {},
        "words": {}
      }
    },
    "p192": {
      "curve": {
        "_endoSplit": function () {},
        "_endoWnafMulAdd": function () {},
        "_endoWnafT1": {},
        "_endoWnafT2": {},
        "_fixedNafMul": function () {},
        "_getEndoBasis": function () {},
        "_getEndoRoots": function () {},
        "_getEndomorphism": function () {},
        "_maxwellTrick": {},
        "_wnafMul": function () {},
        "_wnafMulAdd": function () {},
        "_wnafT1": {},
        "_wnafT2": {},
        "_wnafT3": {},
        "_wnafT4": {},
        "a": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {
              "_tmp": function () {},
              "constructor": {},
              "imulK": function () {},
              "ireduce": function () {},
              "k": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "n": {},
              "name": {},
              "p": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "split": function () {},
              "tmp": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              }
            },
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "b": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {
              "_tmp": function () {},
              "constructor": {},
              "imulK": function () {},
              "ireduce": function () {},
              "k": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "n": {},
              "name": {},
              "p": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "split": function () {},
              "tmp": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              }
            },
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "decodePoint": function () {},
        "endo": {},
        "g": {
          "_encode": function () {},
          "_getBeta": function () {},
          "_getDoubles": function () {},
          "_getNAFPoints": function () {},
          "_hasDoubles": function () {},
          "add": function () {},
          "curve": {},
          "dbl": function () {},
          "dblp": function () {},
          "encode": function () {},
          "encodeCompressed": function () {},
          "eq": function () {},
          "getX": function () {},
          "getY": function () {},
          "inf": {},
          "inspect": function () {},
          "isInfinity": function () {},
          "jmulAdd": function () {},
          "mul": function () {},
          "mulAdd": function () {},
          "neg": function () {},
          "precompute": function () {},
          "precomputed": {},
          "toJ": function () {},
          "toJSON": function () {},
          "type": {},
          "validate": function () {},
          "x": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {
                "_tmp": function () {},
                "constructor": {},
                "imulK": function () {},
                "ireduce": function () {},
                "k": {
                  "length": {},
                  "negative": {},
                  "red": {},
                  "words": {}
                },
                "n": {},
                "name": {},
                "p": {
                  "length": {},
                  "negative": {},
                  "red": {},
                  "words": {}
                },
                "split": function () {},
                "tmp": {
                  "length": {},
                  "negative": {},
                  "red": {},
                  "words": {}
                }
              },
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "y": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          }
        },
        "jpoint": function () {},
        "n": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "p": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "point": function () {},
        "pointFromJSON": function () {},
        "pointFromX": function () {},
        "red": {},
        "redN": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "threeA": {},
        "tinv": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "two": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "type": {},
        "validate": function () {},
        "zero": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "zeroA": {}
      },
      "g": {},
      "hash": {
        "blockSize": {},
        "hmacStrength": {},
        "outSize": {},
        "padLength": {},
        "super_": function () {}
      },
      "n": {
        "length": {},
        "negative": {},
        "red": {},
        "words": {}
      }
    },
    "p224": {
      "curve": {
        "_endoSplit": function () {},
        "_endoWnafMulAdd": function () {},
        "_endoWnafT1": {},
        "_endoWnafT2": {},
        "_fixedNafMul": function () {},
        "_getEndoBasis": function () {},
        "_getEndoRoots": function () {},
        "_getEndomorphism": function () {},
        "_maxwellTrick": {},
        "_wnafMul": function () {},
        "_wnafMulAdd": function () {},
        "_wnafT1": {},
        "_wnafT2": {},
        "_wnafT3": {},
        "_wnafT4": {},
        "a": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {
              "_tmp": function () {},
              "constructor": {},
              "imulK": function () {},
              "ireduce": function () {},
              "k": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "n": {},
              "name": {},
              "p": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "split": function () {},
              "tmp": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              }
            },
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "b": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {
              "_tmp": function () {},
              "constructor": {},
              "imulK": function () {},
              "ireduce": function () {},
              "k": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "n": {},
              "name": {},
              "p": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {
                "_tmp": function () {},
                "constructor": {},
                "imulK": function () {},
                "ireduce": function () {},
                "k": {
                  "length": {},
                  "negative": {},
                  "red": {},
                  "words": {}
                },
                "n": {},
                "name": {},
                "p": {
                  "length": {},
                  "negative": {},
                  "red": {},
                  "words": {},
                },
                "split": function () {},
                "tmp": {
                  "length": {},
                  "negative": {},
                  "red": {},
                  "words": {}
                }
              },
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "y": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          }
        },
        "jpoint": function () {},
        "n": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "one": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "p": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "point": function () {},
        "pointFromJSON": function () {},
        "pointFromX": function () {},
        "red": {},
        "redN": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "threeA": {},
        "tinv": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "two": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "type": {},
        "validate": function () {},
        "zero": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "zeroA": {}
      },
      "g": {},
      "hash": {
        "blockSize": {},
        "hmacStrength": {},
        "outSize": {},
        "padLength": {},
        "super_": function () {}
      },
      "n": {
        "length": {},
        "negative": {},
        "red": {},
        "words": {}
      }
    },
    "p256": {
      "curve": {
        "_endoSplit": function () {},
        "_endoWnafMulAdd": function () {},
        "_endoWnafT1": {},
        "_endoWnafT2": {},
        "_fixedNafMul": function () {},
        "_getEndoBasis": function () {},
        "_getEndoRoots": function () {},
        "_getEndomorphism": function () {},
        "_maxwellTrick": {},
        "_wnafMul": function () {},
        "_wnafMulAdd": function () {},
        "_wnafT1": {},
        "_wnafT2": {},
        "_wnafT3": {},
        "_wnafT4": {},
        "a": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "b": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "decodePoint": function () {},
        "endo": {},
        "g": {
          "_encode": function () {},
          "_getBeta": function () {},
          "_getDoubles": function () {},
          "_getNAFPoints": function () {},
          "_hasDoubles": function () {},
          "add": function () {},
          "curve": {},
          "dbl": function () {},
          "dblp": function () {},
          "encode": function () {},
          "encodeCompressed": function () {},
          "eq": function () {},
          "getX": function () {},
          "getY": function () {},
          "inf": {},
          "inspect": function () {},
          "isInfinity": function () {},
          "jmulAdd": function () {},
          "mul": function () {},
          "mulAdd": function () {},
          "neg": function () {},
          "precompute": function () {},
          "precomputed": {},
          "toJ": function () {},
          "toJSON": function () {},
          "type": {},
          "validate": function () {},
          "x": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "y": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          }
        },
        "jpoint": function () {},
        "n": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "one": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "p": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "point": function () {},
        "pointFromJSON": function () {},
        "pointFromX": function () {},
        "red": {
          "_verify1": function () {},
          "_verify2": function () {},
          "add": function () {},
          "constructor": {
            "super_": function () {}
          },
          "convertFrom": function () {},
          "convertTo": function () {},
          "iadd": function () {},
          "imod": function () {},
          "imul": function () {},
          "invm": function () {},
          "isqr": function () {},
          "isub": function () {},
          "m": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "minv": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "mul": function () {},
          "neg": function () {},
          "pow": function () {},
          "prime": {},
          "r": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {},
          },
          "r2": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "rinv": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "shift": {},
          "shl": function () {},
          "sqr": function () {},
          "sqrt": function () {},
          "sub": function () {}
        },
        "redN": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "threeA": {},
        "tinv": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "two": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "type": {},
        "validate": function () {},
        "zero": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "zeroA": {}
      },
      "g": {
        "_encode": function () {},
        "_getBeta": function () {},
        "_getDoubles": function () {},
        "_getNAFPoints": function () {},
        "_hasDoubles": function () {},
        "add": function () {},
        "curve": {
          "_endoSplit": function () {},
          "_endoWnafMulAdd": function () {},
          "_endoWnafT1": {},
          "_endoWnafT2": {},
          "_fixedNafMul": function () {},
          "_getEndoBasis": function () {},
          "_getEndoRoots": function () {},
          "_getEndomorphism": function () {},
          "_maxwellTrick": {},
          "_wnafMul": function () {},
          "_wnafMulAdd": function () {},
          "_wnafT1": {},
          "_wnafT2": {},
          "_wnafT3": {},
          "_wnafT4": {},
          "a": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "b": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "decodePoint": function () {},
          "endo": {},
          "g": {},
          "jpoint": function () {},
          "n": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "one": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "p": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "point": function () {},
          "pointFromJSON": function () {},
          "pointFromX": function () {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "redN": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "threeA": {},
          "tinv": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "neg": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "two": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "type": {},
          "validate": function () {},
          "zero": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "zeroA": {}
        },
        "dbl": function () {},
        "dblp": function () {},
        "encode": function () {},
        "encodeCompressed": function () {},
        "eq": function () {},
        "getX": function () {},
        "getY": function () {},
        "inf": {},
        "inspect": function () {},
        "isInfinity": function () {},
        "jmulAdd": function () {},
        "mul": function () {},
        "mulAdd": function () {},
        "neg": function () {},
        "precompute": function () {},
        "precomputed": {},
        "toJ": function () {},
        "toJSON": function () {},
        "type": {},
        "validate": function () {},
        "x": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "y": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        }
      },
      "hash": {
        "blockSize": {},
        "hmacStrength": {},
        "outSize": {},
        "padLength": {},
        "super_": function () {}
      },
      "n": {
        "length": {},
        "negative": {},
        "red": {},
        "words": {}
      }
    },
    "p384": {
      "curve": {
        "_endoSplit": function () {},
        "_endoWnafMulAdd": function () {},
        "_endoWnafT1": {},
        "_endoWnafT2": {},
        "_fixedNafMul": function () {},
        "_getEndoBasis": function () {},
        "_getEndoRoots": function () {},
        "_getEndomorphism": function () {},
        "_maxwellTrick": {},
        "_wnafMul": function () {},
        "_wnafMulAdd": function () {},
        "_wnafT1": {},
        "_wnafT2": {},
        "_wnafT3": {},
        "_wnafT4": {},
        "a": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {},
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "b": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "decodePoint": function () {},
        "endo": {},
        "g": {
          "_encode": function () {},
          "_getBeta": function () {},
          "_getDoubles": function () {},
          "_getNAFPoints": function () {},
          "_hasDoubles": function () {},
          "add": function () {},
          "curve": {},
          "dbl": function () {},
          "dblp": function () {},
          "encode": function () {},
          "encodeCompressed": function () {},
          "eq": function () {},
          "getX": function () {},
          "getY": function () {},
          "inf": {},
          "inspect": function () {},
          "isInfinity": function () {},
          "jmulAdd": function () {},
          "mul": function () {},
          "mulAdd": function () {},
          "neg": function () {},
          "precompute": function () {},
          "precomputed": {},
          "toJ": function () {},
          "toJSON": function () {},
          "type": {},
          "validate": function () {},
          "x": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {},
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "y": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          }
        },
        "jpoint": function () {},
        "n": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "one": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "p": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "point": function () {},
        "pointFromJSON": function () {},
        "pointFromX": function () {},
        "red": {
          "_verify1": function () {},
          "_verify2": function () {},
          "add": function () {},
          "constructor": {
            "super_": function () {}
          },
          "convertFrom": function () {},
          "convertTo": function () {},
          "iadd": function () {},
          "imod": function () {},
          "imul": function () {},
          "invm": function () {},
          "isqr": function () {},
          "isub": function () {},
          "m": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "minv": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "mul": function () {},
          "neg": function () {},
          "pow": function () {},
          "prime": {},
          "r": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "r2": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "rinv": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "shift": {},
          "shl": function () {},
          "sqr": function () {},
          "sqrt": function () {},
          "sub": function () {}
        },
        "redN": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "threeA": {},
        "tinv": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "two": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "type": {},
        "validate": function () {},
        "zero": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {},
        },
        "zeroA": {}
      },
      "g": {
        "_encode": function () {},
        "_getBeta": function () {},
        "_getDoubles": function () {},
        "_getNAFPoints": function () {},
        "_hasDoubles": function () {},
        "add": function () {},
        "curve": {
          "_endoSplit": function () {},
          "_endoWnafMulAdd": function () {},
          "_endoWnafT1": {},
          "_endoWnafT2": {},
          "_fixedNafMul": function () {},
          "_getEndoBasis": function () {},
          "_getEndoRoots": function () {},
          "_getEndomorphism": function () {},
          "_maxwellTrick": {},
          "_wnafMul": function () {},
          "_wnafMulAdd": function () {},
          "_wnafT1": {},
          "_wnafT2": {},
          "_wnafT3": {},
          "_wnafT4": {},
          "a": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "b": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "decodePoint": function () {},
          "endo": {},
          "g": {},
          "jpoint": function () {},
          "n": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "one": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "p": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "point": function () {},
          "pointFromJSON": function () {},
          "pointFromX": function () {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "redN": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "threeA": {},
          "tinv": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "two": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "type": {},
          "validate": function () {},
          "zero": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "zeroA": {}
        },
        "dbl": function () {},
        "dblp": function () {},
        "encode": function () {},
        "encodeCompressed": function () {},
        "eq": function () {},
        "getX": function () {},
        "getY": function () {},
        "inf": {},
        "inspect": function () {},
        "isInfinity": function () {},
        "jmulAdd": function () {},
        "mul": function () {},
        "mulAdd": function () {},
        "neg": function () {},
        "precompute": function () {},
        "precomputed": {},
        "toJ": function () {},
        "toJSON": function () {},
        "type": {},
        "validate": function () {},
        "x": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "y": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        }
      },
      "hash": {
        "blockSize": {},
        "hmacStrength": {},
        "outSize": {},
        "padLength": {},
        "super_": {
          "blockSize": {},
          "hmacStrength": {},
          "outSize": {},
          "padLength": {},
          "super_": function () {}
        }
      },
      "n": {
        "length": {},
        "negative": {},
        "red": {},
        "words": {}
      }
    },
    "p521": {
      "curve": {
        "_endoSplit": function () {},
        "_endoWnafMulAdd": function () {},
        "_endoWnafT1": {},
        "_endoWnafT2": {},
        "_fixedNafMul": function () {},
        "_getEndoBasis": function () {},
        "_getEndoRoots": function () {},
        "_getEndomorphism": function () {},
        "_maxwellTrick": {},
        "_wnafMul": function () {},
        "_wnafMulAdd": function () {},
        "_wnafT1": {},
        "_wnafT2": {},
        "_wnafT3": {},
        "_wnafT4": {},
        "a": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "b": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "decodePoint": function () {},
        "endo": {},
        "g": {
          "_encode": function () {},
          "_getBeta": function () {},
          "_getDoubles": function () {},
          "_getNAFPoints": function () {},
          "_hasDoubles": function () {},
          "add": function () {},
          "curve": {},
          "dbl": function () {},
          "dblp": function () {},
          "encode": function () {},
          "encodeCompressed": function () {},
          "eq": function () {},
          "getX": function () {},
          "getY": function () {},
          "inf": {},
          "inspect": function () {},
          "isInfinity": function () {},
          "jmulAdd": function () {},
          "mul": function () {},
          "mulAdd": function () {},
          "neg": function () {},
          "precompute": function () {},
          "precomputed": {},
          "toJ": function () {},
          "toJSON": function () {},
          "type": {},
          "validate": function () {},
          "x": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "y": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          }
        },
        "jpoint": function () {},
        "n": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "one": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "p": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "point": function () {},
        "pointFromJSON": function () {},
        "pointFromX": function () {},
        "red": {
          "_verify1": function () {},
          "_verify2": function () {},
          "add": function () {},
          "constructor": {
            "super_": function () {}
          },
          "convertFrom": function () {},
          "convertTo": function () {},
          "iadd": function () {},
          "imod": function () {},
          "imul": function () {},
          "invm": function () {},
          "isqr": function () {},
          "isub": function () {},
          "m": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "minv": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "mul": function () {},
          "neg": function () {},
          "pow": function () {},
          "prime": {},
          "r": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "r2": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "rinv": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "shift": {},
          "shl": function () {},
          "sqr": function () {},
          "sqrt": function () {},
          "sub": function () {}
        },
        "redN": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "threeA": {},
        "tinv": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "two": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "type": {},
        "validate": function () {},
        "zero": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "zeroA": {}
      },
      "g": {
        "_encode": function () {},
        "_getBeta": function () {},
        "_getDoubles": function () {},
        "_getNAFPoints": function () {},
        "_hasDoubles": function () {},
        "add": function () {},
        "curve": {
          "_endoSplit": function () {},
          "_endoWnafMulAdd": function () {},
          "_endoWnafT1": {},
          "_endoWnafT2": {},
          "_fixedNafMul": function () {},
          "_getEndoBasis": function () {},
          "_getEndoRoots": function () {},
          "_getEndomorphism": function () {},
          "_maxwellTrick": {},
          "_wnafMul": function () {},
          "_wnafMulAdd": function () {},
          "_wnafT1": {},
          "_wnafT2": {},
          "_wnafT3": {},
          "_wnafT4": {},
          "a": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "b": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "decodePoint": function () {},
          "endo": {},
          "g": {},
          "jpoint": function () {},
          "n": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "one": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "p": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          },
          "point": function () {},
          "pointFromJSON": function () {},
          "pointFromX": function () {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "redN": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "threeA": {},
          "tinv": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "two": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "type": {},
          "validate": function () {},
          "zero": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "constructor": {
                "super_": function () {}
              },
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "minv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {},
              "r": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "r2": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "rinv": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "shift": {},
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "zeroA": {}
        },
        "dbl": function () {},
        "dblp": function () {},
        "encode": function () {},
        "encodeCompressed": function () {},
        "eq": function () {},
        "getX": function () {},
        "getY": function () {},
        "inf": {},
        "inspect": function () {},
        "isInfinity": function () {},
        "jmulAdd": function () {},
        "mul": function () {},
        "mulAdd": function () {},
        "neg": function () {},
        "precompute": function () {},
        "precomputed": {},
        "toJ": function () {},
        "toJSON": function () {},
        "type": {},
        "validate": function () {},
        "x": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "y": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "constructor": {
              "super_": function () {}
            },
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "minv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {},
            "r": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "r2": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "rinv": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "shift": {},
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        }
      },
      "hash": {
        "blockSize": {},
        "hmacStrength": {},
        "outSize": {},
        "padLength": {},
        "super_": function () {}
      },
      "n": {
        "length": {},
        "negative": {},
        "red": {},
        "words": {}
      }
    },
    "secp256k1": {
      "curve": {
        "_endoSplit": function () {},
        "_endoWnafMulAdd": function () {},
        "_endoWnafT1": {},
        "_endoWnafT2": {},
        "_fixedNafMul": function () {},
        "_getEndoBasis": function () {},
        "_getEndoRoots": function () {},
        "_getEndomorphism": function () {},
        "_maxwellTrick": {},
        "_wnafMul": function () {},
        "_wnafMulAdd": function () {},
        "_wnafT1": {},
        "_wnafT2": {},
        "_wnafT3": {},
        "_wnafT4": {},
        "a": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {
              "_tmp": function () {},
              "constructor": {},
              "imulK": function () {},
              "ireduce": function () {},
              "k": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "n": {},
              "name": {},
              "p": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "split": function () {},
              "tmp": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              }
            },
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "b": {
          "length": {},
          "negative": {},
          "red": {
            "_verify1": function () {},
            "_verify2": function () {},
            "add": function () {},
            "convertFrom": function () {},
            "convertTo": function () {},
            "iadd": function () {},
            "imod": function () {},
            "imul": function () {},
            "invm": function () {},
            "isqr": function () {},
            "isub": function () {},
            "m": {
              "length": {},
              "negative": {},
              "red": {},
              "words": {}
            },
            "mul": function () {},
            "neg": function () {},
            "pow": function () {},
            "prime": {
              "_tmp": function () {},
              "constructor": {},
              "imulK": function () {},
              "ireduce": function () {},
              "k": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "n": {},
              "name": {},
              "p": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "split": function () {},
              "tmp": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              }
            },
            "shl": function () {},
            "sqr": function () {},
            "sqrt": function () {},
            "sub": function () {}
          },
          "words": {}
        },
        "decodePoint": function () {},
        "endo": {
          "basis": {},
          "beta": {
            "length": {},
            "negative": {},
            "red": {
              "_verify1": function () {},
              "_verify2": function () {},
              "add": function () {},
              "convertFrom": function () {},
              "convertTo": function () {},
              "iadd": function () {},
              "imod": function () {},
              "imul": function () {},
              "invm": function () {},
              "isqr": function () {},
              "isub": function () {},
              "m": {
                "length": {},
                "negative": {},
                "red": {},
                "words": {}
              },
              "mul": function () {},
              "neg": function () {},
              "pow": function () {},
              "prime": {
                "_tmp": function () {},
                "constructor": {},
                "imulK": function () {},
                "ireduce": function () {},
                "k": {
                  "length": {},
                  "negative": {},
                  "red": {},
                  "words": {}
                },
                "n": {},
                "name": {},
                "p": {
                  "length": {},
                  "negative": {},
                  "red": {},
                  "words": {}
                },
                "split": function () {},
                "tmp": {
                  "length": {},
                  "negative": {},
                  "red": {},
                  "words": {}
                }
              },
              "shl": function () {},
              "sqr": function () {},
              "sqrt": function () {},
              "sub": function () {}
            },
            "words": {}
          },
          "lambda": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          }
        },
        "g": {
          "_encode": function () {},
          "_getBeta": function () {},
          "_getDoubles": function () {},
          "_getNAFPoints": function () {},
          "_hasDoubles": function () {},
          "add": function () {},
          "curve": {},
          "dbl": function () {},
          "dblp": function () {},
          "encode": function () {},
          "encodeCompressed": function () {},
          "eq": function () {},
          "getX": function () {},
          "getY": function () {},
          "inf": {},
          "inspect": function () {},
          "isInfinity": function () {},
          "jmulAdd": function () {},
          "mul": function () {},
          "mulAdd": function () {},
          "neg": function () {},
          "precompute": function () {},
          "precomputed": {
            "beta": {},
            "doubles": {
              "points": {},
              "step": {}
            },
            "naf": {
              "points": {},
              "wnd": {}
            }
          },
          "toJ": function () {},
          "toJSON": function () {},
          "type": {},
          "validate": function () {},
          "x": {
            "length": {},
            "negative": {},
            "red": {
            },
            "words": {}
          },
          "y": {
            "length": {},
            "negative": {},
            "red": {},
            "words": {}
          }
        },
        "jpoint": function () {},
        "n": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "one": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "p": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "point": function () {},
        "pointFromJSON": function () {},
        "pointFromX": function () {},
        "red": {},
        "redN": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "threeA": {},
        "tinv": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "two": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "type": {},
        "validate": function () {},
        "zero": {
          "length": {},
          "negative": {},
          "red": {},
          "words": {}
        },
        "zeroA": {}
      },
      "g": {},
      "hash": {
        "blockSize": {},
        "hmacStrength": {},
        "outSize": {},
        "padLength": {},
        "super_": function () {}
      },
      "n": {
        "length": {},
        "negative": {},
        "red": {},
        "words": {}
      }
    }
  },
  "ec": function () {},
  "eddsa": function () {},
  "rand": {
    "Rand": function () {}
  },
  "utils": {
    "assert": {
      "equal": function () {}
    },
    "cachedProperty": function () {},
    "encode": function () {},
    "getJSF": function () {},
    "getNAF": function () {},
    "intFromLE": function () {},
    "parseBytes": function () {},
    "toArray": function () {},
    "toHex": function () {},
    "zero2": function () {}
  },
  "version": {}
};
elliptic.curve.base.prototype = {
  "_fixedNafMul": function () {},
  "_wnafMul": function () {},
  "_wnafMulAdd": function () {},
  "decodePoint": function () {},
  "point": function () {},
  "validate": function () {}
};
elliptic.curve.base.BasePoint.prototype = {
  "_encode": function () {},
  "_getBeta": function () {},
  "_getDoubles": function () {},
  "_getNAFPoints": function () {},
  "_hasDoubles": function () {},
  "dblp": function () {},
  "encode": function () {},
  "encodeCompressed": function () {},
  "eq": function () {},
  "precompute": function () {},
  "validate": function () {}
};
elliptic.curve.edwards.prototype = {
  "_fixedNafMul": function () {},
  "_mulA": function () {},
  "_mulC": function () {},
  "_wnafMul": function () {},
  "_wnafMulAdd": function () {},
  "decodePoint": function () {},
  "jpoint": function () {},
  "point": function () {},
  "pointFromJSON": function () {},
  "pointFromX": function () {},
  "pointFromY": function () {},
  "validate": function () {}
};
elliptic.curve.edwards.super_.prototype = {
  "_fixedNafMul": function () {},
  "_wnafMul": function () {},
  "_wnafMulAdd": function () {},
  "decodePoint": function () {},
  "point": function () {},
  "validate": function () {}
};
elliptic.curve.edwards.super_.BasePoint.prototype = {
  "_encode": function () {},
  "_getBeta": function () {},
  "_getDoubles": function () {},
  "_getNAFPoints": function () {},
  "_hasDoubles": function () {},
  "dblp": function () {},
  "encode": function () {},
  "encodeCompressed": function () {},
  "eq": function () {},
  "precompute": function () {},
  "validate": function () {}
};
elliptic.curve.mont.prototype = {
  "_fixedNafMul": function () {},
  "_wnafMul": function () {},
  "_wnafMulAdd": function () {},
  "decodePoint": function () {},
  "point": function () {},
  "pointFromJSON": function () {},
  "validate": function () {}
};
elliptic.curve.mont.super_.prototype = {
  "_fixedNafMul": function () {},
  "_wnafMul": function () {},
  "_wnafMulAdd": function () {},
  "decodePoint": function () {},
  "point": function () {},
  "validate": function () {}
};
elliptic.curve.mont.super_.BasePoint.prototype = {
  "_encode": function () {},
  "_getBeta": function () {},
  "_getDoubles": function () {},
  "_getNAFPoints": function () {},
  "_hasDoubles": function () {},
  "dblp": function () {},
  "encode": function () {},
  "encodeCompressed": function () {},
  "eq": function () {},
  "precompute": function () {},
  "validate": function () {}
};
elliptic.curve.short.prototype = {
  "_endoSplit": function () {},
  "_endoWnafMulAdd": function () {},
  "_fixedNafMul": function () {},
  "_getEndoBasis": function () {},
  "_getEndoRoots": function () {},
  "_getEndomorphism": function () {},
  "_wnafMul": function () {},
  "_wnafMulAdd": function () {},
  "decodePoint": function () {},
  "jpoint": function () {},
  "point": function () {},
  "pointFromJSON": function () {},
  "pointFromX": function () {},
  "validate": function () {}
};
elliptic.curve.short.super_.prototype = {
  "_fixedNafMul": function () {},
  "_wnafMul": function () {},
  "_wnafMulAdd": function () {},
  "decodePoint": function () {},
  "point": function () {},
  "validate": function () {}
};
elliptic.curve.short.super_.BasePoint.prototype = {
  "_encode": function () {},
  "_getBeta": function () {},
  "_getDoubles": function () {},
  "_getNAFPoints": function () {},
  "_hasDoubles": function () {},
  "dblp": function () {},
  "encode": function () {},
  "encodeCompressed": function () {},
  "eq": function () {},
  "precompute": function () {},
  "validate": function () {}
};
elliptic.curves.curve25519.curve.a.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.a.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.a24.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.a24.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.b.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.b.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.g.x.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.g.x.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.g.z.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.g.z.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.i4.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.i4.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.one.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.one.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.redN.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.redN.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.two.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.two.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.zero.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.curve.zero.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.a.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.a.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.a24.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.a24.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.b.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.b.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.i4.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.i4.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.one.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.one.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.redN.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.redN.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.two.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.two.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.zero.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.curve.zero.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.x.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.x.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.z.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.g.z.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.curve25519.hash.prototype = {
  "_digest": function () {},
  "_pad": function () {},
  "_update": function () {},
  "digest": function () {},
  "update": function () {}
};
elliptic.curves.curve25519.hash.super_.prototype = {
  "_pad": function () {},
  "digest": function () {},
  "update": function () {}
};
elliptic.curves.ed25519.curve.a.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.a.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.c.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.c.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.c2.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.c2.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.d.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.d.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.dd.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.dd.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.g.t.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.g.t.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.g.x.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.g.x.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.g.y.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.g.y.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.g.z.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.g.z.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.one.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.one.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.redN.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.redN.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.two.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.two.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.zero.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.curve.zero.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.a.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.a.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.c.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.c.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.c2.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.c2.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.d.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.d.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.dd.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.dd.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.one.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.one.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.redN.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.redN.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.two.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.two.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.zero.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.curve.zero.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.t.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.t.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.x.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.x.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.y.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.y.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.z.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.g.z.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.ed25519.hash.prototype = {
  "_digest": function () {},
  "_pad": function () {},
  "_update": function () {},
  "digest": function () {},
  "update": function () {}
};
elliptic.curves.ed25519.hash.super_.prototype = {
  "_pad": function () {},
  "digest": function () {},
  "update": function () {}
};
elliptic.curves.p192.curve.a.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.a.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.b.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.b.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.g.x.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.g.x.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.g.y.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.g.y.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.one.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.one.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.redN.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.redN.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.tinv.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.tinv.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.two.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.two.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.zero.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.curve.zero.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.curve.a.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.curve.a.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.curve.b.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.curve.b.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.curve.one.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.curve.one.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.curve.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.curve.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.curve.redN.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.curve.redN.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.curve.tinv.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.curve.tinv.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.curve.two.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.curve.two.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.curve.zero.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.curve.zero.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.x.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.x.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.y.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.g.y.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p192.hash.prototype = {
  "_digest": function () {},
  "_pad": function () {},
  "_update": function () {},
  "digest": function () {},
  "update": function () {}
};
elliptic.curves.p192.hash.super_.prototype = {
  "_pad": function () {},
  "digest": function () {},
  "update": function () {}
};
elliptic.curves.p224.curve.a.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.a.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.b.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.b.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.g.x.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.g.x.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.g.y.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.g.y.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.one.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.one.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.redN.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.redN.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.tinv.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.tinv.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.two.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.two.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.zero.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.curve.zero.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.curve.a.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.curve.a.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.curve.b.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.curve.b.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.curve.one.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.curve.one.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.curve.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.curve.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.curve.redN.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.curve.redN.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.curve.tinv.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.curve.tinv.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.curve.two.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.curve.two.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.curve.zero.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.curve.zero.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.x.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.x.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.y.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.g.y.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.p224.hash.prototype = {
  "_digest": function () {},
  "_pad": function () {},
  "_update": function () {},
  "digest": function () {},
  "update": function () {}
};
elliptic.curves.p224.hash.super_.prototype = {
  "_pad": function () {},
  "digest": function () {},
  "update": function () {}
};
elliptic.curves.p256.curve.a.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.a.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.b.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.b.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.g.x.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.g.x.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.g.y.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.g.y.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.one.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.one.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.redN.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.redN.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.tinv.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.tinv.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.two.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.two.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.zero.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.curve.zero.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.curve.a.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.curve.a.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.curve.b.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.curve.b.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.curve.one.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.curve.one.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.curve.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.curve.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.curve.redN.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.curve.redN.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.curve.tinv.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.curve.tinv.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.curve.two.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.curve.two.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.curve.zero.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.curve.zero.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.x.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.x.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.y.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.g.y.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p256.hash.prototype = {
  "_digest": function () {},
  "_pad": function () {},
  "_update": function () {},
  "digest": function () {},
  "update": function () {}
};
elliptic.curves.p256.hash.super_.prototype = {
  "_pad": function () {},
  "digest": function () {},
  "update": function () {}
};
elliptic.curves.p384.curve.a.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.a.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.b.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.b.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.g.x.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.g.x.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.g.y.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.g.y.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.one.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.one.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.redN.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.redN.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.tinv.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.tinv.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.two.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.two.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.zero.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.curve.zero.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.curve.a.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.curve.a.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.curve.b.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.curve.b.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.curve.one.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.curve.one.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.curve.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.curve.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.curve.redN.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.curve.redN.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.curve.tinv.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.curve.tinv.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.curve.two.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.curve.two.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.curve.zero.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.curve.zero.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.x.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.x.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.y.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.g.y.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p384.hash.prototype = {
  "_digest": function () {},
  "_pad": function () {},
  "_prepareBlock": function () {},
  "_update": function () {},
  "digest": function () {},
  "update": function () {}
};
elliptic.curves.p384.hash.super_.prototype = {
  "_digest": function () {},
  "_pad": function () {},
  "_prepareBlock": function () {},
  "_update": function () {},
  "digest": function () {},
  "update": function () {}
};
elliptic.curves.p384.hash.super_.super_.prototype = {
  "_pad": function () {},
  "digest": function () {},
  "update": function () {}
};
elliptic.curves.p521.curve.a.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.a.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.b.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.b.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.g.x.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.g.x.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.g.y.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.g.y.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.one.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.one.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.redN.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.redN.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.tinv.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.tinv.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.two.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.two.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.zero.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.curve.zero.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.curve.a.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.curve.a.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.curve.b.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.curve.b.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.curve.one.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.curve.one.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.curve.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.curve.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.curve.redN.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.curve.redN.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.curve.tinv.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.curve.tinv.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.curve.two.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.curve.two.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.curve.zero.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.curve.zero.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.x.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.x.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.y.red.constructor.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "constructor": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.g.y.red.constructor.super_.prototype = {
  "_verify1": function () {},
  "_verify2": function () {},
  "add": function () {},
  "convertFrom": function () {},
  "convertTo": function () {},
  "iadd": function () {},
  "imod": function () {},
  "imul": function () {},
  "invm": function () {},
  "isqr": function () {},
  "isub": function () {},
  "mul": function () {},
  "neg": function () {},
  "pow": function () {},
  "shl": function () {},
  "sqr": function () {},
  "sqrt": function () {},
  "sub": function () {}
};
elliptic.curves.p521.hash.prototype = {
  "_digest": function () {},
  "_pad": function () {},
  "_prepareBlock": function () {},
  "_update": function () {},
  "digest": function () {},
  "update": function () {}
};
elliptic.curves.p521.hash.super_.prototype = {
  "_pad": function () {},
  "digest": function () {},
  "update": function () {}
};
elliptic.curves.secp256k1.curve.a.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.a.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.b.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.b.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.endo.beta.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.endo.beta.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.g.x.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.g.x.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.g.y.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.g.y.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.one.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.one.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.redN.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.redN.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.tinv.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.tinv.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.two.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.two.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.zero.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.curve.zero.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.a.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.a.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.b.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.b.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.endo.beta.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.endo.beta.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.one.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.one.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.redN.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.redN.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.tinv.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.tinv.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.two.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.two.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.zero.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.curve.zero.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.x.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.x.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.y.red.prime.constructor.prototype = {
  "_tmp": function () {},
  "constructor": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.g.y.red.prime.constructor.super_.prototype = {
  "_tmp": function () {},
  "imulK": function () {},
  "ireduce": function () {},
  "split": function () {}
};
elliptic.curves.secp256k1.hash.prototype = {
  "_digest": function () {},
  "_pad": function () {},
  "_update": function () {},
  "digest": function () {},
  "update": function () {}
};
elliptic.curves.secp256k1.hash.super_.prototype = {
  "_pad": function () {},
  "digest": function () {},
  "update": function () {}
};
elliptic.ec.prototype = {
  "_truncateToN": function () {},
  "genKeyPair": function () {},
  "getKeyRecoveryParam": function () {},
  "keyFromPrivate": function () {},
  "keyFromPublic": function () {},
  "keyPair": function () {},
  "recoverPubKey": function () {},
  "sign": function () {},
  "verify": function () {}
};
elliptic.eddsa.prototype = {
  "decodeInt": function () {},
  "decodePoint": function () {},
  "encodeInt": function () {},
  "encodePoint": function () {},
  "hashInt": function () {},
  "isPoint": function () {},
  "keyFromPublic": function () {},
  "keyFromSecret": function () {},
  "makeSignature": function () {},
  "sign": function () {},
  "verify": function() {}
};
elliptic.rand.Rand.prototype = {
  "_rand": function() {},
  "generate": function() {}
};
/**********************************************************************
 * End Generated Extern for elliptic
/**********************************************************************/
