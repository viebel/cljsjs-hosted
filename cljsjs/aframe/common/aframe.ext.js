/**********************************************************************
 * Extern for AFRAME
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var AFRAME = {
  "AComponent": function () {},
  "AEntity": {
    "ATTRIBUTE_NODE": {},
    "CDATA_SECTION_NODE": {},
    "COMMENT_NODE": {},
    "DOCUMENT_FRAGMENT_NODE": {},
    "DOCUMENT_NODE": {},
    "DOCUMENT_POSITION_CONTAINED_BY": {},
    "DOCUMENT_POSITION_CONTAINS": {},
    "DOCUMENT_POSITION_DISCONNECTED": {},
    "DOCUMENT_POSITION_FOLLOWING": {},
    "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
    "DOCUMENT_POSITION_PRECEDING": {},
    "DOCUMENT_TYPE_NODE": {},
    "ELEMENT_NODE": {},
    "ENTITY_NODE": {},
    "ENTITY_REFERENCE_NODE": {},
    "NOTATION_NODE": {},
    "PROCESSING_INSTRUCTION_NODE": {},
    "TEXT_NODE": {}
  },
  "ANode": {
    "ATTRIBUTE_NODE": {},
    "CDATA_SECTION_NODE": {},
    "COMMENT_NODE": {},
    "DOCUMENT_FRAGMENT_NODE": {},
    "DOCUMENT_NODE": {},
    "DOCUMENT_POSITION_CONTAINED_BY": {},
    "DOCUMENT_POSITION_CONTAINS": {},
    "DOCUMENT_POSITION_DISCONNECTED": {},
    "DOCUMENT_POSITION_FOLLOWING": {},
    "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
    "DOCUMENT_POSITION_PRECEDING": {},
    "DOCUMENT_TYPE_NODE": {},
    "ELEMENT_NODE": {},
    "ENTITY_NODE": {},
    "ENTITY_REFERENCE_NODE": {},
    "NOTATION_NODE": {},
    "PROCESSING_INSTRUCTION_NODE": {},
    "TEXT_NODE": {}
  },
  "AScene": {
    "ATTRIBUTE_NODE": {},
    "CDATA_SECTION_NODE": {},
    "COMMENT_NODE": {},
    "DOCUMENT_FRAGMENT_NODE": {},
    "DOCUMENT_NODE": {},
    "DOCUMENT_POSITION_CONTAINED_BY": {},
    "DOCUMENT_POSITION_CONTAINS": {},
    "DOCUMENT_POSITION_DISCONNECTED": {},
    "DOCUMENT_POSITION_FOLLOWING": {},
    "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
    "DOCUMENT_POSITION_PRECEDING": {},
    "DOCUMENT_TYPE_NODE": {},
    "ELEMENT_NODE": {},
    "ENTITY_NODE": {},
    "ENTITY_REFERENCE_NODE": {},
    "NOTATION_NODE": {},
    "PROCESSING_INSTRUCTION_NODE": {},
    "TEXT_NODE": {}
  },
  "THREE": {
    "AddEquation": {},
    "AddOperation": {},
    "AdditiveBlending": {},
    "AlphaFormat": {},
    "AlwaysDepth": {},
    "AmbientLight": function () {},
    "AnimationClip": {
      "CreateClipsFromMorphTargetSequences": function () {},
      "CreateFromMorphTargetSequence": function () {},
      "findByName": function () {},
      "parse": function () {},
      "parseAnimation": function () {},
      "toJSON": function () {}
    },
    "AnimationMixer": function () {},
    "AnimationObjectGroup": function () {},
    "AnimationUtils": {
      "arraySlice": function () {},
      "convertArray": function () {},
      "flattenJSON": function () {},
      "getKeyframeOrder": function () {},
      "isTypedArray": function () {},
      "sortedArray": function () {}
    },
    "ArcCurve": function () {},
    "ArrayCamera": function () {},
    "ArrowHelper": function () {},
    "Audio": function () {},
    "AudioAnalyser": function () {},
    "AudioContext": {
      "getContext": function () {},
      "setContext": function () {}
    },
    "AudioListener": function () {},
    "AudioLoader": function () {},
    "AxesHelper": function () {},
    "AxisHelper": function () {},
    "BackSide": {},
    "BasicDepthPacking": {},
    "BasicShadowMap": {},
    "BinaryTextureLoader": function () {},
    "Bone": function () {},
    "BooleanKeyframeTrack": function () {},
    "BoundingBoxHelper": function () {},
    "Box2": function () {},
    "Box3": function () {},
    "Box3Helper": function () {},
    "BoxBufferGeometry": function () {},
    "BoxGeometry": function () {},
    "BoxHelper": function () {},
    "BufferAttribute": function () {},
    "BufferGeometry": function () {},
    "BufferGeometryLoader": function () {},
    "ByteType": {},
    "Cache": {
      "add": function () {},
      "clear": function () {},
      "enabled": {},
      "files": {},
      "get": function () {},
      "remove": function () {}
    },
    "Camera": function () {},
    "CameraHelper": function () {},
    "CanvasRenderer": function () {},
    "CanvasTexture": function () {},
    "CatmullRomCurve3": function () {},
    "CineonToneMapping": {},
    "CircleBufferGeometry": function () {},
    "CircleGeometry": function () {},
    "ClampToEdgeWrapping": {},
    "Clock": function () {},
    "ClosedSplineCurve3": function () {},
    "ColladaLoader": function () {},
    "Color": function () {},
    "ColorKeyframeTrack": function () {},
    "CompressedTexture": function () {},
    "CompressedTextureLoader": function () {},
    "ConeBufferGeometry": function () {},
    "ConeGeometry": function () {},
    "CubeCamera": function () {},
    "CubeGeometry": function () {},
    "CubeReflectionMapping": {},
    "CubeRefractionMapping": {},
    "CubeTexture": function () {},
    "CubeTextureLoader": function () {},
    "CubeUVReflectionMapping": {},
    "CubeUVRefractionMapping": {},
    "CubicBezierCurve": function () {},
    "CubicBezierCurve3": function () {},
    "CubicInterpolant": function () {},
    "CullFaceBack": {},
    "CullFaceFront": {},
    "CullFaceFrontBack": {},
    "CullFaceNone": {},
    "Curve": {
      "create": function () {}
    },
    "CurvePath": function () {},
    "CustomBlending": {},
    "CylinderBufferGeometry": function () {},
    "CylinderGeometry": function () {},
    "Cylindrical": function () {},
    "DataTexture": function () {},
    "DataTextureLoader": function () {},
    "DefaultLoadingManager": {
      "itemEnd": function () {},
      "itemError": function () {},
      "itemStart": function () {},
      "onError": {},
      "onLoad": {},
      "onProgress": {},
      "onStart": {},
      "resolveURL": function () {},
      "setURLModifier": function () {}
    },
    "DepthFormat": {},
    "DepthStencilFormat": {},
    "DepthTexture": function () {},
    "DirectionalLight": function () {},
    "DirectionalLightHelper": function () {},
    "DirectionalLightShadow": function () {},
    "DiscreteInterpolant": function () {},
    "DodecahedronBufferGeometry": function () {},
    "DodecahedronGeometry": function () {},
    "DoubleSide": {},
    "DstAlphaFactor": {},
    "DstColorFactor": {},
    "DynamicBufferAttribute": function () {},
    "EdgesGeometry": function () {},
    "EdgesHelper": function () {},
    "EllipseCurve": function () {},
    "EqualDepth": {},
    "EquirectangularReflectionMapping": {},
    "EquirectangularRefractionMapping": {},
    "Euler": {
      "DefaultOrder": {},
      "RotationOrders": {}
    },
    "EventDispatcher": function () {},
    "ExtrudeBufferGeometry": function () {},
    "ExtrudeGeometry": {
      "WorldUVGenerator": {
        "generateSideWallUV": function () {},
        "generateTopUV": function () {}
      }
    },
    "Face3": function () {},
    "Face4": function () {},
    "FaceColors": {},
    "FaceNormalsHelper": function () {},
    "FileLoader": function () {},
    "FlatShading": {},
    "Float32Attribute": function () {},
    "Float32BufferAttribute": function () {},
    "Float64Attribute": function () {},
    "Float64BufferAttribute": function () {},
    "FloatType": {},
    "Fog": function () {},
    "FogExp2": function () {},
    "Font": function () {},
    "FontLoader": function () {},
    "FrontFaceDirectionCCW": {},
    "FrontFaceDirectionCW": {},
    "FrontSide": {},
    "Frustum": function () {},
    "GLTFLoader": function () {},
    "GammaEncoding": {},
    "Geometry": function () {},
    "GeometryUtils": {
      "center": function () {},
      "merge": function () {}
    },
    "GreaterDepth": {},
    "GreaterEqualDepth": {},
    "GridHelper": function () {},
    "Group": function () {},
    "HalfFloatType": {},
    "HemisphereLight": function () {},
    "HemisphereLightHelper": function () {},
    "IcosahedronBufferGeometry": function () {},
    "IcosahedronGeometry": function () {},
    "ImageBitmapLoader": function () {},
    "ImageLoader": function () {},
    "ImageUtils": {
      "crossOrigin": {},
      "loadCompressedTexture": function () {},
      "loadCompressedTextureCube": function () {},
      "loadTexture": function () {},
      "loadTextureCube": function () {}
    },
    "ImmediateRenderObject": function () {},
    "InstancedBufferAttribute": function () {},
    "InstancedBufferGeometry": function () {},
    "InstancedInterleavedBuffer": function () {},
    "Int16Attribute": function () {},
    "Int16BufferAttribute": function () {},
    "Int32Attribute": function () {},
    "Int32BufferAttribute": function () {},
    "Int8Attribute": function () {},
    "Int8BufferAttribute": function () {},
    "IntType": {},
    "InterleavedBuffer": function () {},
    "InterleavedBufferAttribute": function () {},
    "Interpolant": function () {},
    "InterpolateDiscrete": {},
    "InterpolateLinear": {},
    "InterpolateSmooth": {},
    "JSONLoader": function () {},
    "KeyframeTrack": {
      "_getTrackTypeForValueTypeName": function () {},
      "parse": function () {},
      "toJSON": function () {}
    },
    "LOD": function () {},
    "LatheBufferGeometry": function () {},
    "LatheGeometry": function () {},
    "Layers": function () {},
    "LensFlare": function () {},
    "LessDepth": {},
    "LessEqualDepth": {},
    "Light": function () {},
    "LightShadow": function () {},
    "Line": function () {},
    "Line3": function () {},
    "LineBasicMaterial": function () {},
    "LineCurve": function () {},
    "LineCurve3": function () {},
    "LineDashedMaterial": function () {},
    "LineLoop": function () {},
    "LinePieces": {},
    "LineSegments": function () {},
    "LineStrip": {},
    "LinearEncoding": {},
    "LinearFilter": {},
    "LinearInterpolant": function () {},
    "LinearMipMapLinearFilter": {},
    "LinearMipMapNearestFilter": {},
    "LinearToneMapping": {},
    "Loader": {
      "Handlers": {
        "add": function () {},
        "get": function () {},
        "handlers": {}
      }
    },
    "LoaderUtils": {
      "decodeText": function () {},
      "extractUrlBase": function () {}
    },
    "LoadingManager": function () {},
    "LogLuvEncoding": {},
    "LoopOnce": {},
    "LoopPingPong": {},
    "LoopRepeat": {},
    "LuminanceAlphaFormat": {},
    "LuminanceFormat": {},
    "MOUSE": {
      "LEFT": {},
      "MIDDLE": {},
      "RIGHT": {}
    },
    "MTLLoader": {
      "MaterialCreator": function () {}
    },
    "Material": function () {},
    "MaterialLoader": function () {},
    "Math": {
      "DEG2RAD": {},
      "RAD2DEG": {},
      "ceilPowerOfTwo": function () {},
      "clamp": function () {},
      "degToRad": function () {},
      "euclideanModulo": function () {},
      "floorPowerOfTwo": function () {},
      "generateUUID": function () {},
      "isPowerOfTwo": function () {},
      "lerp": function () {},
      "mapLinear": function () {},
      "nearestPowerOfTwo": function () {},
      "nextPowerOfTwo": function () {},
      "radToDeg": function () {},
      "randFloat": function () {},
      "randFloatSpread": function () {},
      "randInt": function () {},
      "random16": function () {},
      "smootherstep": function () {},
      "smoothstep": function () {}
    },
    "Matrix3": function () {},
    "Matrix4": function () {},
    "MaxEquation": {},
    "Mesh": function () {},
    "MeshBasicMaterial": function () {},
    "MeshDepthMaterial": function () {},
    "MeshDistanceMaterial": function () {},
    "MeshFaceMaterial": function () {},
    "MeshLambertMaterial": function () {},
    "MeshNormalMaterial": function () {},
    "MeshPhongMaterial": function () {},
    "MeshPhysicalMaterial": function () {},
    "MeshStandardMaterial": function () {},
    "MeshToonMaterial": function () {},
    "MinEquation": {},
    "MirroredRepeatWrapping": {},
    "MixOperation": {},
    "MultiMaterial": function () {},
    "MultiplyBlending": {},
    "MultiplyOperation": {},
    "NearestFilter": {},
    "NearestMipMapLinearFilter": {},
    "NearestMipMapNearestFilter": {},
    "NeverDepth": {},
    "NoBlending": {},
    "NoColors": {},
    "NoToneMapping": {},
    "NormalBlending": {},
    "NotEqualDepth": {},
    "NumberKeyframeTrack": function () {},
    "OBJLoader": function () {},
    "Object3D": {
      "DefaultMatrixAutoUpdate": {},
      "DefaultUp": {
        "add": function () {},
        "addScalar": function () {},
        "addScaledVector": function () {},
        "addVectors": function () {},
        "angleTo": function () {},
        "applyAxisAngle": function () {},
        "applyEuler": function () {},
        "applyMatrix3": function () {},
        "applyMatrix4": function () {},
        "applyProjection": function () {},
        "applyQuaternion": function () {},
        "ceil": function () {},
        "clamp": function () {},
        "clampLength": function () {},
        "clampScalar": function () {},
        "clone": function () {},
        "copy": function () {},
        "cross": function () {},
        "crossVectors": function () {},
        "distanceTo": function () {},
        "distanceToManhattan": function () {},
        "distanceToSquared": function () {},
        "divide": function () {},
        "divideScalar": function () {},
        "dot": function () {},
        "equals": function () {},
        "floor": function () {},
        "fromArray": function () {},
        "fromAttribute": function () {},
        "fromBufferAttribute": function () {},
        "getColumnFromMatrix": function () {},
        "getComponent": function () {},
        "getPositionFromMatrix": function () {},
        "getScaleFromMatrix": function () {},
        "isVector3": {},
        "length": function () {},
        "lengthManhattan": function () {},
        "lengthSq": function () {},
        "lerp": function () {},
        "lerpVectors": function () {},
        "manhattanDistanceTo": function () {},
        "manhattanLength": function () {},
        "max": function () {},
        "min": function () {},
        "multiply": function () {},
        "multiplyScalar": function () {},
        "multiplyVectors": function () {},
        "negate": function () {},
        "normalize": function () {},
        "project": function () {},
        "projectOnPlane": function () {},
        "projectOnVector": function () {},
        "reflect": function () {},
        "round": function () {},
        "roundToZero": function () {},
        "set": function () {},
        "setComponent": function () {},
        "setEulerFromQuaternion": function () {},
        "setEulerFromRotationMatrix": function () {},
        "setFromCylindrical": function () {},
        "setFromMatrixColumn": function () {},
        "setFromMatrixPosition": function () {},
        "setFromMatrixScale": function () {},
        "setFromSpherical": function () {},
        "setLength": function () {},
        "setScalar": function () {},
        "setX": function () {},
        "setY": function () {},
        "setZ": function () {},
        "sub": function () {},
        "subScalar": function () {},
        "subVectors": function () {},
        "toArray": function () {},
        "transformDirection": function () {},
        "unproject": function () {},
        "x": {},
        "y": {},
        "z": {}
      }
    },
    "ObjectLoader": function () {},
    "OctahedronBufferGeometry": function () {},
    "OctahedronGeometry": function () {},
    "OneFactor": {},
    "OneMinusDstAlphaFactor": {},
    "OneMinusDstColorFactor": {},
    "OneMinusSrcAlphaFactor": {},
    "OneMinusSrcColorFactor": {},
    "OrthographicCamera": function () {},
    "PCFShadowMap": {},
    "PCFSoftShadowMap": {},
    "ParametricBufferGeometry": function () {},
    "ParametricGeometry": function () {},
    "Particle": function () {},
    "ParticleBasicMaterial": function () {},
    "ParticleSystem": function () {},
    "ParticleSystemMaterial": function () {},
    "Path": function () {},
    "PerspectiveCamera": function () {},
    "Plane": function () {},
    "PlaneBufferGeometry": function () {},
    "PlaneGeometry": function () {},
    "PlaneHelper": function () {},
    "PointCloud": function () {},
    "PointCloudMaterial": function () {},
    "PointLight": function () {},
    "PointLightHelper": function () {},
    "Points": function () {},
    "PointsMaterial": function () {},
    "PolarGridHelper": function () {},
    "PolyhedronBufferGeometry": function () {},
    "PolyhedronGeometry": function () {},
    "PositionalAudio": function () {},
    "Projector": function () {},
    "PropertyBinding": {
      "Composite": function () {},
      "create": function () {},
      "findNode": function () {},
      "parseTrackName": function () {},
      "sanitizeNodeName": function () {}
    },
    "PropertyMixer": function () {},
    "QuadraticBezierCurve": function () {},
    "QuadraticBezierCurve3": function () {},
    "Quaternion": {
      "slerp": function () {},
      "slerpFlat": function () {}
    },
    "QuaternionKeyframeTrack": function () {},
    "QuaternionLinearInterpolant": function () {},
    "REVISION": {},
    "RGBADepthPacking": {},
    "RGBAFormat": {},
    "RGBA_ASTC_10x10_Format": {},
    "RGBA_ASTC_10x5_Format": {},
    "RGBA_ASTC_10x6_Format": {},
    "RGBA_ASTC_10x8_Format": {},
    "RGBA_ASTC_12x10_Format": {},
    "RGBA_ASTC_12x12_Format": {},
    "RGBA_ASTC_4x4_Format": {},
    "RGBA_ASTC_5x4_Format": {},
    "RGBA_ASTC_5x5_Format": {},
    "RGBA_ASTC_6x5_Format": {},
    "RGBA_ASTC_6x6_Format": {},
    "RGBA_ASTC_8x5_Format": {},
    "RGBA_ASTC_8x6_Format": {},
    "RGBA_ASTC_8x8_Format": {},
    "RGBA_PVRTC_2BPPV1_Format": {},
    "RGBA_PVRTC_4BPPV1_Format": {},
    "RGBA_S3TC_DXT1_Format": {},
    "RGBA_S3TC_DXT3_Format": {},
    "RGBA_S3TC_DXT5_Format": {},
    "RGBDEncoding": {},
    "RGBEEncoding": {},
    "RGBEFormat": {},
    "RGBFormat": {},
    "RGBM16Encoding": {},
    "RGBM7Encoding": {},
    "RGB_ETC1_Format": {},
    "RGB_PVRTC_2BPPV1_Format": {},
    "RGB_PVRTC_4BPPV1_Format": {},
    "RGB_S3TC_DXT1_Format": {},
    "RawShaderMaterial": function () {},
    "Ray": function () {},
    "Raycaster": function () {},
    "RectAreaLight": function () {},
    "RectAreaLightHelper": function () {},
    "ReinhardToneMapping": {},
    "RepeatWrapping": {},
    "ReverseSubtractEquation": {},
    "RingBufferGeometry": function () {},
    "RingGeometry": function () {},
    "Scene": function () {},
    "SceneUtils": {
      "attach": function () {},
      "createMultiMaterialObject": function () {},
      "detach": function () {}
    },
    "ShaderChunk": {
      "alphamap_fragment": {},
      "alphamap_pars_fragment": {},
      "alphatest_fragment": {},
      "aomap_fragment": {},
      "aomap_pars_fragment": {},
      "begin_vertex": {},
      "beginnormal_vertex": {},
      "bsdfs": {},
      "bumpmap_pars_fragment": {},
      "clipping_planes_fragment": {},
      "clipping_planes_pars_fragment": {},
      "clipping_planes_pars_vertex": {},
      "clipping_planes_vertex": {},
      "color_fragment": {},
      "color_pars_fragment": {},
      "color_pars_vertex": {},
      "color_vertex": {},
      "common": {},
      "cube_frag": {},
      "cube_uv_reflection_fragment": {},
      "cube_vert": {},
      "defaultnormal_vertex": {},
      "depth_frag": {},
      "depth_vert": {},
      "displacementmap_pars_vertex": {},
      "displacementmap_vertex": {},
      "distanceRGBA_frag": {},
      "distanceRGBA_vert": {},
      "dithering_fragment": {},
      "dithering_pars_fragment": {},
      "emissivemap_fragment": {},
      "emissivemap_pars_fragment": {},
      "encodings_fragment": {},
      "encodings_pars_fragment": {},
      "envmap_fragment": {},
      "envmap_pars_fragment": {},
      "envmap_pars_vertex": {},
      "envmap_vertex": {},
      "equirect_frag": {},
      "equirect_vert": {},
      "fog_fragment": {},
      "fog_pars_fragment": {},
      "fog_pars_vertex": {},
      "fog_vertex": {},
      "gradientmap_pars_fragment": {},
      "lightmap_fragment": {},
      "lightmap_pars_fragment": {},
      "lights_lambert_vertex": {},
      "lights_pars": {},
      "lights_phong_fragment": {},
      "lights_phong_pars_fragment": {},
      "lights_physical_fragment": {},
      "lights_physical_pars_fragment": {},
      "lights_template": {},
      "linedashed_frag": {},
      "linedashed_vert": {},
      "logdepthbuf_fragment": {},
      "logdepthbuf_pars_fragment": {},
      "logdepthbuf_pars_vertex": {},
      "logdepthbuf_vertex": {},
      "map_fragment": {},
      "map_pars_fragment": {},
      "map_particle_fragment": {},
      "map_particle_pars_fragment": {},
      "meshbasic_frag": {},
      "meshbasic_vert": {},
      "meshlambert_frag": {},
      "meshlambert_vert": {},
      "meshphong_frag": {},
      "meshphong_vert": {},
      "meshphysical_frag": {},
      "meshphysical_vert": {},
      "metalnessmap_fragment": {},
      "metalnessmap_pars_fragment": {},
      "morphnormal_vertex": {},
      "morphtarget_pars_vertex": {},
      "morphtarget_vertex": {},
      "normal_frag": {},
      "normal_fragment": {},
      "normal_vert": {},
      "normalmap_pars_fragment": {},
      "packing": {},
      "points_frag": {},
      "points_vert": {},
      "premultiplied_alpha_fragment": {},
      "project_vertex": {},
      "roughnessmap_fragment": {},
      "roughnessmap_pars_fragment": {},
      "shadow_frag": {},
      "shadow_vert": {},
      "shadowmap_pars_fragment": {},
      "shadowmap_pars_vertex": {},
      "shadowmap_vertex": {},
      "shadowmask_pars_fragment": {},
      "skinbase_vertex": {},
      "skinning_pars_vertex": {},
      "skinning_vertex": {},
      "skinnormal_vertex": {},
      "specularmap_fragment": {},
      "specularmap_pars_fragment": {},
      "tonemapping_fragment": {},
      "tonemapping_pars_fragment": {},
      "uv2_pars_fragment": {},
      "uv2_pars_vertex": {},
      "uv2_vertex": {},
      "uv_pars_fragment": {},
      "uv_pars_vertex": {},
      "uv_vertex": {},
      "worldpos_vertex": {}
    },
    "ShaderLib": {
      "basic": {
        "fragmentShader": {},
        "uniforms": {
          "alphaMap": {
            "value": {}
          },
          "aoMap": {
            "value": {}
          },
          "aoMapIntensity": {
            "value": {}
          },
          "diffuse": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "envMap": {
            "value": {}
          },
          "flipEnvMap": {
            "value": {}
          },
          "fogColor": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "fogDensity": {
            "value": {}
          },
          "fogFar": {
            "value": {}
          },
          "fogNear": {
            "value": {}
          },
          "lightMap": {
            "value": {}
          },
          "lightMapIntensity": {
            "value": {}
          },
          "map": {
            "value": {}
          },
          "opacity": {
            "value": {}
          },
          "reflectivity": {
            "value": {}
          },
          "refractionRatio": {
            "value": {}
          },
          "specularMap": {
            "value": {}
          },
          "uvTransform": {
            "value": {
              "applyToBuffer": function () {},
              "applyToBufferAttribute": function () {},
              "applyToVector3Array": function () {},
              "clone": function () {},
              "copy": function () {},
              "determinant": function () {},
              "elements": {},
              "equals": function () {},
              "flattenToArrayOffset": function () {},
              "fromArray": function () {},
              "getInverse": function () {},
              "getNormalMatrix": function () {},
              "identity": function () {},
              "isMatrix3": {},
              "multiply": function () {},
              "multiplyMatrices": function () {},
              "multiplyScalar": function () {},
              "multiplyVector3": function () {},
              "multiplyVector3Array": function () {},
              "premultiply": function () {},
              "rotate": function () {},
              "scale": function () {},
              "set": function () {},
              "setFromMatrix4": function () {},
              "setUvTransform": function () {},
              "toArray": function () {},
              "translate": function () {},
              "transpose": function () {},
              "transposeIntoArray": function () {}
            }
          }
        },
        "vertexShader": {}
      },
      "cube": {
        "fragmentShader": {},
        "uniforms": {
          "opacity": {
            "value": {}
          },
          "tCube": {
            "value": {}
          },
          "tFlip": {
            "value": {}
          }
        },
        "vertexShader": {}
      },
      "dashed": {
        "fragmentShader": {},
        "uniforms": {
          "alphaMap": {
            "value": {}
          },
          "dashSize": {
            "value": {}
          },
          "diffuse": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "fogColor": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "fogDensity": {
            "value": {}
          },
          "fogFar": {
            "value": {}
          },
          "fogNear": {
            "value": {}
          },
          "map": {
            "value": {}
          },
          "opacity": {
            "value": {}
          },
          "scale": {
            "value": {}
          },
          "totalSize": {
            "value": {}
          },
          "uvTransform": {
            "value": {
              "applyToBuffer": function () {},
              "applyToBufferAttribute": function () {},
              "applyToVector3Array": function () {},
              "clone": function () {},
              "copy": function () {},
              "determinant": function () {},
              "elements": {},
              "equals": function () {},
              "flattenToArrayOffset": function () {},
              "fromArray": function () {},
              "getInverse": function () {},
              "getNormalMatrix": function () {},
              "identity": function () {},
              "isMatrix3": {},
              "multiply": function () {},
              "multiplyMatrices": function () {},
              "multiplyScalar": function () {},
              "multiplyVector3": function () {},
              "multiplyVector3Array": function () {},
              "premultiply": function () {},
              "rotate": function () {},
              "scale": function () {},
              "set": function () {},
              "setFromMatrix4": function () {},
              "setUvTransform": function () {},
              "toArray": function () {},
              "translate": function () {},
              "transpose": function () {},
              "transposeIntoArray": function () {}
            }
          }
        },
        "vertexShader": {}
      },
      "depth": {
        "fragmentShader": {},
        "uniforms": {
          "alphaMap": {
            "value": {}
          },
          "diffuse": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "displacementBias": {
            "value": {}
          },
          "displacementMap": {
            "value": {}
          },
          "displacementScale": {
            "value": {}
          },
          "map": {
            "value": {}
          },
          "opacity": {
            "value": {}
          },
          "uvTransform": {
            "value": {
              "applyToBuffer": function () {},
              "applyToBufferAttribute": function () {},
              "applyToVector3Array": function () {},
              "clone": function () {},
              "copy": function () {},
              "determinant": function () {},
              "elements": {},
              "equals": function () {},
              "flattenToArrayOffset": function () {},
              "fromArray": function () {},
              "getInverse": function () {},
              "getNormalMatrix": function () {},
              "identity": function () {},
              "isMatrix3": {},
              "multiply": function () {},
              "multiplyMatrices": function () {},
              "multiplyScalar": function () {},
              "multiplyVector3": function () {},
              "multiplyVector3Array": function () {},
              "premultiply": function () {},
              "rotate": function () {},
              "scale": function () {},
              "set": function () {},
              "setFromMatrix4": function () {},
              "setUvTransform": function () {},
              "toArray": function () {},
              "translate": function () {},
              "transpose": function () {},
              "transposeIntoArray": function () {}
            }
          }
        },
        "vertexShader": {}
      },
      "distanceRGBA": {
        "fragmentShader": {},
        "uniforms": {
          "alphaMap": {
            "value": {}
          },
          "diffuse": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "displacementBias": {
            "value": {}
          },
          "displacementMap": {
            "value": {}
          },
          "displacementScale": {
            "value": {}
          },
          "farDistance": {
            "value": {}
          },
          "map": {
            "value": {}
          },
          "nearDistance": {
            "value": {}
          },
          "opacity": {
            "value": {}
          },
          "referencePosition": {
            "value": {
              "add": function () {},
              "addScalar": function () {},
              "addScaledVector": function () {},
              "addVectors": function () {},
              "angleTo": function () {},
              "applyAxisAngle": function () {},
              "applyEuler": function () {},
              "applyMatrix3": function () {},
              "applyMatrix4": function () {},
              "applyProjection": function () {},
              "applyQuaternion": function () {},
              "ceil": function () {},
              "clamp": function () {},
              "clampLength": function () {},
              "clampScalar": function () {},
              "clone": function () {},
              "copy": function () {},
              "cross": function () {},
              "crossVectors": function () {},
              "distanceTo": function () {},
              "distanceToManhattan": function () {},
              "distanceToSquared": function () {},
              "divide": function () {},
              "divideScalar": function () {},
              "dot": function () {},
              "equals": function () {},
              "floor": function () {},
              "fromArray": function () {},
              "fromAttribute": function () {},
              "fromBufferAttribute": function () {},
              "getColumnFromMatrix": function () {},
              "getComponent": function () {},
              "getPositionFromMatrix": function () {},
              "getScaleFromMatrix": function () {},
              "isVector3": {},
              "length": function () {},
              "lengthManhattan": function () {},
              "lengthSq": function () {},
              "lerp": function () {},
              "lerpVectors": function () {},
              "manhattanDistanceTo": function () {},
              "manhattanLength": function () {},
              "max": function () {},
              "min": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "multiplyVectors": function () {},
              "negate": function () {},
              "normalize": function () {},
              "project": function () {},
              "projectOnPlane": function () {},
              "projectOnVector": function () {},
              "reflect": function () {},
              "round": function () {},
              "roundToZero": function () {},
              "set": function () {},
              "setComponent": function () {},
              "setEulerFromQuaternion": function () {},
              "setEulerFromRotationMatrix": function () {},
              "setFromCylindrical": function () {},
              "setFromMatrixColumn": function () {},
              "setFromMatrixPosition": function () {},
              "setFromMatrixScale": function () {},
              "setFromSpherical": function () {},
              "setLength": function () {},
              "setScalar": function () {},
              "setX": function () {},
              "setY": function () {},
              "setZ": function () {},
              "sub": function () {},
              "subScalar": function () {},
              "subVectors": function () {},
              "toArray": function () {},
              "transformDirection": function () {},
              "unproject": function () {},
              "x": {},
              "y": {},
              "z": {}
            }
          },
          "uvTransform": {
            "value": {
              "applyToBuffer": function () {},
              "applyToBufferAttribute": function () {},
              "applyToVector3Array": function () {},
              "clone": function () {},
              "copy": function () {},
              "determinant": function () {},
              "elements": {},
              "equals": function () {},
              "flattenToArrayOffset": function () {},
              "fromArray": function () {},
              "getInverse": function () {},
              "getNormalMatrix": function () {},
              "identity": function () {},
              "isMatrix3": {},
              "multiply": function () {},
              "multiplyMatrices": function () {},
              "multiplyScalar": function () {},
              "multiplyVector3": function () {},
              "multiplyVector3Array": function () {},
              "premultiply": function () {},
              "rotate": function () {},
              "scale": function () {},
              "set": function () {},
              "setFromMatrix4": function () {},
              "setUvTransform": function () {},
              "toArray": function () {},
              "translate": function () {},
              "transpose": function () {},
              "transposeIntoArray": function () {}
            }
          }
        },
        "vertexShader": {}
      },
      "equirect": {
        "fragmentShader": {},
        "uniforms": {
          "tEquirect": {
            "value": {}
          }
        },
        "vertexShader": {}
      },
      "lambert": {
        "fragmentShader": {},
        "uniforms": {
          "alphaMap": {
            "value": {}
          },
          "ambientLightColor": {
            "value": {}
          },
          "aoMap": {
            "value": {}
          },
          "aoMapIntensity": {
            "value": {}
          },
          "diffuse": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "directionalLights": {
            "properties": {
              "color": {},
              "direction": {},
              "shadow": {},
              "shadowBias": {},
              "shadowMapSize": {},
              "shadowRadius": {}
            },
            "value": {}
          },
          "directionalShadowMap": {
            "value": {}
          },
          "directionalShadowMatrix": {
            "value": {}
          },
          "emissive": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "emissiveMap": {
            "value": {}
          },
          "envMap": {
            "value": {}
          },
          "flipEnvMap": {
            "value": {}
          },
          "fogColor": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "fogDensity": {
            "value": {}
          },
          "fogFar": {
            "value": {}
          },
          "fogNear": {
            "value": {}
          },
          "hemisphereLights": {
            "properties": {
              "direction": {},
              "groundColor": {},
              "skyColor": {}
            },
            "value": {}
          },
          "lightMap": {
            "value": {}
          },
          "lightMapIntensity": {
            "value": {}
          },
          "map": {
            "value": {}
          },
          "opacity": {
            "value": {}
          },
          "pointLights": {
            "properties": {
              "color": {},
              "decay": {},
              "distance": {},
              "position": {},
              "shadow": {},
              "shadowBias": {},
              "shadowCameraFar": {},
              "shadowCameraNear": {},
              "shadowMapSize": {},
              "shadowRadius": {}
            },
            "value": {}
          },
          "pointShadowMap": {
            "value": {}
          },
          "pointShadowMatrix": {
            "value": {}
          },
          "rectAreaLights": {
            "properties": {
              "color": {},
              "height": {},
              "position": {},
              "width": {}
            },
            "value": {}
          },
          "reflectivity": {
            "value": {}
          },
          "refractionRatio": {
            "value": {}
          },
          "specularMap": {
            "value": {}
          },
          "spotLights": {
            "properties": {
              "color": {},
              "coneCos": {},
              "decay": {},
              "direction": {},
              "distance": {},
              "penumbraCos": {},
              "position": {},
              "shadow": {},
              "shadowBias": {},
              "shadowMapSize": {},
              "shadowRadius": {}
            },
            "value": {}
          },
          "spotShadowMap": {
            "value": {}
          },
          "spotShadowMatrix": {
            "value": {}
          },
          "uvTransform": {
            "value": {
              "applyToBuffer": function () {},
              "applyToBufferAttribute": function () {},
              "applyToVector3Array": function () {},
              "clone": function () {},
              "copy": function () {},
              "determinant": function () {},
              "elements": {},
              "equals": function () {},
              "flattenToArrayOffset": function () {},
              "fromArray": function () {},
              "getInverse": function () {},
              "getNormalMatrix": function () {},
              "identity": function () {},
              "isMatrix3": {},
              "multiply": function () {},
              "multiplyMatrices": function () {},
              "multiplyScalar": function () {},
              "multiplyVector3": function () {},
              "multiplyVector3Array": function () {},
              "premultiply": function () {},
              "rotate": function () {},
              "scale": function () {},
              "set": function () {},
              "setFromMatrix4": function () {},
              "setUvTransform": function () {},
              "toArray": function () {},
              "translate": function () {},
              "transpose": function () {},
              "transposeIntoArray": function () {}
            }
          }
        },
        "vertexShader": {}
      },
      "normal": {
        "fragmentShader": {},
        "uniforms": {
          "alphaMap": {
            "value": {}
          },
          "bumpMap": {
            "value": {}
          },
          "bumpScale": {
            "value": {}
          },
          "diffuse": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "displacementBias": {
            "value": {}
          },
          "displacementMap": {
            "value": {}
          },
          "displacementScale": {
            "value": {}
          },
          "map": {
            "value": {}
          },
          "normalMap": {
            "value": {}
          },
          "normalScale": {
            "value": {
              "add": function () {},
              "addScalar": function () {},
              "addScaledVector": function () {},
              "addVectors": function () {},
              "angle": function () {},
              "applyMatrix3": function () {},
              "ceil": function () {},
              "clamp": function () {},
              "clampLength": function () {},
              "clampScalar": function () {},
              "clone": function () {},
              "copy": function () {},
              "distanceTo": function () {},
              "distanceToManhattan": function () {},
              "distanceToSquared": function () {},
              "divide": function () {},
              "divideScalar": function () {},
              "dot": function () {},
              "equals": function () {},
              "floor": function () {},
              "fromArray": function () {},
              "fromAttribute": function () {},
              "fromBufferAttribute": function () {},
              "getComponent": function () {},
              "isVector2": {},
              "length": function () {},
              "lengthManhattan": function () {},
              "lengthSq": function () {},
              "lerp": function () {},
              "lerpVectors": function () {},
              "manhattanDistanceTo": function () {},
              "manhattanLength": function () {},
              "max": function () {},
              "min": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "negate": function () {},
              "normalize": function () {},
              "rotateAround": function () {},
              "round": function () {},
              "roundToZero": function () {},
              "set": function () {},
              "setComponent": function () {},
              "setLength": function () {},
              "setScalar": function () {},
              "setX": function () {},
              "setY": function () {},
              "sub": function () {},
              "subScalar": function () {},
              "subVectors": function () {},
              "toArray": function () {},
              "x": {},
              "y": {}
            }
          },
          "opacity": {
            "value": {}
          },
          "uvTransform": {
            "value": {
              "applyToBuffer": function () {},
              "applyToBufferAttribute": function () {},
              "applyToVector3Array": function () {},
              "clone": function () {},
              "copy": function () {},
              "determinant": function () {},
              "elements": {},
              "equals": function () {},
              "flattenToArrayOffset": function () {},
              "fromArray": function () {},
              "getInverse": function () {},
              "getNormalMatrix": function () {},
              "identity": function () {},
              "isMatrix3": {},
              "multiply": function () {},
              "multiplyMatrices": function () {},
              "multiplyScalar": function () {},
              "multiplyVector3": function () {},
              "multiplyVector3Array": function () {},
              "premultiply": function () {},
              "rotate": function () {},
              "scale": function () {},
              "set": function () {},
              "setFromMatrix4": function () {},
              "setUvTransform": function () {},
              "toArray": function () {},
              "translate": function () {},
              "transpose": function () {},
              "transposeIntoArray": function () {}
            }
          }
        },
        "vertexShader": {}
      },
      "phong": {
        "fragmentShader": {},
        "uniforms": {
          "alphaMap": {
            "value": {}
          },
          "ambientLightColor": {
            "value": {}
          },
          "aoMap": {
            "value": {}
          },
          "aoMapIntensity": {
            "value": {}
          },
          "bumpMap": {
            "value": {}
          },
          "bumpScale": {
            "value": {}
          },
          "diffuse": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "directionalLights": {
            "properties": {
              "color": {},
              "direction": {},
              "shadow": {},
              "shadowBias": {},
              "shadowMapSize": {},
              "shadowRadius": {}
            },
            "value": {}
          },
          "directionalShadowMap": {
            "value": {}
          },
          "directionalShadowMatrix": {
            "value": {}
          },
          "displacementBias": {
            "value": {}
          },
          "displacementMap": {
            "value": {}
          },
          "displacementScale": {
            "value": {}
          },
          "emissive": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "emissiveMap": {
            "value": {}
          },
          "envMap": {
            "value": {}
          },
          "flipEnvMap": {
            "value": {}
          },
          "fogColor": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "fogDensity": {
            "value": {}
          },
          "fogFar": {
            "value": {}
          },
          "fogNear": {
            "value": {}
          },
          "gradientMap": {
            "value": {}
          },
          "hemisphereLights": {
            "properties": {
              "direction": {},
              "groundColor": {},
              "skyColor": {}
            },
            "value": {}
          },
          "lightMap": {
            "value": {}
          },
          "lightMapIntensity": {
            "value": {}
          },
          "map": {
            "value": {}
          },
          "normalMap": {
            "value": {}
          },
          "normalScale": {
            "value": {
              "add": function () {},
              "addScalar": function () {},
              "addScaledVector": function () {},
              "addVectors": function () {},
              "angle": function () {},
              "applyMatrix3": function () {},
              "ceil": function () {},
              "clamp": function () {},
              "clampLength": function () {},
              "clampScalar": function () {},
              "clone": function () {},
              "copy": function () {},
              "distanceTo": function () {},
              "distanceToManhattan": function () {},
              "distanceToSquared": function () {},
              "divide": function () {},
              "divideScalar": function () {},
              "dot": function () {},
              "equals": function () {},
              "floor": function () {},
              "fromArray": function () {},
              "fromAttribute": function () {},
              "fromBufferAttribute": function () {},
              "getComponent": function () {},
              "isVector2": {},
              "length": function () {},
              "lengthManhattan": function () {},
              "lengthSq": function () {},
              "lerp": function () {},
              "lerpVectors": function () {},
              "manhattanDistanceTo": function () {},
              "manhattanLength": function () {},
              "max": function () {},
              "min": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "negate": function () {},
              "normalize": function () {},
              "rotateAround": function () {},
              "round": function () {},
              "roundToZero": function () {},
              "set": function () {},
              "setComponent": function () {},
              "setLength": function () {},
              "setScalar": function () {},
              "setX": function () {},
              "setY": function () {},
              "sub": function () {},
              "subScalar": function () {},
              "subVectors": function () {},
              "toArray": function () {},
              "x": {},
              "y": {}
            }
          },
          "opacity": {
            "value": {}
          },
          "pointLights": {
            "properties": {
              "color": {},
              "decay": {},
              "distance": {},
              "position": {},
              "shadow": {},
              "shadowBias": {},
              "shadowCameraFar": {},
              "shadowCameraNear": {},
              "shadowMapSize": {},
              "shadowRadius": {}
            },
            "value": {}
          },
          "pointShadowMap": {
            "value": {}
          },
          "pointShadowMatrix": {
            "value": {}
          },
          "rectAreaLights": {
            "properties": {
              "color": {},
              "height": {},
              "position": {},
              "width": {}
            },
            "value": {}
          },
          "reflectivity": {
            "value": {}
          },
          "refractionRatio": {
            "value": {}
          },
          "shininess": {
            "value": {}
          },
          "specular": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "specularMap": {
            "value": {}
          },
          "spotLights": {
            "properties": {
              "color": {},
              "coneCos": {},
              "decay": {},
              "direction": {},
              "distance": {},
              "penumbraCos": {},
              "position": {},
              "shadow": {},
              "shadowBias": {},
              "shadowMapSize": {},
              "shadowRadius": {}
            },
            "value": {}
          },
          "spotShadowMap": {
            "value": {}
          },
          "spotShadowMatrix": {
            "value": {}
          },
          "uvTransform": {
            "value": {
              "applyToBuffer": function () {},
              "applyToBufferAttribute": function () {},
              "applyToVector3Array": function () {},
              "clone": function () {},
              "copy": function () {},
              "determinant": function () {},
              "elements": {},
              "equals": function () {},
              "flattenToArrayOffset": function () {},
              "fromArray": function () {},
              "getInverse": function () {},
              "getNormalMatrix": function () {},
              "identity": function () {},
              "isMatrix3": {},
              "multiply": function () {},
              "multiplyMatrices": function () {},
              "multiplyScalar": function () {},
              "multiplyVector3": function () {},
              "multiplyVector3Array": function () {},
              "premultiply": function () {},
              "rotate": function () {},
              "scale": function () {},
              "set": function () {},
              "setFromMatrix4": function () {},
              "setUvTransform": function () {},
              "toArray": function () {},
              "translate": function () {},
              "transpose": function () {},
              "transposeIntoArray": function () {}
            }
          }
        },
        "vertexShader": {}
      },
      "physical": {
        "fragmentShader": {},
        "uniforms": {
          "alphaMap": {
            "value": {}
          },
          "ambientLightColor": {
            "value": {}
          },
          "aoMap": {
            "value": {}
          },
          "aoMapIntensity": {
            "value": {}
          },
          "bumpMap": {
            "value": {}
          },
          "bumpScale": {
            "value": {}
          },
          "clearCoat": {
            "value": {}
          },
          "clearCoatRoughness": {
            "value": {}
          },
          "diffuse": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "directionalLights": {
            "properties": {
              "color": {},
              "direction": {},
              "shadow": {},
              "shadowBias": {},
              "shadowMapSize": {},
              "shadowRadius": {}
            },
            "value": {}
          },
          "directionalShadowMap": {
            "value": {}
          },
          "directionalShadowMatrix": {
            "value": {}
          },
          "displacementBias": {
            "value": {}
          },
          "displacementMap": {
            "value": {}
          },
          "displacementScale": {
            "value": {}
          },
          "emissive": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "emissiveMap": {
            "value": {}
          },
          "envMap": {
            "value": {}
          },
          "envMapIntensity": {
            "value": {}
          },
          "flipEnvMap": {
            "value": {}
          },
          "fogColor": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "fogDensity": {
            "value": {}
          },
          "fogFar": {
            "value": {}
          },
          "fogNear": {
            "value": {}
          },
          "hemisphereLights": {
            "properties": {
              "direction": {},
              "groundColor": {},
              "skyColor": {}
            },
            "value": {}
          },
          "lightMap": {
            "value": {}
          },
          "lightMapIntensity": {
            "value": {}
          },
          "map": {
            "value": {}
          },
          "metalness": {
            "value": {}
          },
          "metalnessMap": {
            "value": {}
          },
          "normalMap": {
            "value": {}
          },
          "normalScale": {
            "value": {
              "add": function () {},
              "addScalar": function () {},
              "addScaledVector": function () {},
              "addVectors": function () {},
              "angle": function () {},
              "applyMatrix3": function () {},
              "ceil": function () {},
              "clamp": function () {},
              "clampLength": function () {},
              "clampScalar": function () {},
              "clone": function () {},
              "copy": function () {},
              "distanceTo": function () {},
              "distanceToManhattan": function () {},
              "distanceToSquared": function () {},
              "divide": function () {},
              "divideScalar": function () {},
              "dot": function () {},
              "equals": function () {},
              "floor": function () {},
              "fromArray": function () {},
              "fromAttribute": function () {},
              "fromBufferAttribute": function () {},
              "getComponent": function () {},
              "isVector2": {},
              "length": function () {},
              "lengthManhattan": function () {},
              "lengthSq": function () {},
              "lerp": function () {},
              "lerpVectors": function () {},
              "manhattanDistanceTo": function () {},
              "manhattanLength": function () {},
              "max": function () {},
              "min": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "negate": function () {},
              "normalize": function () {},
              "rotateAround": function () {},
              "round": function () {},
              "roundToZero": function () {},
              "set": function () {},
              "setComponent": function () {},
              "setLength": function () {},
              "setScalar": function () {},
              "setX": function () {},
              "setY": function () {},
              "sub": function () {},
              "subScalar": function () {},
              "subVectors": function () {},
              "toArray": function () {},
              "x": {},
              "y": {}
            }
          },
          "opacity": {
            "value": {}
          },
          "pointLights": {
            "properties": {
              "color": {},
              "decay": {},
              "distance": {},
              "position": {},
              "shadow": {},
              "shadowBias": {},
              "shadowCameraFar": {},
              "shadowCameraNear": {},
              "shadowMapSize": {},
              "shadowRadius": {}
            },
            "value": {}
          },
          "pointShadowMap": {
            "value": {}
          },
          "pointShadowMatrix": {
            "value": {}
          },
          "rectAreaLights": {
            "properties": {
              "color": {},
              "height": {},
              "position": {},
              "width": {}
            },
            "value": {}
          },
          "reflectivity": {
            "value": {}
          },
          "refractionRatio": {
            "value": {}
          },
          "roughness": {
            "value": {}
          },
          "roughnessMap": {
            "value": {}
          },
          "spotLights": {
            "properties": {
              "color": {},
              "coneCos": {},
              "decay": {},
              "direction": {},
              "distance": {},
              "penumbraCos": {},
              "position": {},
              "shadow": {},
              "shadowBias": {},
              "shadowMapSize": {},
              "shadowRadius": {}
            },
            "value": {}
          },
          "spotShadowMap": {
            "value": {}
          },
          "spotShadowMatrix": {
            "value": {}
          },
          "uvTransform": {
            "value": {
              "applyToBuffer": function () {},
              "applyToBufferAttribute": function () {},
              "applyToVector3Array": function () {},
              "clone": function () {},
              "copy": function () {},
              "determinant": function () {},
              "elements": {},
              "equals": function () {},
              "flattenToArrayOffset": function () {},
              "fromArray": function () {},
              "getInverse": function () {},
              "getNormalMatrix": function () {},
              "identity": function () {},
              "isMatrix3": {},
              "multiply": function () {},
              "multiplyMatrices": function () {},
              "multiplyScalar": function () {},
              "multiplyVector3": function () {},
              "multiplyVector3Array": function () {},
              "premultiply": function () {},
              "rotate": function () {},
              "scale": function () {},
              "set": function () {},
              "setFromMatrix4": function () {},
              "setUvTransform": function () {},
              "toArray": function () {},
              "translate": function () {},
              "transpose": function () {},
              "transposeIntoArray": function () {}
            }
          }
        },
        "vertexShader": {}
      },
      "points": {
        "fragmentShader": {},
        "uniforms": {
          "diffuse": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "fogColor": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "fogDensity": {
            "value": {}
          },
          "fogFar": {
            "value": {}
          },
          "fogNear": {
            "value": {}
          },
          "map": {
            "value": {}
          },
          "opacity": {
            "value": {}
          },
          "scale": {
            "value": {}
          },
          "size": {
            "value": {}
          },
          "uvTransform": {
            "value": {
              "applyToBuffer": function () {},
              "applyToBufferAttribute": function () {},
              "applyToVector3Array": function () {},
              "clone": function () {},
              "copy": function () {},
              "determinant": function () {},
              "elements": {},
              "equals": function () {},
              "flattenToArrayOffset": function () {},
              "fromArray": function () {},
              "getInverse": function () {},
              "getNormalMatrix": function () {},
              "identity": function () {},
              "isMatrix3": {},
              "multiply": function () {},
              "multiplyMatrices": function () {},
              "multiplyScalar": function () {},
              "multiplyVector3": function () {},
              "multiplyVector3Array": function () {},
              "premultiply": function () {},
              "rotate": function () {},
              "scale": function () {},
              "set": function () {},
              "setFromMatrix4": function () {},
              "setUvTransform": function () {},
              "toArray": function () {},
              "translate": function () {},
              "transpose": function () {},
              "transposeIntoArray": function () {}
            }
          }
        },
        "vertexShader": {}
      },
      "shadow": {
        "fragmentShader": {},
        "uniforms": {
          "ambientLightColor": {
            "value": {}
          },
          "color": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "directionalLights": {
            "properties": {
              "color": {},
              "direction": {},
              "shadow": {},
              "shadowBias": {},
              "shadowMapSize": {},
              "shadowRadius": {}
            },
            "value": {}
          },
          "directionalShadowMap": {
            "value": {}
          },
          "directionalShadowMatrix": {
            "value": {}
          },
          "fogColor": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "fogDensity": {
            "value": {}
          },
          "fogFar": {
            "value": {}
          },
          "fogNear": {
            "value": {}
          },
          "hemisphereLights": {
            "properties": {
              "direction": {},
              "groundColor": {},
              "skyColor": {}
            },
            "value": {}
          },
          "opacity": {
            "value": {}
          },
          "pointLights": {
            "properties": {
              "color": {},
              "decay": {},
              "distance": {},
              "position": {},
              "shadow": {},
              "shadowBias": {},
              "shadowCameraFar": {},
              "shadowCameraNear": {},
              "shadowMapSize": {},
              "shadowRadius": {}
            },
            "value": {}
          },
          "pointShadowMap": {
            "value": {}
          },
          "pointShadowMatrix": {
            "value": {}
          },
          "rectAreaLights": {
            "properties": {
              "color": {},
              "height": {},
              "position": {},
              "width": {}
            },
            "value": {}
          },
          "spotLights": {
            "properties": {
              "color": {},
              "coneCos": {},
              "decay": {},
              "direction": {},
              "distance": {},
              "penumbraCos": {},
              "position": {},
              "shadow": {},
              "shadowBias": {},
              "shadowMapSize": {},
              "shadowRadius": {}
            },
            "value": {}
          },
          "spotShadowMap": {
            "value": {}
          },
          "spotShadowMatrix": {
            "value": {}
          }
        },
        "vertexShader": {}
      },
      "standard": {
        "fragmentShader": {},
        "uniforms": {
          "alphaMap": {
            "value": {}
          },
          "ambientLightColor": {
            "value": {}
          },
          "aoMap": {
            "value": {}
          },
          "aoMapIntensity": {
            "value": {}
          },
          "bumpMap": {
            "value": {}
          },
          "bumpScale": {
            "value": {}
          },
          "diffuse": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "directionalLights": {
            "properties": {
              "color": {},
              "direction": {},
              "shadow": {},
              "shadowBias": {},
              "shadowMapSize": {},
              "shadowRadius": {}
            },
            "value": {}
          },
          "directionalShadowMap": {
            "value": {}
          },
          "directionalShadowMatrix": {
            "value": {}
          },
          "displacementBias": {
            "value": {}
          },
          "displacementMap": {
            "value": {}
          },
          "displacementScale": {
            "value": {}
          },
          "emissive": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "emissiveMap": {
            "value": {}
          },
          "envMap": {
            "value": {}
          },
          "envMapIntensity": {
            "value": {}
          },
          "flipEnvMap": {
            "value": {}
          },
          "fogColor": {
            "value": {
              "add": function () {},
              "addColors": function () {},
              "addScalar": function () {},
              "b": {},
              "clone": function () {},
              "convertGammaToLinear": function () {},
              "convertLinearToGamma": function () {},
              "copy": function () {},
              "copyGammaToLinear": function () {},
              "copyLinearToGamma": function () {},
              "equals": function () {},
              "fromArray": function () {},
              "g": {},
              "getHSL": function () {},
              "getHex": function () {},
              "getHexString": function () {},
              "getStyle": function () {},
              "isColor": {},
              "lerp": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "offsetHSL": function () {},
              "r": {},
              "set": function () {},
              "setHSL": function () {},
              "setHex": function () {},
              "setRGB": function () {},
              "setScalar": function () {},
              "setStyle": function () {},
              "sub": function () {},
              "toArray": function () {},
              "toJSON": function () {}
            }
          },
          "fogDensity": {
            "value": {}
          },
          "fogFar": {
            "value": {}
          },
          "fogNear": {
            "value": {}
          },
          "hemisphereLights": {
            "properties": {
              "direction": {},
              "groundColor": {},
              "skyColor": {}
            },
            "value": {}
          },
          "lightMap": {
            "value": {}
          },
          "lightMapIntensity": {
            "value": {}
          },
          "map": {
            "value": {}
          },
          "metalness": {
            "value": {}
          },
          "metalnessMap": {
            "value": {}
          },
          "normalMap": {
            "value": {}
          },
          "normalScale": {
            "value": {
              "add": function () {},
              "addScalar": function () {},
              "addScaledVector": function () {},
              "addVectors": function () {},
              "angle": function () {},
              "applyMatrix3": function () {},
              "ceil": function () {},
              "clamp": function () {},
              "clampLength": function () {},
              "clampScalar": function () {},
              "clone": function () {},
              "copy": function () {},
              "distanceTo": function () {},
              "distanceToManhattan": function () {},
              "distanceToSquared": function () {},
              "divide": function () {},
              "divideScalar": function () {},
              "dot": function () {},
              "equals": function () {},
              "floor": function () {},
              "fromArray": function () {},
              "fromAttribute": function () {},
              "fromBufferAttribute": function () {},
              "getComponent": function () {},
              "isVector2": {},
              "length": function () {},
              "lengthManhattan": function () {},
              "lengthSq": function () {},
              "lerp": function () {},
              "lerpVectors": function () {},
              "manhattanDistanceTo": function () {},
              "manhattanLength": function () {},
              "max": function () {},
              "min": function () {},
              "multiply": function () {},
              "multiplyScalar": function () {},
              "negate": function () {},
              "normalize": function () {},
              "rotateAround": function () {},
              "round": function () {},
              "roundToZero": function () {},
              "set": function () {},
              "setComponent": function () {},
              "setLength": function () {},
              "setScalar": function () {},
              "setX": function () {},
              "setY": function () {},
              "sub": function () {},
              "subScalar": function () {},
              "subVectors": function () {},
              "toArray": function () {},
              "x": {},
              "y": {}
            }
          },
          "opacity": {
            "value": {}
          },
          "pointLights": {
            "properties": {
              "color": {},
              "decay": {},
              "distance": {},
              "position": {},
              "shadow": {},
              "shadowBias": {},
              "shadowCameraFar": {},
              "shadowCameraNear": {},
              "shadowMapSize": {},
              "shadowRadius": {}
            },
            "value": {}
          },
          "pointShadowMap": {
            "value": {}
          },
          "pointShadowMatrix": {
            "value": {}
          },
          "rectAreaLights": {
            "properties": {
              "color": {},
              "height": {},
              "position": {},
              "width": {}
            },
            "value": {}
          },
          "reflectivity": {
            "value": {}
          },
          "refractionRatio": {
            "value": {}
          },
          "roughness": {
            "value": {}
          },
          "roughnessMap": {
            "value": {}
          },
          "spotLights": {
            "properties": {
              "color": {},
              "coneCos": {},
              "decay": {},
              "direction": {},
              "distance": {},
              "penumbraCos": {},
              "position": {},
              "shadow": {},
              "shadowBias": {},
              "shadowMapSize": {},
              "shadowRadius": {}
            },
            "value": {}
          },
          "spotShadowMap": {
            "value": {}
          },
          "spotShadowMatrix": {
            "value": {}
          },
          "uvTransform": {
            "value": {
              "applyToBuffer": function () {},
              "applyToBufferAttribute": function () {},
              "applyToVector3Array": function () {},
              "clone": function () {},
              "copy": function () {},
              "determinant": function () {},
              "elements": {},
              "equals": function () {},
              "flattenToArrayOffset": function () {},
              "fromArray": function () {},
              "getInverse": function () {},
              "getNormalMatrix": function () {},
              "identity": function () {},
              "isMatrix3": {},
              "multiply": function () {},
              "multiplyMatrices": function () {},
              "multiplyScalar": function () {},
              "multiplyVector3": function () {},
              "multiplyVector3Array": function () {},
              "premultiply": function () {},
              "rotate": function () {},
              "scale": function () {},
              "set": function () {},
              "setFromMatrix4": function () {},
              "setUvTransform": function () {},
              "toArray": function () {},
              "translate": function () {},
              "transpose": function () {},
              "transposeIntoArray": function () {}
            }
          }
        },
        "vertexShader": {}
      }
    },
    "ShaderMaterial": function () {},
    "ShadowMaterial": function () {},
    "Shape": function () {},
    "ShapeBufferGeometry": function () {},
    "ShapeGeometry": function () {},
    "ShapePath": function () {},
    "ShapeUtils": {
      "area": function () {},
      "isClockWise": function () {},
      "triangulateShape": function () {}
    },
    "ShortType": {},
    "Skeleton": function () {},
    "SkeletonHelper": function () {},
    "SkinnedMesh": function () {},
    "SmoothShading": {},
    "Sphere": function () {},
    "SphereBufferGeometry": function () {},
    "SphereGeometry": function () {},
    "Spherical": function () {},
    "SphericalReflectionMapping": {},
    "Spline": function () {},
    "SplineCurve": function () {},
    "SplineCurve3": function () {},
    "SpotLight": function () {},
    "SpotLightHelper": function () {},
    "SpotLightShadow": function () {},
    "Sprite": function () {},
    "SpriteMaterial": function () {},
    "SrcAlphaFactor": {},
    "SrcAlphaSaturateFactor": {},
    "SrcColorFactor": {},
    "StereoCamera": function () {},
    "StringKeyframeTrack": function () {},
    "SubtractEquation": {},
    "SubtractiveBlending": {},
    "TetrahedronBufferGeometry": function () {},
    "TetrahedronGeometry": function () {},
    "TextBufferGeometry": function () {},
    "TextGeometry": function () {},
    "Texture": {
      "DEFAULT_IMAGE": {},
      "DEFAULT_MAPPING": {}
    },
    "TextureLoader": function () {},
    "TorusBufferGeometry": function () {},
    "TorusGeometry": function () {},
    "TorusKnotBufferGeometry": function () {},
    "TorusKnotGeometry": function () {},
    "Triangle": {
      "barycoordFromPoint": function () {},
      "containsPoint": function () {},
      "normal": function () {}
    },
    "TriangleFanDrawMode": {},
    "TriangleStripDrawMode": {},
    "TrianglesDrawMode": {},
    "TubeBufferGeometry": function () {},
    "TubeGeometry": function () {},
    "UVMapping": {},
    "Uint16Attribute": function () {},
    "Uint16BufferAttribute": function () {},
    "Uint32Attribute": function () {},
    "Uint32BufferAttribute": function () {},
    "Uint8Attribute": function () {},
    "Uint8BufferAttribute": function () {},
    "Uint8ClampedAttribute": function () {},
    "Uint8ClampedBufferAttribute": function () {},
    "Uncharted2ToneMapping": {},
    "Uniform": function () {},
    "UniformsLib": {
      "aomap": {
        "aoMap": {
          "value": {}
        },
        "aoMapIntensity": {
          "value": {}
        }
      },
      "bumpmap": {
        "bumpMap": {
          "value": {}
        },
        "bumpScale": {
          "value": {}
        }
      },
      "common": {
        "alphaMap": {
          "value": {}
        },
        "diffuse": {
          "value": {
            "add": function () {},
            "addColors": function () {},
            "addScalar": function () {},
            "b": {},
            "clone": function () {},
            "convertGammaToLinear": function () {},
            "convertLinearToGamma": function () {},
            "copy": function () {},
            "copyGammaToLinear": function () {},
            "copyLinearToGamma": function () {},
            "equals": function () {},
            "fromArray": function () {},
            "g": {},
            "getHSL": function () {},
            "getHex": function () {},
            "getHexString": function () {},
            "getStyle": function () {},
            "isColor": {},
            "lerp": function () {},
            "multiply": function () {},
            "multiplyScalar": function () {},
            "offsetHSL": function () {},
            "r": {},
            "set": function () {},
            "setHSL": function () {},
            "setHex": function () {},
            "setRGB": function () {},
            "setScalar": function () {},
            "setStyle": function () {},
            "sub": function () {},
            "toArray": function () {},
            "toJSON": function () {}
          }
        },
        "map": {
          "value": {}
        },
        "opacity": {
          "value": {}
        },
        "uvTransform": {
          "value": {
            "applyToBuffer": function () {},
            "applyToBufferAttribute": function () {},
            "applyToVector3Array": function () {},
            "clone": function () {},
            "copy": function () {},
            "determinant": function () {},
            "elements": {},
            "equals": function () {},
            "flattenToArrayOffset": function () {},
            "fromArray": function () {},
            "getInverse": function () {},
            "getNormalMatrix": function () {},
            "identity": function () {},
            "isMatrix3": {},
            "multiply": function () {},
            "multiplyMatrices": function () {},
            "multiplyScalar": function () {},
            "multiplyVector3": function () {},
            "multiplyVector3Array": function () {},
            "premultiply": function () {},
            "rotate": function () {},
            "scale": function () {},
            "set": function () {},
            "setFromMatrix4": function () {},
            "setUvTransform": function () {},
            "toArray": function () {},
            "translate": function () {},
            "transpose": function () {},
            "transposeIntoArray": function () {}
          }
        }
      },
      "displacementmap": {
        "displacementBias": {
          "value": {}
        },
        "displacementMap": {
          "value": {}
        },
        "displacementScale": {
          "value": {}
        }
      },
      "emissivemap": {
        "emissiveMap": {
          "value": {}
        }
      },
      "envmap": {
        "envMap": {
          "value": {}
        },
        "flipEnvMap": {
          "value": {}
        },
        "reflectivity": {
          "value": {}
        },
        "refractionRatio": {
          "value": {}
        }
      },
      "fog": {
        "fogColor": {
          "value": {
            "add": function () {},
            "addColors": function () {},
            "addScalar": function () {},
            "b": {},
            "clone": function () {},
            "convertGammaToLinear": function () {},
            "convertLinearToGamma": function () {},
            "copy": function () {},
            "copyGammaToLinear": function () {},
            "copyLinearToGamma": function () {},
            "equals": function () {},
            "fromArray": function () {},
            "g": {},
            "getHSL": function () {},
            "getHex": function () {},
            "getHexString": function () {},
            "getStyle": function () {},
            "isColor": {},
            "lerp": function () {},
            "multiply": function () {},
            "multiplyScalar": function () {},
            "offsetHSL": function () {},
            "r": {},
            "set": function () {},
            "setHSL": function () {},
            "setHex": function () {},
            "setRGB": function () {},
            "setScalar": function () {},
            "setStyle": function () {},
            "sub": function () {},
            "toArray": function () {},
            "toJSON": function () {}
          }
        },
        "fogDensity": {
          "value": {}
        },
        "fogFar": {
          "value": {}
        },
        "fogNear": {
          "value": {}
        }
      },
      "gradientmap": {
        "gradientMap": {
          "value": {}
        }
      },
      "lightmap": {
        "lightMap": {
          "value": {}
        },
        "lightMapIntensity": {
          "value": {}
        }
      },
      "lights": {
        "ambientLightColor": {
          "value": {}
        },
        "directionalLights": {
          "properties": {
            "color": {},
            "direction": {},
            "shadow": {},
            "shadowBias": {},
            "shadowMapSize": {},
            "shadowRadius": {}
          },
          "value": {}
        },
        "directionalShadowMap": {
          "value": {}
        },
        "directionalShadowMatrix": {
          "value": {}
        },
        "hemisphereLights": {
          "properties": {
            "direction": {},
            "groundColor": {},
            "skyColor": {}
          },
          "value": {}
        },
        "pointLights": {
          "properties": {
            "color": {},
            "decay": {},
            "distance": {},
            "position": {},
            "shadow": {},
            "shadowBias": {},
            "shadowCameraFar": {},
            "shadowCameraNear": {},
            "shadowMapSize": {},
            "shadowRadius": {}
          },
          "value": {}
        },
        "pointShadowMap": {
          "value": {}
        },
        "pointShadowMatrix": {
          "value": {}
        },
        "rectAreaLights": {
          "properties": {
            "color": {},
            "height": {},
            "position": {},
            "width": {}
          },
          "value": {}
        },
        "spotLights": {
          "properties": {
            "color": {},
            "coneCos": {},
            "decay": {},
            "direction": {},
            "distance": {},
            "penumbraCos": {},
            "position": {},
            "shadow": {},
            "shadowBias": {},
            "shadowMapSize": {},
            "shadowRadius": {}
          },
          "value": {}
        },
        "spotShadowMap": {
          "value": {}
        },
        "spotShadowMatrix": {
          "value": {}
        }
      },
      "metalnessmap": {
        "metalnessMap": {
          "value": {}
        }
      },
      "normalmap": {
        "normalMap": {
          "value": {}
        },
        "normalScale": {
          "value": {
            "add": function () {},
            "addScalar": function () {},
            "addScaledVector": function () {},
            "addVectors": function () {},
            "angle": function () {},
            "applyMatrix3": function () {},
            "ceil": function () {},
            "clamp": function () {},
            "clampLength": function () {},
            "clampScalar": function () {},
            "clone": function () {},
            "copy": function () {},
            "distanceTo": function () {},
            "distanceToManhattan": function () {},
            "distanceToSquared": function () {},
            "divide": function () {},
            "divideScalar": function () {},
            "dot": function () {},
            "equals": function () {},
            "floor": function () {},
            "fromArray": function () {},
            "fromAttribute": function () {},
            "fromBufferAttribute": function () {},
            "getComponent": function () {},
            "isVector2": {},
            "length": function () {},
            "lengthManhattan": function () {},
            "lengthSq": function () {},
            "lerp": function () {},
            "lerpVectors": function () {},
            "manhattanDistanceTo": function () {},
            "manhattanLength": function () {},
            "max": function () {},
            "min": function () {},
            "multiply": function () {},
            "multiplyScalar": function () {},
            "negate": function () {},
            "normalize": function () {},
            "rotateAround": function () {},
            "round": function () {},
            "roundToZero": function () {},
            "set": function () {},
            "setComponent": function () {},
            "setLength": function () {},
            "setScalar": function () {},
            "setX": function () {},
            "setY": function () {},
            "sub": function () {},
            "subScalar": function () {},
            "subVectors": function () {},
            "toArray": function () {},
            "x": {},
            "y": {}
          }
        }
      },
      "points": {
        "diffuse": {
          "value": {
            "add": function () {},
            "addColors": function () {},
            "addScalar": function () {},
            "b": {},
            "clone": function () {},
            "convertGammaToLinear": function () {},
            "convertLinearToGamma": function () {},
            "copy": function () {},
            "copyGammaToLinear": function () {},
            "copyLinearToGamma": function () {},
            "equals": function () {},
            "fromArray": function () {},
            "g": {},
            "getHSL": function () {},
            "getHex": function () {},
            "getHexString": function () {},
            "getStyle": function () {},
            "isColor": {},
            "lerp": function () {},
            "multiply": function () {},
            "multiplyScalar": function () {},
            "offsetHSL": function () {},
            "r": {},
            "set": function () {},
            "setHSL": function () {},
            "setHex": function () {},
            "setRGB": function () {},
            "setScalar": function () {},
            "setStyle": function () {},
            "sub": function () {},
            "toArray": function () {},
            "toJSON": function () {}
          }
        },
        "map": {
          "value": {}
        },
        "opacity": {
          "value": {}
        },
        "scale": {
          "value": {}
        },
        "size": {
          "value": {}
        },
        "uvTransform": {
          "value": {
            "applyToBuffer": function () {},
            "applyToBufferAttribute": function () {},
            "applyToVector3Array": function () {},
            "clone": function () {},
            "copy": function () {},
            "determinant": function () {},
            "elements": {},
            "equals": function () {},
            "flattenToArrayOffset": function () {},
            "fromArray": function () {},
            "getInverse": function () {},
            "getNormalMatrix": function () {},
            "identity": function () {},
            "isMatrix3": {},
            "multiply": function () {},
            "multiplyMatrices": function () {},
            "multiplyScalar": function () {},
            "multiplyVector3": function () {},
            "multiplyVector3Array": function () {},
            "premultiply": function () {},
            "rotate": function () {},
            "scale": function () {},
            "set": function () {},
            "setFromMatrix4": function () {},
            "setUvTransform": function () {},
            "toArray": function () {},
            "translate": function () {},
            "transpose": function () {},
            "transposeIntoArray": function () {}
          }
        }
      },
      "roughnessmap": {
        "roughnessMap": {
          "value": {}
        }
      },
      "specularmap": {
        "specularMap": {
          "value": {}
        }
      }
    },
    "UniformsUtils": {
      "clone": function () {},
      "merge": function () {}
    },
    "UnsignedByteType": {},
    "UnsignedInt248Type": {},
    "UnsignedIntType": {},
    "UnsignedShort4444Type": {},
    "UnsignedShort5551Type": {},
    "UnsignedShort565Type": {},
    "UnsignedShortType": {},
    "Vector2": function () {},
    "Vector3": function () {},
    "Vector4": function () {},
    "VectorKeyframeTrack": function () {},
    "Vertex": function () {},
    "VertexColors": {},
    "VertexNormalsHelper": function () {},
    "VideoTexture": function () {},
    "WebGLRenderTarget": function () {},
    "WebGLRenderTargetCube": function () {},
    "WebGLRenderer": function () {},
    "WebGLUtils": function () {},
    "WireframeGeometry": function () {},
    "WireframeHelper": function () {},
    "WrapAroundEnding": {},
    "XHRLoader": function () {},
    "ZeroCurvatureEnding": {},
    "ZeroFactor": {},
    "ZeroSlopeEnding": {},
    "sRGBEncoding": {}
  },
  "TWEEN": {
    "Easing": {
      "Back": {
        "In": function () {},
        "InOut": function () {},
        "Out": function () {}
      },
      "Bounce": {
        "In": function () {},
        "InOut": function () {},
        "Out": function () {}
      },
      "Circular": {
        "In": function () {},
        "InOut": function () {},
        "Out": function () {}
      },
      "Cubic": {
        "In": function () {},
        "InOut": function () {},
        "Out": function () {}
      },
      "Elastic": {
        "In": function () {},
        "InOut": function () {},
        "Out": function () {}
      },
      "Exponential": {
        "In": function () {},
        "InOut": function () {},
        "Out": function () {}
      },
      "Linear": {
        "None": function () {}
      },
      "Quadratic": {
        "In": function () {},
        "InOut": function () {},
        "Out": function () {}
      },
      "Quartic": {
        "In": function () {},
        "InOut": function () {},
        "Out": function () {}
      },
      "Quintic": {
        "In": function () {},
        "InOut": function () {},
        "Out": function () {}
      },
      "Sinusoidal": {
        "In": function () {},
        "InOut": function () {},
        "Out": function () {}
      }
    },
    "Group": function () {},
    "Interpolation": {
      "Bezier": function () {},
      "CatmullRom": function () {},
      "Linear": function () {},
      "Utils": {
        "Bernstein": function () {},
        "CatmullRom": function () {},
        "Factorial": function () {},
        "Linear": function () {}
      }
    },
    "Tween": function () {},
    "_nextId": {},
    "_tweens": {},
    "_tweensAddedDuringUpdate": {},
    "add": function () {},
    "getAll": function () {},
    "nextId": function () {},
    "now": function () {},
    "remove": function () {},
    "removeAll": function () {},
    "update": function () {}
  },
  "components": {
    "background": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "color": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "transparent": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "camera": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "active": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "far": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "fov": {
          "default": {},
          "min": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "near": {
          "default": {},
          "min": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "spectator": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "zoom": {
          "default": {},
          "min": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "collada-model": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "default": {},
        "parse": function () {},
        "stringify": function () {},
        "type": {}
      },
      "stringify": function () {},
      "type": {}
    },
    "cursor": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "downEvents": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "fuse": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "fuseTimeout": {
          "default": {},
          "min": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "rayOrigin": {
          "default": {},
          "oneOf": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "upEvents": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "daydream-controls": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "armModel": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "buttonColor": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "buttonHighlightColor": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "buttonTouchedColor": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "hand": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "model": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "orientationOffset": {
          "default": {
            "x": {},
            "y": {},
            "z": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "debug": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "default": {},
        "parse": function () {},
        "stringify": function () {},
        "type": {}
      },
      "stringify": function () {},
      "type": {}
    },
    "embedded": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "default": {},
        "parse": function () {},
        "stringify": function () {},
        "type": {}
      },
      "stringify": function () {},
      "type": {}
    },
    "fog": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "color": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "density": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "far": {
          "default": {},
          "min": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "near": {
          "default": {},
          "min": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "type": {
          "default": {},
          "oneOf": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "gearvr-controls": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "armModel": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "buttonColor": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "buttonHighlightColor": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "buttonTouchedColor": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "hand": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "model": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "orientationOffset": {
          "default": {
            "x": {},
            "y": {},
            "z": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "geometry": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "buffer": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "primitive": {
          "default": {},
          "oneOf": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "skipCache": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "gltf-model": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "default": {},
        "parse": function () {},
        "stringify": function () {},
        "type": {}
      },
      "stringify": function () {},
      "type": {}
    },
    "hand-controls": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "default": {},
        "parse": function () {},
        "stringify": function () {},
        "type": {}
      },
      "stringify": function () {},
      "type": {}
    },
    "inspector": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "url": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "keyboard-shortcuts": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "enterVR": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "exitVR": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "laser-controls": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "hand": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "light": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "angle": {
          "default": {},
          "if": {
            "type": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "castShadow": {
          "default": {},
          "if": {
            "type": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "color": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "decay": {
          "default": {},
          "if": {
            "type": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "distance": {
          "default": {},
          "if": {
            "type": {}
          },
          "min": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "groundColor": {
          "default": {},
          "if": {
            "type": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "intensity": {
          "default": {},
          "if": {
            "type": {}
          },
          "min": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "penumbra": {
          "default": {},
          "if": {
            "type": {}
          },
          "max": {},
          "min": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "shadowBias": {
          "default": {},
          "if": {
            "castShadow": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "shadowCameraBottom": {
          "default": {},
          "if": {
            "castShadow": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "shadowCameraFar": {
          "default": {},
          "if": {
            "castShadow": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "shadowCameraFov": {
          "default": {},
          "if": {
            "castShadow": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "shadowCameraLeft": {
          "default": {},
          "if": {
            "castShadow": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "shadowCameraNear": {
          "default": {},
          "if": {
            "castShadow": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "shadowCameraRight": {
          "default": {},
          "if": {
            "castShadow": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "shadowCameraTop": {
          "default": {},
          "if": {
            "castShadow": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "shadowCameraVisible": {
          "default": {},
          "if": {
            "castShadow": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "shadowMapHeight": {
          "default": {},
          "if": {
            "castShadow": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "shadowMapWidth": {
          "default": {},
          "if": {
            "castShadow": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "target": {
          "default": {},
          "if": {
            "type": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "type": {
          "default": {},
          "oneOf": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "line": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "color": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "end": {
          "default": {
            "x": {},
            "y": {},
            "z": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "opacity": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "start": {
          "default": {
            "x": {},
            "y": {},
            "z": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "visible": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "link": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "backgroundColor": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "borderColor": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "highlighted": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "highlightedColor": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "href": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "image": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "on": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "peekMode": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "title": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "titleColor": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "visualAspectEnabled": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "look-controls": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "enabled": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "hmdEnabled": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "pointerLockEnabled": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "reverseMouseDrag": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "touchEnabled": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "material": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "alphaTest": {
          "default": {},
          "max": {},
          "min": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "depthTest": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "depthWrite": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "flatShading": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "npot": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "offset": {
          "default": {
            "x": {},
            "y": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "opacity": {
          "default": {},
          "max": {},
          "min": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "repeat": {
          "default": {
            "x": {},
            "y": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "shader": {
          "default": {},
          "oneOf": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "side": {
          "default": {},
          "oneOf": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "transparent": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "vertexColors": {
          "default": {},
          "oneOf": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "visible": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "obj-model": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "mtl": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "obj": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "oculus-touch-controls": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "buttonColor": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "buttonHighlightColor": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "buttonTouchColor": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "hand": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "model": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "orientationOffset": {
          "default": {
            "x": {},
            "y": {},
            "z": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "pivot": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "default": {
          "x": {},
          "y": {},
          "z": {}
        },
        "parse": function () {},
        "stringify": function () {},
        "type": {}
      },
      "stringify": function () {},
      "type": {}
    },
    "pool": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "container": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "dynamic": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "mixin": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "size": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "position": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "default": {
          "x": {},
          "y": {},
          "z": {}
        },
        "parse": function () {},
        "stringify": function () {},
        "type": {}
      },
      "stringify": function () {},
      "type": {}
    },
    "raycaster": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "autoRefresh": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "direction": {
          "default": {
            "x": {},
            "y": {},
            "z": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "enabled": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "far": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "interval": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "near": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "objects": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "origin": {
          "default": {
            "x": {},
            "y": {},
            "z": {}
          },
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "recursive": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "showLine": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "useWorldCoordinates": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "renderer": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "antialias": {
          "default": {},
          "oneOf": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "gammaOutput": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "physicallyCorrectLights": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "sortObjects": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "rotation": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "default": {
          "x": {},
          "y": {},
          "z": {}
        },
        "parse": function () {},
        "stringify": function () {},
        "type": {}
      },
      "stringify": function () {},
      "type": {}
    },
    "scale": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "default": {
          "x": {},
          "y": {},
          "z": {}
        },
        "parse": function () {},
        "stringify": function () {},
        "type": {}
      },
      "stringify": function () {},
      "type": {}
    },
    "screenshot": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "camera": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "height": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "width": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "shadow": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "cast": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "receive": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "sound": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "autoplay": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "distanceModel": {
          "default": {},
          "oneOf": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "loop": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "maxDistance": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "on": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "poolSize": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "positional": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "refDistance": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "rolloffFactor": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "src": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "volume": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "stats": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "default": {},
        "parse": function () {},
        "stringify": function () {},
        "type": {}
      },
      "stringify": function () {},
      "type": {}
    },
    "text": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "align": {
          "default": {},
          "oneOf": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "alphaTest": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "anchor": {
          "default": {},
          "oneOf": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "baseline": {
          "default": {},
          "oneOf": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "color": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "font": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "fontImage": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "height": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "letterSpacing": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "lineHeight": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "negate": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "opacity": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "shader": {
          "default": {},
          "oneOf": {
            "flat": {
              "Shader": function () {},
              "schema": {
                "color": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "fog": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "height": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "offset": {
                  "default": {
                    "closure_uid_763713915": {},
                    "x": {},
                    "y": {}
                  },
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "repeat": {
                  "default": {
                    "closure_uid_763713915": {},
                    "x": {},
                    "y": {}
                  },
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "src": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "width": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "wireframe": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "wireframeLinewidth": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                }
              }
            },
            "ios10hls": {
              "Shader": function () {},
              "schema": {
                "opacity": {
                  "default": {},
                  "is": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "src": {
                  "default": {},
                  "is": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                }
              }
            },
            "msdf": {
              "Shader": function () {},
              "schema": {
                "alphaTest": {
                  "default": {},
                  "is": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "color": {
                  "default": {},
                  "is": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "map": {
                  "default": {},
                  "is": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "negate": {
                  "default": {},
                  "is": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "opacity": {
                  "default": {},
                  "is": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                }
              }
            },
            "portal": {
              "Shader": function () {},
              "schema": {
                "backgroundColor": {
                  "default": {},
                  "is": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "borderEnabled": {
                  "default": {},
                  "is": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "pano": {
                  "default": {},
                  "is": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "strokeColor": {
                  "default": {},
                  "is": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                }
              }
            },
            "sdf": {
              "Shader": function () {},
              "schema": {
                "alphaTest": {
                  "default": {},
                  "is": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "color": {
                  "default": {},
                  "is": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "map": {
                  "default": {},
                  "is": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "opacity": {
                  "default": {},
                  "is": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                }
              }
            },
            "standard": {
              "Shader": function () {},
              "schema": {
                "ambientOcclusionMap": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "ambientOcclusionMapIntensity": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "ambientOcclusionTextureOffset": {
                  "default": {
                    "closure_uid_763713915": {},
                    "x": {},
                    "y": {}
                  },
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "ambientOcclusionTextureRepeat": {
                  "default": {
                    "closure_uid_763713915": {},
                    "x": {},
                    "y": {}
                  },
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "color": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "displacementBias": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "displacementMap": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "displacementScale": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "displacementTextureOffset": {
                  "default": {
                    "closure_uid_763713915": {},
                    "x": {},
                    "y": {}
                  },
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "displacementTextureRepeat": {
                  "default": {
                    "closure_uid_763713915": {},
                    "x": {},
                    "y": {}
                  },
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "emissive": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "emissiveIntensity": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "envMap": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "fog": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "height": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "metalness": {
                  "default": {},
                  "max": {},
                  "min": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "metalnessMap": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "metalnessTextureOffset": {
                  "default": {
                    "closure_uid_763713915": {},
                    "x": {},
                    "y": {}
                  },
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "metalnessTextureRepeat": {
                  "default": {
                    "closure_uid_763713915": {},
                    "x": {},
                    "y": {}
                  },
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "normalMap": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "normalScale": {
                  "default": {
                    "closure_uid_763713915": {},
                    "x": {},
                    "y": {}
                  },
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "normalTextureOffset": {
                  "default": {
                    "closure_uid_763713915": {},
                    "x": {},
                    "y": {}
                  },
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "normalTextureRepeat": {
                  "default": {
                    "closure_uid_763713915": {},
                    "x": {},
                    "y": {}
                  },
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "offset": {
                  "default": {
                    "closure_uid_763713915": {},
                    "x": {},
                    "y": {}
                  },
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "repeat": {
                  "default": {
                    "closure_uid_763713915": {},
                    "x": {},
                    "y": {}
                  },
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "roughness": {
                  "default": {},
                  "max": {},
                  "min": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "roughnessMap": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "roughnessTextureOffset": {
                  "default": {
                    "closure_uid_763713915": {},
                    "x": {},
                    "y": {}
                  },
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "roughnessTextureRepeat": {
                  "default": {
                    "closure_uid_763713915": {},
                    "x": {},
                    "y": {}
                  },
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "sphericalEnvMap": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "src": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "width": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "wireframe": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                },
                "wireframeLinewidth": {
                  "default": {},
                  "parse": {
                    "closure_uid_763713915": {}
                  },
                  "stringify": {
                    "closure_uid_763713915": {}
                  },
                  "type": {}
                }
              }
            }
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "side": {
          "default": {},
          "oneOf": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "tabSize": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "transparent": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "value": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "whiteSpace": {
          "default": {},
          "oneOf": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "width": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "wrapCount": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "wrapPixels": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "xOffset": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "yOffset": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "zOffset": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "tracked-controls": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "armModel": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "controller": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "hand": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "headElement": {
          "default": {},
          "parse": function () {},
          "stringify": function () {},
          "type": {}
        },
        "id": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "idPrefix": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "orientationOffset": {
          "default": {
            "x": {},
            "y": {},
            "z": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "visible": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "default": {},
        "parse": {
          "closure_uid_763713915": {}
        },
        "stringify": {
          "closure_uid_763713915": {}
        },
        "type": {}
      },
      "stringify": function () {},
      "type": {}
    },
    "vive-controls": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "buttonColor": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "buttonHighlightColor": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "hand": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "model": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "orientationOffset": {
          "default": {
            "x": {},
            "y": {},
            "z": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "vr-mode-ui": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "enabled": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "wasd-controls": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "acceleration": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "adAxis": {
          "default": {},
          "oneOf": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "adEnabled": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "adInverted": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "easing": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "enabled": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "fly": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "wsAxis": {
          "default": {},
          "oneOf": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "wsEnabled": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "wsInverted": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    },
    "windows-motion-controls": {
      "Component": function () {},
      "dependencies": {},
      "isSingleProp": {},
      "multiple": {},
      "parse": function () {},
      "parseAttrValueForCache": function () {},
      "schema": {
        "hand": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "hideDisconnected": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "model": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "pair": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      },
      "stringify": function () {},
      "type": {}
    }
  },
  "geometries": {
    "box": {
      "Geometry": function () {},
      "schema": {
        "depth": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "height": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segmentsDepth": {
          "default": {},
          "max": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segmentsHeight": {
          "default": {},
          "max": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segmentsWidth": {
          "default": {},
          "max": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "width": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "circle": {
      "Geometry": function () {},
      "schema": {
        "radius": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segments": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "thetaLength": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "thetaStart": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "cone": {
      "Geometry": function () {},
      "schema": {
        "height": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "openEnded": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "radiusBottom": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "radiusTop": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segmentsHeight": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segmentsRadial": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "thetaLength": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "thetaStart": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "cylinder": {
      "Geometry": function () {},
      "schema": {
        "height": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "openEnded": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "radius": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segmentsHeight": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segmentsRadial": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "thetaLength": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "thetaStart": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "dodecahedron": {
      "Geometry": function () {},
      "schema": {
        "detail": {
          "default": {},
          "max": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "radius": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "icosahedron": {
      "Geometry": function () {},
      "schema": {
        "detail": {
          "default": {},
          "max": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "radius": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "octahedron": {
      "Geometry": function () {},
      "schema": {
        "detail": {
          "default": {},
          "max": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "radius": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "plane": {
      "Geometry": function () {},
      "schema": {
        "height": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segmentsHeight": {
          "default": {},
          "max": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segmentsWidth": {
          "default": {},
          "max": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "width": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "ring": {
      "Geometry": function () {},
      "schema": {
        "radiusInner": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "radiusOuter": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segmentsPhi": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segmentsTheta": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "thetaLength": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "thetaStart": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "sphere": {
      "Geometry": function () {},
      "schema": {
        "phiLength": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "phiStart": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "radius": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segmentsHeight": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segmentsWidth": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "thetaLength": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "thetaStart": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "tetrahedron": {
      "Geometry": function () {},
      "schema": {
        "detail": {
          "default": {},
          "max": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "radius": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "torus": {
      "Geometry": function () {},
      "schema": {
        "arc": {
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "radius": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "radiusTubular": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segmentsRadial": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segmentsTubular": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "torusKnot": {
      "Geometry": function () {},
      "schema": {
        "p": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "q": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "radius": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "radiusTubular": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segmentsRadial": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "segmentsTubular": {
          "default": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "triangle": {
      "Geometry": function () {},
      "schema": {
        "vertexA": {
          "default": {
            "x": {},
            "y": {},
            "z": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "vertexB": {
          "default": {
            "x": {},
            "y": {},
            "z": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "vertexC": {
          "default": {
            "x": {},
            "y": {},
            "z": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    }
  },
  "primitives": {
    "getMeshMixin": function () {},
    "primitives": {
      "a-box": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-camera": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-circle": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-collada-model": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-cone": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-cursor": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-curvedimage": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-cylinder": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-dodecahedron": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-gltf-model": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-icosahedron": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-image": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-light": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-link": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-obj-model": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-octahedron": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-plane": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-ring": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-sky": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-sound": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-sphere": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-tetrahedron": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-text": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-torus": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-torus-knot": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-triangle": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-video": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      },
      "a-videosphere": {
        "ATTRIBUTE_NODE": {},
        "CDATA_SECTION_NODE": {},
        "COMMENT_NODE": {},
        "DOCUMENT_FRAGMENT_NODE": {},
        "DOCUMENT_NODE": {},
        "DOCUMENT_POSITION_CONTAINED_BY": {},
        "DOCUMENT_POSITION_CONTAINS": {},
        "DOCUMENT_POSITION_DISCONNECTED": {},
        "DOCUMENT_POSITION_FOLLOWING": {},
        "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": {},
        "DOCUMENT_POSITION_PRECEDING": {},
        "DOCUMENT_TYPE_NODE": {},
        "ELEMENT_NODE": {},
        "ENTITY_NODE": {},
        "ENTITY_REFERENCE_NODE": {},
        "NOTATION_NODE": {},
        "PROCESSING_INSTRUCTION_NODE": {},
        "TEXT_NODE": {}
      }
    }
  },
  "registerComponent": function () {},
  "registerElement": function () {},
  "registerGeometry": function () {},
  "registerPrimitive": function () {},
  "registerShader": function () {},
  "registerSystem": function () {},
  "scenes": {},
  "schema": {
    "isSingleProperty": function () {},
    "parseProperties": function () {},
    "parseProperty": function () {},
    "process": function () {},
    "processPropertyDefinition": function () {},
    "stringifyProperties": function () {},
    "stringifyProperty": function () {}
  },
  "shaders": {
    "closure_uid_763713915": {},
    "flat": {
      "Shader": function () {},
      "closure_uid_763713915": {},
      "schema": {
        "closure_uid_763713915": {},
        "color": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "fog": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "height": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "offset": {
          "closure_uid_763713915": {},
          "default": {
            "closure_uid_763713915": {},
            "x": {},
            "y": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "repeat": {
          "closure_uid_763713915": {},
          "default": {
            "closure_uid_763713915": {},
            "x": {},
            "y": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "src": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "width": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "wireframe": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "wireframeLinewidth": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "ios10hls": {
      "Shader": function () {},
      "closure_uid_763713915": {},
      "schema": {
        "closure_uid_763713915": {},
        "opacity": {
          "closure_uid_763713915": {},
          "default": {},
          "is": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "src": {
          "closure_uid_763713915": {},
          "default": {},
          "is": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "msdf": {
      "Shader": function () {},
      "closure_uid_763713915": {},
      "schema": {
        "alphaTest": {
          "closure_uid_763713915": {},
          "default": {},
          "is": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "closure_uid_763713915": {},
        "color": {
          "closure_uid_763713915": {},
          "default": {},
          "is": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "map": {
          "closure_uid_763713915": {},
          "default": {},
          "is": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "negate": {
          "closure_uid_763713915": {},
          "default": {},
          "is": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "opacity": {
          "closure_uid_763713915": {},
          "default": {},
          "is": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "portal": {
      "Shader": function () {},
      "closure_uid_763713915": {},
      "schema": {
        "backgroundColor": {
          "closure_uid_763713915": {},
          "default": {},
          "is": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "borderEnabled": {
          "closure_uid_763713915": {},
          "default": {},
          "is": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "closure_uid_763713915": {},
        "pano": {
          "closure_uid_763713915": {},
          "default": {},
          "is": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "strokeColor": {
          "closure_uid_763713915": {},
          "default": {},
          "is": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "sdf": {
      "Shader": function () {},
      "closure_uid_763713915": {},
      "schema": {
        "alphaTest": {
          "closure_uid_763713915": {},
          "default": {},
          "is": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "closure_uid_763713915": {},
        "color": {
          "closure_uid_763713915": {},
          "default": {},
          "is": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "map": {
          "closure_uid_763713915": {},
          "default": {},
          "is": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "opacity": {
          "closure_uid_763713915": {},
          "default": {},
          "is": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    },
    "standard": {
      "Shader": function () {},
      "closure_uid_763713915": {},
      "schema": {
        "ambientOcclusionMap": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "ambientOcclusionMapIntensity": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "ambientOcclusionTextureOffset": {
          "closure_uid_763713915": {},
          "default": {
            "closure_uid_763713915": {},
            "x": {},
            "y": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "ambientOcclusionTextureRepeat": {
          "closure_uid_763713915": {},
          "default": {
            "closure_uid_763713915": {},
            "x": {},
            "y": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "closure_uid_763713915": {},
        "color": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "displacementBias": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "displacementMap": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "displacementScale": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "displacementTextureOffset": {
          "closure_uid_763713915": {},
          "default": {
            "closure_uid_763713915": {},
            "x": {},
            "y": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "displacementTextureRepeat": {
          "closure_uid_763713915": {},
          "default": {
            "closure_uid_763713915": {},
            "x": {},
            "y": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "emissive": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "emissiveIntensity": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "envMap": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "fog": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "height": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "metalness": {
          "closure_uid_763713915": {},
          "default": {},
          "max": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "metalnessMap": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "metalnessTextureOffset": {
          "closure_uid_763713915": {},
          "default": {
            "closure_uid_763713915": {},
            "x": {},
            "y": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "metalnessTextureRepeat": {
          "closure_uid_763713915": {},
          "default": {
            "closure_uid_763713915": {},
            "x": {},
            "y": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "normalMap": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "normalScale": {
          "closure_uid_763713915": {},
          "default": {
            "closure_uid_763713915": {},
            "x": {},
            "y": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "normalTextureOffset": {
          "closure_uid_763713915": {},
          "default": {
            "closure_uid_763713915": {},
            "x": {},
            "y": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "normalTextureRepeat": {
          "closure_uid_763713915": {},
          "default": {
            "closure_uid_763713915": {},
            "x": {},
            "y": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "offset": {
          "closure_uid_763713915": {},
          "default": {
            "closure_uid_763713915": {},
            "x": {},
            "y": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "repeat": {
          "closure_uid_763713915": {},
          "default": {
            "closure_uid_763713915": {},
            "x": {},
            "y": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "roughness": {
          "closure_uid_763713915": {},
          "default": {},
          "max": {},
          "min": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "roughnessMap": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "roughnessTextureOffset": {
          "closure_uid_763713915": {},
          "default": {
            "closure_uid_763713915": {},
            "x": {},
            "y": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "roughnessTextureRepeat": {
          "closure_uid_763713915": {},
          "default": {
            "closure_uid_763713915": {},
            "x": {},
            "y": {}
          },
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "sphericalEnvMap": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "src": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "width": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "wireframe": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        },
        "wireframeLinewidth": {
          "closure_uid_763713915": {},
          "default": {},
          "parse": {
            "closure_uid_763713915": {}
          },
          "stringify": {
            "closure_uid_763713915": {}
          },
          "type": {}
        }
      }
    }
  },
  "systems": {
    "camera": function () {},
    "geometry": function () {},
    "light": function () {},
    "material": function () {},
    "shadow": function () {},
    "tracked-controls": function () {}
  },
  "utils": {
    "bind": function () {},
    "checkHeadsetConnected": function () {},
    "clone": function () {},
    "coordinates": {
      "isCoordinate": function () {},
      "isCoordinates": function () {},
      "parse": function () {},
      "regex": {},
      "stringify": {
        "closure_uid_763713915": {}
      },
      "toVector3": function () {}
    },
    "debounce": function () {},
    "debug": {
      "coerce": function () {},
      "colors": {},
      "disable": function () {},
      "enable": function () {},
      "enabled": function () {},
      "formatArgs": function () {},
      "formatters": {
        "j": function () {}
      },
      "load": function () {},
      "log": function () {},
      "names": {},
      "save": function () {},
      "skips": {},
      "storage": {
        "clear": function () {},
        "debug": {},
        "getItem": function () {},
        "key": function () {},
        "length": {},
        "removeItem": function () {},
        "setItem": function () {}
      },
      "useColors": function () {}
    },
    "deepEqual": function () {},
    "device": {
      "PolyfillControls": function () {},
      "checkHasPositionalTracking": function () {},
      "checkHeadsetConnected": {
        "displayName": {}
      },
      "getVRDisplay": function () {},
      "isBrowserEnvironment": {},
      "isGearVR": function () {},
      "isIOS": function () {},
      "isIOSOlderThan10": function () {},
      "isLandscape": function () {},
      "isMobile": function () {},
      "isNodeEnvironment": {},
      "isR7": function () {},
      "isTablet": function () {}
    },
    "diff": function () {},
    "entity": {
      "getComponentProperty": function () {},
      "getComponentPropertyPath": function () {},
      "propertyPathCache": {},
      "setComponentProperty": function () {}
    },
    "extend": function () {},
    "extendDeep": function () {},
    "findAllScenes": function () {},
    "forceCanvasResizeSafariMobile": function () {},
    "getElData": function () {},
    "getUrlParameter": function () {},
    "isGearVR": function () {},
    "isIOS": function () {},
    "isIframed": function () {},
    "isMobile": function () {},
    "material": {
      "handleTextureEvents": function () {},
      "isHLS": function () {},
      "updateDistortionMap": function () {},
      "updateMap": function () {},
      "updateMapMaterialFromData": function () {}
    },
    "objectPool": {
      "clearObject": function () {},
      "createPool": function () {}
    },
    "shouldCaptureKeyEvent": function () {},
    "split": function () {},
    "splitString": function () {},
    "srcLoader": {
      "parseUrl": function () {},
      "validateCubemapSrc": function () {},
      "validateSrc": function () {}
    },
    "styleParser": {
      "parse": function () {},
      "stringify": function () {},
      "toCamelCase": function () {},
      "transformKeysToCamelCase": function () {}
    },
    "throttle": function () {},
    "throttleTick": function () {},
    "trackedControls": {
      "checkControllerPresentAndSetup": function () {},
      "emitIfAxesChanged": function () {},
      "findMatchingController": function () {},
      "isControllerPresent": function () {},
      "onButtonEvent": function () {}
    }
  },
  "version": {}
};
AFRAME.AComponent.prototype = {
  "buildData": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "init": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "remove": function () {},
  "resetProperty": function () {},
  "schema": function () {},
  "stringify": function () {},
  "tick": function () {},
  "tock": function () {},
  "update": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.AEntity.prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.ANode.prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttribute": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "remove": function () {},
  "removeAttribute": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.AScene.prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.THREE.AmbientLight.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isAmbientLight": function () {},
  "isLight": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.AnimationClip.prototype = {
  "optimize": function () {},
  "resetDuration": function () {},
  "trim": function () {}
};
AFRAME.THREE.AnimationMixer.prototype = {
  "_activateAction": function () {},
  "_addInactiveAction": function () {},
  "_addInactiveBinding": function () {},
  "_bindAction": function () {},
  "_controlInterpolantsResultBuffer": function () {},
  "_deactivateAction": function () {},
  "_initMemoryManager": function () {},
  "_isActiveAction": function () {},
  "_lendAction": function () {},
  "_lendBinding": function () {},
  "_lendControlInterpolant": function () {},
  "_removeInactiveAction": function () {},
  "_removeInactiveBinding": function () {},
  "_removeInactiveBindingsForAction": function () {},
  "_takeBackAction": function () {},
  "_takeBackBinding": function () {},
  "_takeBackControlInterpolant": function () {},
  "addEventListener": function () {},
  "clipAction": function () {},
  "constructor": function () {},
  "dispatchEvent": function () {},
  "existingAction": function () {},
  "getRoot": function () {},
  "hasEventListener": function () {},
  "removeEventListener": function () {},
  "stopAllAction": function () {},
  "uncacheAction": function () {},
  "uncacheClip": function () {},
  "uncacheRoot": function () {},
  "update": function () {}
};
AFRAME.THREE.AnimationObjectGroup.prototype = {
  "add": function () {},
  "isAnimationObjectGroup": function () {},
  "remove": function () {},
  "subscribe_": function () {},
  "uncache": function () {},
  "unsubscribe_": function () {}
};
AFRAME.THREE.ArcCurve.prototype = {
  "clone": function () {},
  "computeFrenetFrames": function () {},
  "constructor": function () {},
  "copy": function () {},
  "fromJSON": function () {},
  "getLength": function () {},
  "getLengths": function () {},
  "getPoint": function () {},
  "getPointAt": function () {},
  "getPoints": function () {},
  "getSpacedPoints": function () {},
  "getTangent": function () {},
  "getTangentAt": function () {},
  "getUtoTmapping": function () {},
  "isArcCurve": function () {},
  "isEllipseCurve": function () {},
  "toJSON": function () {},
  "updateArcLengths": function () {}
};
AFRAME.THREE.ArrayCamera.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clearViewOffset": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getEffectiveFOV": function () {},
  "getFilmHeight": function () {},
  "getFilmWidth": function () {},
  "getFocalLength": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isArrayCamera": function () {},
  "isCamera": function () {},
  "isObject3D": function () {},
  "isPerspectiveCamera": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setFocalLength": function () {},
  "setLens": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "setViewOffset": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "updateProjectionMatrix": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.ArrowHelper.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setColor": function () {},
  "setDirection": function () {},
  "setLength": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.Audio.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "connect": function () {},
  "constructor": function () {},
  "copy": function () {},
  "disconnect": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getFilter": function () {},
  "getFilters": function () {},
  "getLoop": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getOutput": function () {},
  "getPlaybackRate": function () {},
  "getVolume": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isObject3D": function () {},
  "load": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "onEnded": function () {},
  "pause": function () {},
  "play": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setBuffer": function () {},
  "setFilter": function () {},
  "setFilters": function () {},
  "setLoop": function () {},
  "setNodeSource": function () {},
  "setPlaybackRate": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "setVolume": function () {},
  "stop": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.AudioAnalyser.prototype = {
  "getAverageFrequency": function () {},
  "getData": function () {},
  "getFrequencyData": function () {}
};
AFRAME.THREE.AudioListener.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getFilter": function () {},
  "getInput": function () {},
  "getMasterVolume": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "removeFilter": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setFilter": function () {},
  "setMasterVolume": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.AudioLoader.prototype = {
  "load": function () {}
};
AFRAME.THREE.AxesHelper.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "computeLineDistances": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isLine": function () {},
  "isLineSegments": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.Bone.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isBone": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.BooleanKeyframeTrack.prototype = {
  "DefaultInterpolation": function () {},
  "InterpolantFactoryMethodDiscrete": function () {},
  "InterpolantFactoryMethodLinear": function () {},
  "InterpolantFactoryMethodSmooth": function () {},
  "TimeBufferType": function () {},
  "ValueBufferType": function () {},
  "ValueTypeName": function () {},
  "constructor": function () {},
  "getInterpolation": function () {},
  "getValueSize": function () {},
  "optimize": function () {},
  "scale": function () {},
  "setInterpolation": function () {},
  "shift": function () {},
  "trim": function () {},
  "validate": function () {}
};
AFRAME.THREE.Box2.prototype = {
  "center": function () {},
  "clampPoint": function () {},
  "clone": function () {},
  "containsBox": function () {},
  "containsPoint": function () {},
  "copy": function () {},
  "distanceToPoint": function () {},
  "empty": function () {},
  "equals": function () {},
  "expandByPoint": function () {},
  "expandByScalar": function () {},
  "expandByVector": function () {},
  "getCenter": function () {},
  "getParameter": function () {},
  "getSize": function () {},
  "intersect": function () {},
  "intersectsBox": function () {},
  "isEmpty": function () {},
  "isIntersectionBox": function () {},
  "makeEmpty": function () {},
  "set": function () {},
  "setFromCenterAndSize": function () {},
  "setFromPoints": function () {},
  "size": function () {},
  "translate": function () {},
  "union": function () {}
};
AFRAME.THREE.Box3.prototype = {
  "applyMatrix4": function () {},
  "center": function () {},
  "clampPoint": function () {},
  "clone": function () {},
  "containsBox": function () {},
  "containsPoint": function () {},
  "copy": function () {},
  "distanceToPoint": function () {},
  "empty": function () {},
  "equals": function () {},
  "expandByObject": function () {},
  "expandByPoint": function () {},
  "expandByScalar": function () {},
  "expandByVector": function () {},
  "getBoundingSphere": function () {},
  "getCenter": function () {},
  "getParameter": function () {},
  "getSize": function () {},
  "intersect": function () {},
  "intersectsBox": function () {},
  "intersectsPlane": function () {},
  "intersectsSphere": function () {},
  "intersectsTriangle": function () {},
  "isBox3": function () {},
  "isEmpty": function () {},
  "isIntersectionBox": function () {},
  "isIntersectionSphere": function () {},
  "makeEmpty": function () {},
  "set": function () {},
  "setFromArray": function () {},
  "setFromBufferAttribute": function () {},
  "setFromCenterAndSize": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "size": function () {},
  "translate": function () {},
  "union": function () {}
};
AFRAME.THREE.Box3Helper.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "computeLineDistances": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isLine": function () {},
  "isLineSegments": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.BoxBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.BoxGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.BoxHelper.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "computeLineDistances": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isLine": function () {},
  "isLineSegments": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setFromObject": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "update": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.BufferAttribute.prototype = {
  "clone": function () {},
  "copy": function () {},
  "copyArray": function () {},
  "copyAt": function () {},
  "copyColorsArray": function () {},
  "copyIndicesArray": function () {},
  "copyVector2sArray": function () {},
  "copyVector3sArray": function () {},
  "copyVector4sArray": function () {},
  "getW": function () {},
  "getX": function () {},
  "getY": function () {},
  "getZ": function () {},
  "isBufferAttribute": function () {},
  "onUpload": function () {},
  "set": function () {},
  "setArray": function () {},
  "setDynamic": function () {},
  "setW": function () {},
  "setX": function () {},
  "setXY": function () {},
  "setXYZ": function () {},
  "setXYZW": function () {},
  "setY": function () {},
  "setZ": function () {}
};
AFRAME.THREE.BufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.BufferGeometryLoader.prototype = {
  "load": function () {},
  "parse": function () {}
};
AFRAME.THREE.Camera.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isCamera": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.CameraHelper.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "computeLineDistances": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isLine": function () {},
  "isLineSegments": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "update": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.CanvasTexture.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isTexture": function () {},
  "removeEventListener": function () {},
  "toJSON": function () {},
  "transformUv": function () {}
};
AFRAME.THREE.CatmullRomCurve3.prototype = {
  "clone": function () {},
  "computeFrenetFrames": function () {},
  "constructor": function () {},
  "copy": function () {},
  "fromJSON": function () {},
  "getLength": function () {},
  "getLengths": function () {},
  "getPoint": function () {},
  "getPointAt": function () {},
  "getPoints": function () {},
  "getSpacedPoints": function () {},
  "getTangent": function () {},
  "getTangentAt": function () {},
  "getUtoTmapping": function () {},
  "isCatmullRomCurve3": function () {},
  "toJSON": function () {},
  "updateArcLengths": function () {}
};
AFRAME.THREE.CircleBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.CircleGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.Clock.prototype = {
  "getDelta": function () {},
  "getElapsedTime": function () {},
  "start": function () {},
  "stop": function () {}
};
AFRAME.THREE.ClosedSplineCurve3.prototype = {
  "clone": function () {},
  "computeFrenetFrames": function () {},
  "constructor": function () {},
  "copy": function () {},
  "fromJSON": function () {},
  "getLength": function () {},
  "getLengths": function () {},
  "getPoint": function () {},
  "getPointAt": function () {},
  "getPoints": function () {},
  "getSpacedPoints": function () {},
  "getTangent": function () {},
  "getTangentAt": function () {},
  "getUtoTmapping": function () {},
  "isCatmullRomCurve3": function () {},
  "toJSON": function () {},
  "updateArcLengths": function () {}
};
AFRAME.THREE.ColladaLoader.prototype = {
  "constructor": function () {},
  "crossOrigin": function () {},
  "load": function () {},
  "options": function () {},
  "parse": function () {},
  "setCrossOrigin": function () {},
  "setPath": function () {}
};
AFRAME.THREE.Color.prototype = {
  "add": function () {},
  "addColors": function () {},
  "addScalar": function () {},
  "b": function () {},
  "clone": function () {},
  "convertGammaToLinear": function () {},
  "convertLinearToGamma": function () {},
  "copy": function () {},
  "copyGammaToLinear": function () {},
  "copyLinearToGamma": function () {},
  "equals": function () {},
  "fromArray": function () {},
  "g": function () {},
  "getHSL": function () {},
  "getHex": function () {},
  "getHexString": function () {},
  "getStyle": function () {},
  "isColor": function () {},
  "lerp": function () {},
  "multiply": function () {},
  "multiplyScalar": function () {},
  "offsetHSL": function () {},
  "r": function () {},
  "set": function () {},
  "setHSL": function () {},
  "setHex": function () {},
  "setRGB": function () {},
  "setScalar": function () {},
  "setStyle": function () {},
  "sub": function () {},
  "toArray": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.ColorKeyframeTrack.prototype = {
  "DefaultInterpolation": function () {},
  "InterpolantFactoryMethodDiscrete": function () {},
  "InterpolantFactoryMethodLinear": function () {},
  "InterpolantFactoryMethodSmooth": function () {},
  "TimeBufferType": function () {},
  "ValueBufferType": function () {},
  "ValueTypeName": function () {},
  "constructor": function () {},
  "getInterpolation": function () {},
  "getValueSize": function () {},
  "optimize": function () {},
  "scale": function () {},
  "setInterpolation": function () {},
  "shift": function () {},
  "trim": function () {},
  "validate": function () {}
};
AFRAME.THREE.CompressedTexture.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isCompressedTexture": function () {},
  "isTexture": function () {},
  "removeEventListener": function () {},
  "toJSON": function () {},
  "transformUv": function () {}
};
AFRAME.THREE.CompressedTextureLoader.prototype = {
  "load": function () {},
  "setPath": function () {}
};
AFRAME.THREE.ConeBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.ConeGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.CubeCamera.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateCubeMap": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.CubeGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.CubeTexture.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isCubeTexture": function () {},
  "isTexture": function () {},
  "removeEventListener": function () {},
  "toJSON": function () {},
  "transformUv": function () {}
};
AFRAME.THREE.CubeTextureLoader.prototype = {
  "crossOrigin": function () {},
  "load": function () {},
  "setCrossOrigin": function () {},
  "setPath": function () {}
};
AFRAME.THREE.CubicBezierCurve.prototype = {
  "clone": function () {},
  "computeFrenetFrames": function () {},
  "constructor": function () {},
  "copy": function () {},
  "fromJSON": function () {},
  "getLength": function () {},
  "getLengths": function () {},
  "getPoint": function () {},
  "getPointAt": function () {},
  "getPoints": function () {},
  "getSpacedPoints": function () {},
  "getTangent": function () {},
  "getTangentAt": function () {},
  "getUtoTmapping": function () {},
  "isCubicBezierCurve": function () {},
  "toJSON": function () {},
  "updateArcLengths": function () {}
};
AFRAME.THREE.CubicBezierCurve3.prototype = {
  "clone": function () {},
  "computeFrenetFrames": function () {},
  "constructor": function () {},
  "copy": function () {},
  "fromJSON": function () {},
  "getLength": function () {},
  "getLengths": function () {},
  "getPoint": function () {},
  "getPointAt": function () {},
  "getPoints": function () {},
  "getSpacedPoints": function () {},
  "getTangent": function () {},
  "getTangentAt": function () {},
  "getUtoTmapping": function () {},
  "isCubicBezierCurve3": function () {},
  "toJSON": function () {},
  "updateArcLengths": function () {}
};
AFRAME.THREE.CubicInterpolant.prototype = {
  "DefaultSettings_": function () {},
  "afterEnd_": function () {},
  "beforeStart_": function () {},
  "constructor": function () {},
  "copySampleValue_": function () {},
  "evaluate": function () {},
  "getSettings_": function () {},
  "interpolate_": function () {},
  "intervalChanged_": function () {},
  "settings": function () {}
};
AFRAME.THREE.Curve.prototype = {
  "clone": function () {},
  "computeFrenetFrames": function () {},
  "copy": function () {},
  "fromJSON": function () {},
  "getLength": function () {},
  "getLengths": function () {},
  "getPoint": function () {},
  "getPointAt": function () {},
  "getPoints": function () {},
  "getSpacedPoints": function () {},
  "getTangent": function () {},
  "getTangentAt": function () {},
  "getUtoTmapping": function () {},
  "toJSON": function () {},
  "updateArcLengths": function () {}
};
AFRAME.THREE.CurvePath.prototype = {
  "add": function () {},
  "clone": function () {},
  "closePath": function () {},
  "computeFrenetFrames": function () {},
  "constructor": function () {},
  "copy": function () {},
  "createGeometry": function () {},
  "createPointsGeometry": function () {},
  "createSpacedPointsGeometry": function () {},
  "fromJSON": function () {},
  "getCurveLengths": function () {},
  "getLength": function () {},
  "getLengths": function () {},
  "getPoint": function () {},
  "getPointAt": function () {},
  "getPoints": function () {},
  "getSpacedPoints": function () {},
  "getTangent": function () {},
  "getTangentAt": function () {},
  "getUtoTmapping": function () {},
  "toJSON": function () {},
  "updateArcLengths": function () {}
};
AFRAME.THREE.CylinderBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.CylinderGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.Cylindrical.prototype = {
  "clone": function () {},
  "copy": function () {},
  "set": function () {},
  "setFromVector3": function () {}
};
AFRAME.THREE.DataTexture.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isDataTexture": function () {},
  "isTexture": function () {},
  "removeEventListener": function () {},
  "toJSON": function () {},
  "transformUv": function () {}
};
AFRAME.THREE.DataTextureLoader.prototype = {
  "load": function () {}
};
AFRAME.THREE.DepthTexture.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isDepthTexture": function () {},
  "isTexture": function () {},
  "removeEventListener": function () {},
  "toJSON": function () {},
  "transformUv": function () {}
};
AFRAME.THREE.DirectionalLight.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isDirectionalLight": function () {},
  "isLight": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.DirectionalLightHelper.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "update": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.DirectionalLightShadow.prototype = {
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.DiscreteInterpolant.prototype = {
  "DefaultSettings_": function () {},
  "afterEnd_": function () {},
  "beforeStart_": function () {},
  "constructor": function () {},
  "copySampleValue_": function () {},
  "evaluate": function () {},
  "getSettings_": function () {},
  "interpolate_": function () {},
  "intervalChanged_": function () {},
  "settings": function () {}
};
AFRAME.THREE.DodecahedronBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.DodecahedronGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.EdgesGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.EllipseCurve.prototype = {
  "clone": function () {},
  "computeFrenetFrames": function () {},
  "constructor": function () {},
  "copy": function () {},
  "fromJSON": function () {},
  "getLength": function () {},
  "getLengths": function () {},
  "getPoint": function () {},
  "getPointAt": function () {},
  "getPoints": function () {},
  "getSpacedPoints": function () {},
  "getTangent": function () {},
  "getTangentAt": function () {},
  "getUtoTmapping": function () {},
  "isEllipseCurve": function () {},
  "toJSON": function () {},
  "updateArcLengths": function () {}
};
AFRAME.THREE.Euler.prototype = {
  "clone": function () {},
  "copy": function () {},
  "equals": function () {},
  "fromArray": function () {},
  "isEuler": function () {},
  "onChange": function () {},
  "onChangeCallback": function () {},
  "reorder": function () {},
  "set": function () {},
  "setFromQuaternion": function () {},
  "setFromRotationMatrix": function () {},
  "setFromVector3": function () {},
  "toArray": function () {},
  "toVector3": function () {}
};
AFRAME.THREE.EventDispatcher.prototype = {
  "addEventListener": function () {},
  "dispatchEvent": function () {},
  "hasEventListener": function () {},
  "removeEventListener": function () {}
};
AFRAME.THREE.ExtrudeBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "addShape": function () {},
  "addShapeList": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getArrays": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.ExtrudeGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.Face3.prototype = {
  "clone": function () {},
  "copy": function () {}
};
AFRAME.THREE.FaceNormalsHelper.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "computeLineDistances": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isLine": function () {},
  "isLineSegments": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "update": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.FileLoader.prototype = {
  "load": function () {},
  "setMimeType": function () {},
  "setPath": function () {},
  "setRequestHeader": function () {},
  "setResponseType": function () {},
  "setWithCredentials": function () {}
};
AFRAME.THREE.Float32BufferAttribute.prototype = {
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "copyArray": function () {},
  "copyAt": function () {},
  "copyColorsArray": function () {},
  "copyIndicesArray": function () {},
  "copyVector2sArray": function () {},
  "copyVector3sArray": function () {},
  "copyVector4sArray": function () {},
  "getW": function () {},
  "getX": function () {},
  "getY": function () {},
  "getZ": function () {},
  "isBufferAttribute": function () {},
  "onUpload": function () {},
  "set": function () {},
  "setArray": function () {},
  "setDynamic": function () {},
  "setW": function () {},
  "setX": function () {},
  "setXY": function () {},
  "setXYZ": function () {},
  "setXYZW": function () {},
  "setY": function () {},
  "setZ": function () {}
};
AFRAME.THREE.Float64BufferAttribute.prototype = {
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "copyArray": function () {},
  "copyAt": function () {},
  "copyColorsArray": function () {},
  "copyIndicesArray": function () {},
  "copyVector2sArray": function () {},
  "copyVector3sArray": function () {},
  "copyVector4sArray": function () {},
  "getW": function () {},
  "getX": function () {},
  "getY": function () {},
  "getZ": function () {},
  "isBufferAttribute": function () {},
  "onUpload": function () {},
  "set": function () {},
  "setArray": function () {},
  "setDynamic": function () {},
  "setW": function () {},
  "setX": function () {},
  "setXY": function () {},
  "setXYZ": function () {},
  "setXYZW": function () {},
  "setY": function () {},
  "setZ": function () {}
};
AFRAME.THREE.Fog.prototype = {
  "clone": function () {},
  "isFog": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.FogExp2.prototype = {
  "clone": function () {},
  "isFogExp2": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.Font.prototype = {
  "generateShapes": function () {},
  "isFont": function () {}
};
AFRAME.THREE.FontLoader.prototype = {
  "load": function () {},
  "parse": function () {},
  "setPath": function () {}
};
AFRAME.THREE.Frustum.prototype = {
  "clone": function () {},
  "containsPoint": function () {},
  "copy": function () {},
  "intersectsBox": function () {},
  "intersectsObject": function () {},
  "intersectsSphere": function () {},
  "intersectsSprite": function () {},
  "set": function () {},
  "setFromMatrix": function () {}
};
AFRAME.THREE.GLTFLoader.prototype = {
  "constructor": function () {},
  "crossOrigin": function () {},
  "load": function () {},
  "parse": function () {},
  "setCrossOrigin": function () {},
  "setPath": function () {}
};
AFRAME.THREE.Geometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.GridHelper.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "computeLineDistances": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isLine": function () {},
  "isLineSegments": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setColors": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.Group.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isGroup": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.HemisphereLight.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isHemisphereLight": function () {},
  "isLight": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.HemisphereLightHelper.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "update": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.IcosahedronBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.IcosahedronGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.ImageBitmapLoader.prototype = {
  "constructor": function () {},
  "load": function () {},
  "setCrossOrigin": function () {},
  "setOptions": function () {},
  "setPath": function () {}
};
AFRAME.THREE.ImageLoader.prototype = {
  "crossOrigin": function () {},
  "load": function () {},
  "setCrossOrigin": function () {},
  "setPath": function () {}
};
AFRAME.THREE.ImmediateRenderObject.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isImmediateRenderObject": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.InstancedBufferAttribute.prototype = {
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "copyArray": function () {},
  "copyAt": function () {},
  "copyColorsArray": function () {},
  "copyIndicesArray": function () {},
  "copyVector2sArray": function () {},
  "copyVector3sArray": function () {},
  "copyVector4sArray": function () {},
  "getW": function () {},
  "getX": function () {},
  "getY": function () {},
  "getZ": function () {},
  "isBufferAttribute": function () {},
  "isInstancedBufferAttribute": function () {},
  "onUpload": function () {},
  "set": function () {},
  "setArray": function () {},
  "setDynamic": function () {},
  "setW": function () {},
  "setX": function () {},
  "setXY": function () {},
  "setXYZ": function () {},
  "setXYZW": function () {},
  "setY": function () {},
  "setZ": function () {}
};
AFRAME.THREE.InstancedBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "isInstancedBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.InstancedInterleavedBuffer.prototype = {
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "copyAt": function () {},
  "isInstancedInterleavedBuffer": function () {},
  "isInterleavedBuffer": function () {},
  "onUpload": function () {},
  "set": function () {},
  "setArray": function () {},
  "setDynamic": function () {}
};
AFRAME.THREE.Int16BufferAttribute.prototype = {
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "copyArray": function () {},
  "copyAt": function () {},
  "copyColorsArray": function () {},
  "copyIndicesArray": function () {},
  "copyVector2sArray": function () {},
  "copyVector3sArray": function () {},
  "copyVector4sArray": function () {},
  "getW": function () {},
  "getX": function () {},
  "getY": function () {},
  "getZ": function () {},
  "isBufferAttribute": function () {},
  "onUpload": function () {},
  "set": function () {},
  "setArray": function () {},
  "setDynamic": function () {},
  "setW": function () {},
  "setX": function () {},
  "setXY": function () {},
  "setXYZ": function () {},
  "setXYZW": function () {},
  "setY": function () {},
  "setZ": function () {}
};
AFRAME.THREE.Int32BufferAttribute.prototype = {
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "copyArray": function () {},
  "copyAt": function () {},
  "copyColorsArray": function () {},
  "copyIndicesArray": function () {},
  "copyVector2sArray": function () {},
  "copyVector3sArray": function () {},
  "copyVector4sArray": function () {},
  "getW": function () {},
  "getX": function () {},
  "getY": function () {},
  "getZ": function () {},
  "isBufferAttribute": function () {},
  "onUpload": function () {},
  "set": function () {},
  "setArray": function () {},
  "setDynamic": function () {},
  "setW": function () {},
  "setX": function () {},
  "setXY": function () {},
  "setXYZ": function () {},
  "setXYZW": function () {},
  "setY": function () {},
  "setZ": function () {}
};
AFRAME.THREE.Int8BufferAttribute.prototype = {
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "copyArray": function () {},
  "copyAt": function () {},
  "copyColorsArray": function () {},
  "copyIndicesArray": function () {},
  "copyVector2sArray": function () {},
  "copyVector3sArray": function () {},
  "copyVector4sArray": function () {},
  "getW": function () {},
  "getX": function () {},
  "getY": function () {},
  "getZ": function () {},
  "isBufferAttribute": function () {},
  "onUpload": function () {},
  "set": function () {},
  "setArray": function () {},
  "setDynamic": function () {},
  "setW": function () {},
  "setX": function () {},
  "setXY": function () {},
  "setXYZ": function () {},
  "setXYZW": function () {},
  "setY": function () {},
  "setZ": function () {}
};
AFRAME.THREE.InterleavedBuffer.prototype = {
  "clone": function () {},
  "copy": function () {},
  "copyAt": function () {},
  "isInterleavedBuffer": function () {},
  "onUpload": function () {},
  "set": function () {},
  "setArray": function () {},
  "setDynamic": function () {}
};
AFRAME.THREE.InterleavedBufferAttribute.prototype = {
  "getW": function () {},
  "getX": function () {},
  "getY": function () {},
  "getZ": function () {},
  "isInterleavedBufferAttribute": function () {},
  "setW": function () {},
  "setX": function () {},
  "setXY": function () {},
  "setXYZ": function () {},
  "setXYZW": function () {},
  "setY": function () {},
  "setZ": function () {}
};
AFRAME.THREE.Interpolant.prototype = {
  "DefaultSettings_": function () {},
  "afterEnd_": function () {},
  "beforeStart_": function () {},
  "copySampleValue_": function () {},
  "evaluate": function () {},
  "getSettings_": function () {},
  "interpolate_": function () {},
  "intervalChanged_": function () {},
  "settings": function () {}
};
AFRAME.THREE.JSONLoader.prototype = {
  "load": function () {},
  "parse": function () {},
  "setTexturePath": function () {}
};
AFRAME.THREE.KeyframeTrack.prototype = {
  "DefaultInterpolation": function () {},
  "InterpolantFactoryMethodDiscrete": function () {},
  "InterpolantFactoryMethodLinear": function () {},
  "InterpolantFactoryMethodSmooth": function () {},
  "TimeBufferType": function () {},
  "ValueBufferType": function () {},
  "getInterpolation": function () {},
  "getValueSize": function () {},
  "optimize": function () {},
  "scale": function () {},
  "setInterpolation": function () {},
  "shift": function () {},
  "trim": function () {},
  "validate": function () {}
};
AFRAME.THREE.LOD.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "addLevel": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getObjectForDistance": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "update": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.LatheBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.LatheGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.Layers.prototype = {
  "disable": function () {},
  "enable": function () {},
  "set": function () {},
  "test": function () {},
  "toggle": function () {}
};
AFRAME.THREE.Light.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isLight": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.LightShadow.prototype = {
  "clone": function () {},
  "copy": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.Line.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "computeLineDistances": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isLine": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.Line3.prototype = {
  "applyMatrix4": function () {},
  "at": function () {},
  "center": function () {},
  "clone": function () {},
  "closestPointToPoint": function () {},
  "closestPointToPointParameter": function () {},
  "copy": function () {},
  "delta": function () {},
  "distance": function () {},
  "distanceSq": function () {},
  "equals": function () {},
  "getCenter": function () {},
  "set": function () {}
};
AFRAME.THREE.LineBasicMaterial.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isLineBasicMaterial": function () {},
  "isMaterial": function () {},
  "onBeforeCompile": function () {},
  "removeEventListener": function () {},
  "setValues": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.LineCurve.prototype = {
  "clone": function () {},
  "computeFrenetFrames": function () {},
  "constructor": function () {},
  "copy": function () {},
  "fromJSON": function () {},
  "getLength": function () {},
  "getLengths": function () {},
  "getPoint": function () {},
  "getPointAt": function () {},
  "getPoints": function () {},
  "getSpacedPoints": function () {},
  "getTangent": function () {},
  "getTangentAt": function () {},
  "getUtoTmapping": function () {},
  "isLineCurve": function () {},
  "toJSON": function () {},
  "updateArcLengths": function () {}
};
AFRAME.THREE.LineCurve3.prototype = {
  "clone": function () {},
  "computeFrenetFrames": function () {},
  "constructor": function () {},
  "copy": function () {},
  "fromJSON": function () {},
  "getLength": function () {},
  "getLengths": function () {},
  "getPoint": function () {},
  "getPointAt": function () {},
  "getPoints": function () {},
  "getSpacedPoints": function () {},
  "getTangent": function () {},
  "getTangentAt": function () {},
  "getUtoTmapping": function () {},
  "isLineCurve3": function () {},
  "toJSON": function () {},
  "updateArcLengths": function () {}
};
AFRAME.THREE.LineDashedMaterial.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isLineBasicMaterial": function () {},
  "isLineDashedMaterial": function () {},
  "isMaterial": function () {},
  "onBeforeCompile": function () {},
  "removeEventListener": function () {},
  "setValues": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.LineLoop.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "computeLineDistances": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isLine": function () {},
  "isLineLoop": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.LineSegments.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "computeLineDistances": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isLine": function () {},
  "isLineSegments": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.LinearInterpolant.prototype = {
  "DefaultSettings_": function () {},
  "afterEnd_": function () {},
  "beforeStart_": function () {},
  "constructor": function () {},
  "copySampleValue_": function () {},
  "evaluate": function () {},
  "getSettings_": function () {},
  "interpolate_": function () {},
  "intervalChanged_": function () {},
  "settings": function () {}
};
AFRAME.THREE.Loader.prototype = {
  "createMaterial": function () {},
  "crossOrigin": function () {},
  "extractUrlBase": function () {},
  "initMaterials": function () {}
};
AFRAME.THREE.MTLLoader.prototype = {
  "constructor": function () {},
  "crossOrigin": function () {},
  "load": function () {},
  "parse": function () {},
  "setBaseUrl": function () {},
  "setCrossOrigin": function () {},
  "setMaterialOptions": function () {},
  "setPath": function () {},
  "setTexturePath": function () {}
};
AFRAME.THREE.MTLLoader.MaterialCreator.prototype = {
  "constructor": function () {},
  "convert": function () {},
  "create": function () {},
  "createMaterial_": function () {},
  "crossOrigin": function () {},
  "getAsArray": function () {},
  "getIndex": function () {},
  "getTextureParams": function () {},
  "loadTexture": function () {},
  "preload": function () {},
  "setCrossOrigin": function () {},
  "setManager": function () {},
  "setMaterials": function () {}
};
AFRAME.THREE.Material.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isMaterial": function () {},
  "onBeforeCompile": function () {},
  "removeEventListener": function () {},
  "setValues": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.MaterialLoader.prototype = {
  "load": function () {},
  "parse": function () {},
  "setTextures": function () {}
};
AFRAME.THREE.Matrix3.prototype = {
  "applyToBuffer": function () {},
  "applyToBufferAttribute": function () {},
  "applyToVector3Array": function () {},
  "clone": function () {},
  "copy": function () {},
  "determinant": function () {},
  "equals": function () {},
  "flattenToArrayOffset": function () {},
  "fromArray": function () {},
  "getInverse": function () {},
  "getNormalMatrix": function () {},
  "identity": function () {},
  "isMatrix3": function () {},
  "multiply": function () {},
  "multiplyMatrices": function () {},
  "multiplyScalar": function () {},
  "multiplyVector3": function () {},
  "multiplyVector3Array": function () {},
  "premultiply": function () {},
  "rotate": function () {},
  "scale": function () {},
  "set": function () {},
  "setFromMatrix4": function () {},
  "setUvTransform": function () {},
  "toArray": function () {},
  "translate": function () {},
  "transpose": function () {},
  "transposeIntoArray": function () {}
};
AFRAME.THREE.Matrix4.prototype = {
  "applyToBuffer": function () {},
  "applyToBufferAttribute": function () {},
  "applyToVector3Array": function () {},
  "clone": function () {},
  "compose": function () {},
  "copy": function () {},
  "copyPosition": function () {},
  "crossVector": function () {},
  "decompose": function () {},
  "determinant": function () {},
  "equals": function () {},
  "extractBasis": function () {},
  "extractPosition": function () {},
  "extractRotation": function () {},
  "flattenToArrayOffset": function () {},
  "fromArray": function () {},
  "getInverse": function () {},
  "getMaxScaleOnAxis": function () {},
  "getPosition": function () {},
  "identity": function () {},
  "isMatrix4": function () {},
  "lookAt": function () {},
  "makeBasis": function () {},
  "makeFrustum": function () {},
  "makeOrthographic": function () {},
  "makePerspective": function () {},
  "makeRotationAxis": function () {},
  "makeRotationFromEuler": function () {},
  "makeRotationFromQuaternion": function () {},
  "makeRotationX": function () {},
  "makeRotationY": function () {},
  "makeRotationZ": function () {},
  "makeScale": function () {},
  "makeShear": function () {},
  "makeTranslation": function () {},
  "multiply": function () {},
  "multiplyMatrices": function () {},
  "multiplyScalar": function () {},
  "multiplyToArray": function () {},
  "multiplyVector3": function () {},
  "multiplyVector3Array": function () {},
  "multiplyVector4": function () {},
  "premultiply": function () {},
  "rotateAxis": function () {},
  "rotateByAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "set": function () {},
  "setPosition": function () {},
  "setRotationFromQuaternion": function () {},
  "toArray": function () {},
  "translate": function () {},
  "transpose": function () {}
};
AFRAME.THREE.Mesh.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isMesh": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setDrawMode": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "updateMorphTargets": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.MeshBasicMaterial.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isMaterial": function () {},
  "isMeshBasicMaterial": function () {},
  "onBeforeCompile": function () {},
  "removeEventListener": function () {},
  "setValues": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.MeshDepthMaterial.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isMaterial": function () {},
  "isMeshDepthMaterial": function () {},
  "onBeforeCompile": function () {},
  "removeEventListener": function () {},
  "setValues": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.MeshDistanceMaterial.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isMaterial": function () {},
  "isMeshDistanceMaterial": function () {},
  "onBeforeCompile": function () {},
  "removeEventListener": function () {},
  "setValues": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.MeshLambertMaterial.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isMaterial": function () {},
  "isMeshLambertMaterial": function () {},
  "onBeforeCompile": function () {},
  "removeEventListener": function () {},
  "setValues": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.MeshNormalMaterial.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isMaterial": function () {},
  "isMeshNormalMaterial": function () {},
  "onBeforeCompile": function () {},
  "removeEventListener": function () {},
  "setValues": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.MeshPhongMaterial.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isMaterial": function () {},
  "isMeshPhongMaterial": function () {},
  "onBeforeCompile": function () {},
  "removeEventListener": function () {},
  "setValues": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.MeshPhysicalMaterial.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isMaterial": function () {},
  "isMeshPhysicalMaterial": function () {},
  "isMeshStandardMaterial": function () {},
  "onBeforeCompile": function () {},
  "removeEventListener": function () {},
  "setValues": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.MeshStandardMaterial.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isMaterial": function () {},
  "isMeshStandardMaterial": function () {},
  "onBeforeCompile": function () {},
  "removeEventListener": function () {},
  "setValues": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.MeshToonMaterial.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isMaterial": function () {},
  "isMeshPhongMaterial": function () {},
  "isMeshToonMaterial": function () {},
  "onBeforeCompile": function () {},
  "removeEventListener": function () {},
  "setValues": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.NumberKeyframeTrack.prototype = {
  "DefaultInterpolation": function () {},
  "InterpolantFactoryMethodDiscrete": function () {},
  "InterpolantFactoryMethodLinear": function () {},
  "InterpolantFactoryMethodSmooth": function () {},
  "TimeBufferType": function () {},
  "ValueBufferType": function () {},
  "ValueTypeName": function () {},
  "constructor": function () {},
  "getInterpolation": function () {},
  "getValueSize": function () {},
  "optimize": function () {},
  "scale": function () {},
  "setInterpolation": function () {},
  "shift": function () {},
  "trim": function () {},
  "validate": function () {}
};
AFRAME.THREE.OBJLoader.prototype = {
  "constructor": function () {},
  "crossOrigin": function () {},
  "load": function () {},
  "parse": function () {},
  "setMaterials": function () {},
  "setPath": function () {}
};
AFRAME.THREE.Object3D.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.ObjectLoader.prototype = {
  "load": function () {},
  "parse": function () {},
  "parseAnimations": function () {},
  "parseGeometries": function () {},
  "parseImages": function () {},
  "parseMaterials": function () {},
  "parseObject": function () {},
  "parseShape": function () {},
  "parseTextures": function () {},
  "setCrossOrigin": function () {},
  "setTexturePath": function () {}
};
AFRAME.THREE.OctahedronBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.OctahedronGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.OrthographicCamera.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clearViewOffset": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isCamera": function () {},
  "isObject3D": function () {},
  "isOrthographicCamera": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "setViewOffset": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "updateProjectionMatrix": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.ParametricBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.ParametricGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.Path.prototype = {
  "absarc": function () {},
  "absellipse": function () {},
  "add": function () {},
  "arc": function () {},
  "bezierCurveTo": function () {},
  "clone": function () {},
  "closePath": function () {},
  "computeFrenetFrames": function () {},
  "constructor": function () {},
  "copy": function () {},
  "createGeometry": function () {},
  "createPointsGeometry": function () {},
  "createSpacedPointsGeometry": function () {},
  "ellipse": function () {},
  "fromJSON": function () {},
  "fromPoints": function () {},
  "getCurveLengths": function () {},
  "getLength": function () {},
  "getLengths": function () {},
  "getPoint": function () {},
  "getPointAt": function () {},
  "getPoints": function () {},
  "getSpacedPoints": function () {},
  "getTangent": function () {},
  "getTangentAt": function () {},
  "getUtoTmapping": function () {},
  "lineTo": function () {},
  "moveTo": function () {},
  "quadraticCurveTo": function () {},
  "setFromPoints": function () {},
  "splineThru": function () {},
  "toJSON": function () {},
  "updateArcLengths": function () {}
};
AFRAME.THREE.PerspectiveCamera.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clearViewOffset": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getEffectiveFOV": function () {},
  "getFilmHeight": function () {},
  "getFilmWidth": function () {},
  "getFocalLength": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isCamera": function () {},
  "isObject3D": function () {},
  "isPerspectiveCamera": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setFocalLength": function () {},
  "setLens": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "setViewOffset": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "updateProjectionMatrix": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.Plane.prototype = {
  "applyMatrix4": function () {},
  "clone": function () {},
  "coplanarPoint": function () {},
  "copy": function () {},
  "distanceToPoint": function () {},
  "distanceToSphere": function () {},
  "equals": function () {},
  "intersectLine": function () {},
  "intersectsBox": function () {},
  "intersectsLine": function () {},
  "intersectsSphere": function () {},
  "isIntersectionLine": function () {},
  "negate": function () {},
  "normalize": function () {},
  "projectPoint": function () {},
  "set": function () {},
  "setComponents": function () {},
  "setFromCoplanarPoints": function () {},
  "setFromNormalAndCoplanarPoint": function () {},
  "translate": function () {}
};
AFRAME.THREE.PlaneBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.PlaneGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.PlaneHelper.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "computeLineDistances": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isLine": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.PointLight.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isLight": function () {},
  "isObject3D": function () {},
  "isPointLight": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.PointLightHelper.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isMesh": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setDrawMode": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "update": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "updateMorphTargets": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.Points.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isObject3D": function () {},
  "isPoints": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.PointsMaterial.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isMaterial": function () {},
  "isPointsMaterial": function () {},
  "onBeforeCompile": function () {},
  "removeEventListener": function () {},
  "setValues": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.PolarGridHelper.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "computeLineDistances": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isLine": function () {},
  "isLineSegments": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.PolyhedronBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.PolyhedronGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.PositionalAudio.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "connect": function () {},
  "constructor": function () {},
  "copy": function () {},
  "disconnect": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getDistanceModel": function () {},
  "getFilter": function () {},
  "getFilters": function () {},
  "getLoop": function () {},
  "getMaxDistance": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getOutput": function () {},
  "getPlaybackRate": function () {},
  "getRefDistance": function () {},
  "getRolloffFactor": function () {},
  "getVolume": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isObject3D": function () {},
  "load": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "onEnded": function () {},
  "pause": function () {},
  "play": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setBuffer": function () {},
  "setDistanceModel": function () {},
  "setFilter": function () {},
  "setFilters": function () {},
  "setLoop": function () {},
  "setMaxDistance": function () {},
  "setNodeSource": function () {},
  "setPlaybackRate": function () {},
  "setRefDistance": function () {},
  "setRolloffFactor": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "setVolume": function () {},
  "stop": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.PropertyBinding.prototype = {
  "BindingType": function () {},
  "GetterByBindingType": function () {},
  "SetterByBindingTypeAndVersioning": function () {},
  "Versioning": function () {},
  "_getValue_unavailable": function () {},
  "_getValue_unbound": function () {},
  "_setValue_unavailable": function () {},
  "_setValue_unbound": function () {},
  "bind": function () {},
  "getValue": function () {},
  "setValue": function () {},
  "unbind": function () {}
};
AFRAME.THREE.PropertyBinding.Composite.prototype = {
  "bind": function () {},
  "getValue": function () {},
  "setValue": function () {},
  "unbind": function () {}
};
AFRAME.THREE.PropertyMixer.prototype = {
  "_lerp": function () {},
  "_select": function () {},
  "_slerp": function () {},
  "accumulate": function () {},
  "apply": function () {},
  "restoreOriginalState": function () {},
  "saveOriginalState": function () {}
};
AFRAME.THREE.QuadraticBezierCurve.prototype = {
  "clone": function () {},
  "computeFrenetFrames": function () {},
  "constructor": function () {},
  "copy": function () {},
  "fromJSON": function () {},
  "getLength": function () {},
  "getLengths": function () {},
  "getPoint": function () {},
  "getPointAt": function () {},
  "getPoints": function () {},
  "getSpacedPoints": function () {},
  "getTangent": function () {},
  "getTangentAt": function () {},
  "getUtoTmapping": function () {},
  "isQuadraticBezierCurve": function () {},
  "toJSON": function () {},
  "updateArcLengths": function () {}
};
AFRAME.THREE.QuadraticBezierCurve3.prototype = {
  "clone": function () {},
  "computeFrenetFrames": function () {},
  "constructor": function () {},
  "copy": function () {},
  "fromJSON": function () {},
  "getLength": function () {},
  "getLengths": function () {},
  "getPoint": function () {},
  "getPointAt": function () {},
  "getPoints": function () {},
  "getSpacedPoints": function () {},
  "getTangent": function () {},
  "getTangentAt": function () {},
  "getUtoTmapping": function () {},
  "isQuadraticBezierCurve3": function () {},
  "toJSON": function () {},
  "updateArcLengths": function () {}
};
AFRAME.THREE.Quaternion.prototype = {
  "clone": function () {},
  "conjugate": function () {},
  "copy": function () {},
  "dot": function () {},
  "equals": function () {},
  "fromArray": function () {},
  "inverse": function () {},
  "length": function () {},
  "lengthSq": function () {},
  "multiply": function () {},
  "multiplyQuaternions": function () {},
  "multiplyVector3": function () {},
  "normalize": function () {},
  "onChange": function () {},
  "onChangeCallback": function () {},
  "premultiply": function () {},
  "set": function () {},
  "setFromAxisAngle": function () {},
  "setFromEuler": function () {},
  "setFromRotationMatrix": function () {},
  "setFromUnitVectors": function () {},
  "slerp": function () {},
  "toArray": function () {}
};
AFRAME.THREE.QuaternionKeyframeTrack.prototype = {
  "DefaultInterpolation": function () {},
  "InterpolantFactoryMethodDiscrete": function () {},
  "InterpolantFactoryMethodLinear": function () {},
  "InterpolantFactoryMethodSmooth": function () {},
  "TimeBufferType": function () {},
  "ValueBufferType": function () {},
  "ValueTypeName": function () {},
  "constructor": function () {},
  "getInterpolation": function () {},
  "getValueSize": function () {},
  "optimize": function () {},
  "scale": function () {},
  "setInterpolation": function () {},
  "shift": function () {},
  "trim": function () {},
  "validate": function () {}
};
AFRAME.THREE.QuaternionLinearInterpolant.prototype = {
  "DefaultSettings_": function () {},
  "afterEnd_": function () {},
  "beforeStart_": function () {},
  "constructor": function () {},
  "copySampleValue_": function () {},
  "evaluate": function () {},
  "getSettings_": function () {},
  "interpolate_": function () {},
  "intervalChanged_": function () {},
  "settings": function () {}
};
AFRAME.THREE.RawShaderMaterial.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isMaterial": function () {},
  "isRawShaderMaterial": function () {},
  "isShaderMaterial": function () {},
  "onBeforeCompile": function () {},
  "removeEventListener": function () {},
  "setValues": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.Ray.prototype = {
  "applyMatrix4": function () {},
  "at": function () {},
  "clone": function () {},
  "closestPointToPoint": function () {},
  "copy": function () {},
  "distanceSqToPoint": function () {},
  "distanceSqToSegment": function () {},
  "distanceToPlane": function () {},
  "distanceToPoint": function () {},
  "equals": function () {},
  "intersectBox": function () {},
  "intersectPlane": function () {},
  "intersectSphere": function () {},
  "intersectTriangle": function () {},
  "intersectsBox": function () {},
  "intersectsPlane": function () {},
  "intersectsSphere": function () {},
  "isIntersectionBox": function () {},
  "isIntersectionPlane": function () {},
  "isIntersectionSphere": function () {},
  "lookAt": function () {},
  "recast": function () {},
  "set": function () {}
};
AFRAME.THREE.Raycaster.prototype = {
  "intersectObject": function () {},
  "intersectObjects": function () {},
  "linePrecision": function () {},
  "set": function () {},
  "setFromCamera": function () {}
};
AFRAME.THREE.RectAreaLight.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isLight": function () {},
  "isObject3D": function () {},
  "isRectAreaLight": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.RectAreaLightHelper.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "update": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.RingBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.RingGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.Scene.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.ShaderMaterial.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isMaterial": function () {},
  "isShaderMaterial": function () {},
  "onBeforeCompile": function () {},
  "removeEventListener": function () {},
  "setValues": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.ShadowMaterial.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isMaterial": function () {},
  "isShadowMaterial": function () {},
  "onBeforeCompile": function () {},
  "removeEventListener": function () {},
  "setValues": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.Shape.prototype = {
  "absarc": function () {},
  "absellipse": function () {},
  "add": function () {},
  "arc": function () {},
  "bezierCurveTo": function () {},
  "clone": function () {},
  "closePath": function () {},
  "computeFrenetFrames": function () {},
  "constructor": function () {},
  "copy": function () {},
  "createGeometry": function () {},
  "createPointsGeometry": function () {},
  "createSpacedPointsGeometry": function () {},
  "ellipse": function () {},
  "extractAllPoints": function () {},
  "extractPoints": function () {},
  "extrude": function () {},
  "fromJSON": function () {},
  "fromPoints": function () {},
  "getCurveLengths": function () {},
  "getLength": function () {},
  "getLengths": function () {},
  "getPoint": function () {},
  "getPointAt": function () {},
  "getPoints": function () {},
  "getPointsHoles": function () {},
  "getSpacedPoints": function () {},
  "getTangent": function () {},
  "getTangentAt": function () {},
  "getUtoTmapping": function () {},
  "lineTo": function () {},
  "makeGeometry": function () {},
  "moveTo": function () {},
  "quadraticCurveTo": function () {},
  "setFromPoints": function () {},
  "splineThru": function () {},
  "toJSON": function () {},
  "updateArcLengths": function () {}
};
AFRAME.THREE.ShapeBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.ShapeGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.ShapePath.prototype = {
  "bezierCurveTo": function () {},
  "lineTo": function () {},
  "moveTo": function () {},
  "quadraticCurveTo": function () {},
  "splineThru": function () {},
  "toShapes": function () {}
};
AFRAME.THREE.Skeleton.prototype = {
  "calculateInverses": function () {},
  "clone": function () {},
  "getBoneByName": function () {},
  "pose": function () {},
  "update": function () {}
};
AFRAME.THREE.SkeletonHelper.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "computeLineDistances": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isLine": function () {},
  "isLineSegments": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "update": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.SkinnedMesh.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "bind": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "initBones": function () {},
  "isMesh": function () {},
  "isObject3D": function () {},
  "isSkinnedMesh": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "normalizeSkinWeights": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "pose": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setDrawMode": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "updateMorphTargets": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.Sphere.prototype = {
  "applyMatrix4": function () {},
  "clampPoint": function () {},
  "clone": function () {},
  "containsPoint": function () {},
  "copy": function () {},
  "distanceToPoint": function () {},
  "empty": function () {},
  "equals": function () {},
  "getBoundingBox": function () {},
  "intersectsBox": function () {},
  "intersectsPlane": function () {},
  "intersectsSphere": function () {},
  "set": function () {},
  "setFromPoints": function () {},
  "translate": function () {}
};
AFRAME.THREE.SphereBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.SphereGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.Spherical.prototype = {
  "clone": function () {},
  "copy": function () {},
  "makeSafe": function () {},
  "set": function () {},
  "setFromVector3": function () {}
};
AFRAME.THREE.Spline.prototype = {
  "clone": function () {},
  "computeFrenetFrames": function () {},
  "constructor": function () {},
  "copy": function () {},
  "fromJSON": function () {},
  "getControlPointsArray": function () {},
  "getLength": function () {},
  "getLengths": function () {},
  "getPoint": function () {},
  "getPointAt": function () {},
  "getPoints": function () {},
  "getSpacedPoints": function () {},
  "getTangent": function () {},
  "getTangentAt": function () {},
  "getUtoTmapping": function () {},
  "initFromArray": function () {},
  "isCatmullRomCurve3": function () {},
  "reparametrizeByArcLength": function () {},
  "toJSON": function () {},
  "updateArcLengths": function () {}
};
AFRAME.THREE.SplineCurve.prototype = {
  "clone": function () {},
  "computeFrenetFrames": function () {},
  "constructor": function () {},
  "copy": function () {},
  "fromJSON": function () {},
  "getLength": function () {},
  "getLengths": function () {},
  "getPoint": function () {},
  "getPointAt": function () {},
  "getPoints": function () {},
  "getSpacedPoints": function () {},
  "getTangent": function () {},
  "getTangentAt": function () {},
  "getUtoTmapping": function () {},
  "isSplineCurve": function () {},
  "toJSON": function () {},
  "updateArcLengths": function () {}
};
AFRAME.THREE.SplineCurve3.prototype = {
  "clone": function () {},
  "computeFrenetFrames": function () {},
  "constructor": function () {},
  "copy": function () {},
  "fromJSON": function () {},
  "getLength": function () {},
  "getLengths": function () {},
  "getPoint": function () {},
  "getPointAt": function () {},
  "getPoints": function () {},
  "getSpacedPoints": function () {},
  "getTangent": function () {},
  "getTangentAt": function () {},
  "getUtoTmapping": function () {},
  "isCatmullRomCurve3": function () {},
  "toJSON": function () {},
  "updateArcLengths": function () {}
};
AFRAME.THREE.SpotLight.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isLight": function () {},
  "isObject3D": function () {},
  "isSpotLight": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.SpotLightHelper.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "update": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.SpotLightShadow.prototype = {
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "isSpotLightShadow": function () {},
  "toJSON": function () {},
  "update": function () {}
};
AFRAME.THREE.Sprite.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isObject3D": function () {},
  "isSprite": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.SpriteMaterial.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isMaterial": function () {},
  "isSpriteMaterial": function () {},
  "onBeforeCompile": function () {},
  "removeEventListener": function () {},
  "setValues": function () {},
  "toJSON": function () {}
};
AFRAME.THREE.StereoCamera.prototype = {
  "update": function () {}
};
AFRAME.THREE.StringKeyframeTrack.prototype = {
  "DefaultInterpolation": function () {},
  "InterpolantFactoryMethodDiscrete": function () {},
  "InterpolantFactoryMethodLinear": function () {},
  "InterpolantFactoryMethodSmooth": function () {},
  "TimeBufferType": function () {},
  "ValueBufferType": function () {},
  "ValueTypeName": function () {},
  "constructor": function () {},
  "getInterpolation": function () {},
  "getValueSize": function () {},
  "optimize": function () {},
  "scale": function () {},
  "setInterpolation": function () {},
  "shift": function () {},
  "trim": function () {},
  "validate": function () {}
};
AFRAME.THREE.TetrahedronBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.TetrahedronGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.TextBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "addShape": function () {},
  "addShapeList": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getArrays": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.TextGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.Texture.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isTexture": function () {},
  "removeEventListener": function () {},
  "toJSON": function () {},
  "transformUv": function () {}
};
AFRAME.THREE.TextureLoader.prototype = {
  "crossOrigin": function () {},
  "load": function () {},
  "setCrossOrigin": function () {},
  "setPath": function () {}
};
AFRAME.THREE.TorusBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.TorusGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.TorusKnotBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.TorusKnotGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.Triangle.prototype = {
  "area": function () {},
  "barycoordFromPoint": function () {},
  "clone": function () {},
  "closestPointToPoint": function () {},
  "containsPoint": function () {},
  "copy": function () {},
  "equals": function () {},
  "intersectsBox": function () {},
  "midpoint": function () {},
  "normal": function () {},
  "plane": function () {},
  "set": function () {},
  "setFromPointsAndIndices": function () {}
};
AFRAME.THREE.TubeBufferGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.THREE.TubeGeometry.prototype = {
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeFlatVertexNormals": function () {},
  "computeLineDistances": function () {},
  "computeMorphNormals": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromBufferGeometry": function () {},
  "hasEventListener": function () {},
  "isGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "mergeMesh": function () {},
  "mergeVertices": function () {},
  "normalize": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setFromPoints": function () {},
  "sortFacesByMaterialIndex": function () {},
  "toJSON": function () {},
  "translate": function () {}
};
AFRAME.THREE.Uint16BufferAttribute.prototype = {
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "copyArray": function () {},
  "copyAt": function () {},
  "copyColorsArray": function () {},
  "copyIndicesArray": function () {},
  "copyVector2sArray": function () {},
  "copyVector3sArray": function () {},
  "copyVector4sArray": function () {},
  "getW": function () {},
  "getX": function () {},
  "getY": function () {},
  "getZ": function () {},
  "isBufferAttribute": function () {},
  "onUpload": function () {},
  "set": function () {},
  "setArray": function () {},
  "setDynamic": function () {},
  "setW": function () {},
  "setX": function () {},
  "setXY": function () {},
  "setXYZ": function () {},
  "setXYZW": function () {},
  "setY": function () {},
  "setZ": function () {}
};
AFRAME.THREE.Uint32BufferAttribute.prototype = {
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "copyArray": function () {},
  "copyAt": function () {},
  "copyColorsArray": function () {},
  "copyIndicesArray": function () {},
  "copyVector2sArray": function () {},
  "copyVector3sArray": function () {},
  "copyVector4sArray": function () {},
  "getW": function () {},
  "getX": function () {},
  "getY": function () {},
  "getZ": function () {},
  "isBufferAttribute": function () {},
  "onUpload": function () {},
  "set": function () {},
  "setArray": function () {},
  "setDynamic": function () {},
  "setW": function () {},
  "setX": function () {},
  "setXY": function () {},
  "setXYZ": function () {},
  "setXYZW": function () {},
  "setY": function () {},
  "setZ": function () {}
};
AFRAME.THREE.Uint8BufferAttribute.prototype = {
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "copyArray": function () {},
  "copyAt": function () {},
  "copyColorsArray": function () {},
  "copyIndicesArray": function () {},
  "copyVector2sArray": function () {},
  "copyVector3sArray": function () {},
  "copyVector4sArray": function () {},
  "getW": function () {},
  "getX": function () {},
  "getY": function () {},
  "getZ": function () {},
  "isBufferAttribute": function () {},
  "onUpload": function () {},
  "set": function () {},
  "setArray": function () {},
  "setDynamic": function () {},
  "setW": function () {},
  "setX": function () {},
  "setXY": function () {},
  "setXYZ": function () {},
  "setXYZW": function () {},
  "setY": function () {},
  "setZ": function () {}
};
AFRAME.THREE.Uint8ClampedBufferAttribute.prototype = {
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "copyArray": function () {},
  "copyAt": function () {},
  "copyColorsArray": function () {},
  "copyIndicesArray": function () {},
  "copyVector2sArray": function () {},
  "copyVector3sArray": function () {},
  "copyVector4sArray": function () {},
  "getW": function () {},
  "getX": function () {},
  "getY": function () {},
  "getZ": function () {},
  "isBufferAttribute": function () {},
  "onUpload": function () {},
  "set": function () {},
  "setArray": function () {},
  "setDynamic": function () {},
  "setW": function () {},
  "setX": function () {},
  "setXY": function () {},
  "setXYZ": function () {},
  "setXYZW": function () {},
  "setY": function () {},
  "setZ": function () {}
};
AFRAME.THREE.Uniform.prototype = {
  "clone": function () {}
};
AFRAME.THREE.Vector2.prototype = {
  "add": function () {},
  "addScalar": function () {},
  "addScaledVector": function () {},
  "addVectors": function () {},
  "angle": function () {},
  "applyMatrix3": function () {},
  "ceil": function () {},
  "clamp": function () {},
  "clampLength": function () {},
  "clampScalar": function () {},
  "clone": function () {},
  "copy": function () {},
  "distanceTo": function () {},
  "distanceToManhattan": function () {},
  "distanceToSquared": function () {},
  "divide": function () {},
  "divideScalar": function () {},
  "dot": function () {},
  "equals": function () {},
  "floor": function () {},
  "fromArray": function () {},
  "fromAttribute": function () {},
  "fromBufferAttribute": function () {},
  "getComponent": function () {},
  "isVector2": function () {},
  "length": function () {},
  "lengthManhattan": function () {},
  "lengthSq": function () {},
  "lerp": function () {},
  "lerpVectors": function () {},
  "manhattanDistanceTo": function () {},
  "manhattanLength": function () {},
  "max": function () {},
  "min": function () {},
  "multiply": function () {},
  "multiplyScalar": function () {},
  "negate": function () {},
  "normalize": function () {},
  "rotateAround": function () {},
  "round": function () {},
  "roundToZero": function () {},
  "set": function () {},
  "setComponent": function () {},
  "setLength": function () {},
  "setScalar": function () {},
  "setX": function () {},
  "setY": function () {},
  "sub": function () {},
  "subScalar": function () {},
  "subVectors": function () {},
  "toArray": function () {}
};
AFRAME.THREE.Vector3.prototype = {
  "add": function () {},
  "addScalar": function () {},
  "addScaledVector": function () {},
  "addVectors": function () {},
  "angleTo": function () {},
  "applyAxisAngle": function () {},
  "applyEuler": function () {},
  "applyMatrix3": function () {},
  "applyMatrix4": function () {},
  "applyProjection": function () {},
  "applyQuaternion": function () {},
  "ceil": function () {},
  "clamp": function () {},
  "clampLength": function () {},
  "clampScalar": function () {},
  "clone": function () {},
  "copy": function () {},
  "cross": function () {},
  "crossVectors": function () {},
  "distanceTo": function () {},
  "distanceToManhattan": function () {},
  "distanceToSquared": function () {},
  "divide": function () {},
  "divideScalar": function () {},
  "dot": function () {},
  "equals": function () {},
  "floor": function () {},
  "fromArray": function () {},
  "fromAttribute": function () {},
  "fromBufferAttribute": function () {},
  "getColumnFromMatrix": function () {},
  "getComponent": function () {},
  "getPositionFromMatrix": function () {},
  "getScaleFromMatrix": function () {},
  "isVector3": function () {},
  "length": function () {},
  "lengthManhattan": function () {},
  "lengthSq": function () {},
  "lerp": function () {},
  "lerpVectors": function () {},
  "manhattanDistanceTo": function () {},
  "manhattanLength": function () {},
  "max": function () {},
  "min": function () {},
  "multiply": function () {},
  "multiplyScalar": function () {},
  "multiplyVectors": function () {},
  "negate": function () {},
  "normalize": function () {},
  "project": function () {},
  "projectOnPlane": function () {},
  "projectOnVector": function () {},
  "reflect": function () {},
  "round": function () {},
  "roundToZero": function () {},
  "set": function () {},
  "setComponent": function () {},
  "setEulerFromQuaternion": function () {},
  "setEulerFromRotationMatrix": function () {},
  "setFromCylindrical": function () {},
  "setFromMatrixColumn": function () {},
  "setFromMatrixPosition": function () {},
  "setFromMatrixScale": function () {},
  "setFromSpherical": function () {},
  "setLength": function () {},
  "setScalar": function () {},
  "setX": function () {},
  "setY": function () {},
  "setZ": function () {},
  "sub": function () {},
  "subScalar": function () {},
  "subVectors": function () {},
  "toArray": function () {},
  "transformDirection": function () {},
  "unproject": function () {}
};
AFRAME.THREE.Vector4.prototype = {
  "add": function () {},
  "addScalar": function () {},
  "addScaledVector": function () {},
  "addVectors": function () {},
  "applyMatrix4": function () {},
  "ceil": function () {},
  "clamp": function () {},
  "clampLength": function () {},
  "clampScalar": function () {},
  "clone": function () {},
  "copy": function () {},
  "divideScalar": function () {},
  "dot": function () {},
  "equals": function () {},
  "floor": function () {},
  "fromArray": function () {},
  "fromAttribute": function () {},
  "fromBufferAttribute": function () {},
  "getComponent": function () {},
  "isVector4": function () {},
  "length": function () {},
  "lengthManhattan": function () {},
  "lengthSq": function () {},
  "lerp": function () {},
  "lerpVectors": function () {},
  "manhattanLength": function () {},
  "max": function () {},
  "min": function () {},
  "multiplyScalar": function () {},
  "negate": function () {},
  "normalize": function () {},
  "round": function () {},
  "roundToZero": function () {},
  "set": function () {},
  "setAxisAngleFromQuaternion": function () {},
  "setAxisAngleFromRotationMatrix": function () {},
  "setComponent": function () {},
  "setLength": function () {},
  "setScalar": function () {},
  "setW": function () {},
  "setX": function () {},
  "setY": function () {},
  "setZ": function () {},
  "sub": function () {},
  "subScalar": function () {},
  "subVectors": function () {},
  "toArray": function () {}
};
AFRAME.THREE.VectorKeyframeTrack.prototype = {
  "DefaultInterpolation": function () {},
  "InterpolantFactoryMethodDiscrete": function () {},
  "InterpolantFactoryMethodLinear": function () {},
  "InterpolantFactoryMethodSmooth": function () {},
  "TimeBufferType": function () {},
  "ValueBufferType": function () {},
  "ValueTypeName": function () {},
  "constructor": function () {},
  "getInterpolation": function () {},
  "getValueSize": function () {},
  "optimize": function () {},
  "scale": function () {},
  "setInterpolation": function () {},
  "shift": function () {},
  "trim": function () {},
  "validate": function () {}
};
AFRAME.THREE.VertexNormalsHelper.prototype = {
  "add": function () {},
  "addEventListener": function () {},
  "applyMatrix": function () {},
  "applyQuaternion": function () {},
  "clone": function () {},
  "computeLineDistances": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "getChildByName": function () {},
  "getObjectById": function () {},
  "getObjectByName": function () {},
  "getObjectByProperty": function () {},
  "getWorldDirection": function () {},
  "getWorldPosition": function () {},
  "getWorldQuaternion": function () {},
  "getWorldRotation": function () {},
  "getWorldScale": function () {},
  "hasEventListener": function () {},
  "isLine": function () {},
  "isLineSegments": function () {},
  "isObject3D": function () {},
  "localToWorld": function () {},
  "lookAt": function () {},
  "onAfterRender": function () {},
  "onBeforeRender": function () {},
  "raycast": function () {},
  "remove": function () {},
  "removeEventListener": function () {},
  "renderDepth": function () {},
  "rotateOnAxis": function () {},
  "rotateOnWorldAxis": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "setRotationFromAxisAngle": function () {},
  "setRotationFromEuler": function () {},
  "setRotationFromMatrix": function () {},
  "setRotationFromQuaternion": function () {},
  "toJSON": function () {},
  "translate": function () {},
  "translateOnAxis": function () {},
  "translateX": function () {},
  "translateY": function () {},
  "translateZ": function () {},
  "traverse": function () {},
  "traverseAncestors": function () {},
  "traverseVisible": function () {},
  "update": function () {},
  "updateMatrix": function () {},
  "updateMatrixWorld": function () {},
  "worldToLocal": function () {}
};
AFRAME.THREE.VideoTexture.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isTexture": function () {},
  "isVideoTexture": function () {},
  "removeEventListener": function () {},
  "toJSON": function () {},
  "transformUv": function () {},
  "update": function () {}
};
AFRAME.THREE.WebGLRenderTarget.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isWebGLRenderTarget": function () {},
  "removeEventListener": function () {},
  "setSize": function () {}
};
AFRAME.THREE.WebGLRenderTargetCube.prototype = {
  "addEventListener": function () {},
  "clone": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "hasEventListener": function () {},
  "isWebGLRenderTarget": function () {},
  "isWebGLRenderTargetCube": function () {},
  "removeEventListener": function () {},
  "setSize": function () {}
};
AFRAME.THREE.WebGLRenderer.prototype = {
  "addPostPlugin": function () {},
  "addPrePlugin": function () {},
  "enableScissorTest": function () {},
  "getCurrentRenderTarget": function () {},
  "getMaxAnisotropy": function () {},
  "getPrecision": function () {},
  "initMaterial": function () {},
  "resetGLState": function () {},
  "setFaceCulling": function () {},
  "supportsBlendMinMax": function () {},
  "supportsCompressedTexturePVRTC": function () {},
  "supportsCompressedTextureS3TC": function () {},
  "supportsFloatTextures": function () {},
  "supportsHalfFloatTextures": function () {},
  "supportsInstancedArrays": function () {},
  "supportsStandardDerivatives": function () {},
  "supportsVertexTextures": function () {},
  "updateShadowMap": function () {}
};
AFRAME.THREE.WireframeGeometry.prototype = {
  "addAttribute": function () {},
  "addDrawCall": function () {},
  "addEventListener": function () {},
  "addGroup": function () {},
  "addIndex": function () {},
  "applyMatrix": function () {},
  "center": function () {},
  "clearDrawCalls": function () {},
  "clearGroups": function () {},
  "clone": function () {},
  "computeBoundingBox": function () {},
  "computeBoundingSphere": function () {},
  "computeFaceNormals": function () {},
  "computeOffsets": function () {},
  "computeTangents": function () {},
  "computeVertexNormals": function () {},
  "constructor": function () {},
  "copy": function () {},
  "dispatchEvent": function () {},
  "dispose": function () {},
  "fromDirectGeometry": function () {},
  "fromGeometry": function () {},
  "getAttribute": function () {},
  "getIndex": function () {},
  "hasEventListener": function () {},
  "isBufferGeometry": function () {},
  "lookAt": function () {},
  "merge": function () {},
  "normalizeNormals": function () {},
  "removeAttribute": function () {},
  "removeEventListener": function () {},
  "rotateX": function () {},
  "rotateY": function () {},
  "rotateZ": function () {},
  "scale": function () {},
  "setDrawRange": function () {},
  "setFromObject": function () {},
  "setFromPoints": function () {},
  "setIndex": function () {},
  "toJSON": function () {},
  "toNonIndexed": function () {},
  "translate": function () {},
  "updateFromObject": function () {}
};
AFRAME.TWEEN.Group.prototype = {
  "add": function () {},
  "getAll": function () {},
  "remove": function () {},
  "removeAll": function () {},
  "update": function () {}
};
AFRAME.TWEEN.Tween.prototype = {
  "chain": function () {},
  "delay": function () {},
  "easing": function () {},
  "end": function () {},
  "getId": function () {},
  "interpolation": function () {},
  "isPlaying": function () {},
  "onComplete": function () {},
  "onStart": function () {},
  "onStop": function () {},
  "onUpdate": function () {},
  "repeat": function () {},
  "repeatDelay": function () {},
  "start": function () {},
  "stop": function () {},
  "stopChainedTweens": function () {},
  "to": function () {},
  "update": function () {},
  "yoyo": function () {}
};
AFRAME.components.background.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "init": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "remove": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.camera.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components['collada-model'].Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.cursor.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components['daydream-controls'].Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "remove": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "update": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.debug.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "init": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "remove": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "update": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.embedded.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "init": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "remove": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.fog.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "init": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components['gearvr-controls'].Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "remove": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "update": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.geometry.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {}
};
AFRAME.components['gltf-model'].Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components['hand-controls'].Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.inspector.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "update": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components['keyboard-shortcuts'].Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "remove": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components['laser-controls'].Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "remove": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "update": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.light.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.line.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.link.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components['look-controls'].Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.material.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {}
};
AFRAME.components['obj-model'].Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components['oculus-touch-controls'].Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "remove": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "update": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.pivot.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "remove": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "update": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.pool.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "init": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "remove": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.position.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "init": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.raycaster.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.renderer.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "remove": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.rotation.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "init": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.scale.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "init": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.screenshot.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "remove": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "update": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.shadow.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.sound.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.stats.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.text.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.text.schema.shader.oneOf.flat.Shader.prototype = {
  "constructor": function () {},
  "fragmentShader": function () {},
  "initVariables": function () {},
  "name": function () {},
  "parseValue": function () {},
  "setMapOnTextureLoad": function () {},
  "updateVariables": function () {},
  "vertexShader": function () {}
};
AFRAME.components.text.schema.shader.oneOf.ios10hls.Shader.prototype = {
  "constructor": function () {},
  "init": function () {},
  "initVariables": function () {},
  "name": function () {},
  "parseValue": function () {},
  "setMapOnTextureLoad": function () {},
  "update": function () {},
  "updateVariables": function () {}
};
AFRAME.components.text.schema.shader.oneOf.msdf.Shader.prototype = {
  "constructor": function () {},
  "init": function () {},
  "initVariables": function () {},
  "name": function () {},
  "parseValue": function () {},
  "setMapOnTextureLoad": function () {},
  "update": function () {},
  "updateVariables": function () {}
};
AFRAME.components.text.schema.shader.oneOf.portal.Shader.prototype = {
  "constructor": function () {},
  "init": function () {},
  "initVariables": function () {},
  "name": function () {},
  "parseValue": function () {},
  "setMapOnTextureLoad": function () {},
  "update": function () {},
  "updateVariables": function () {}
};
AFRAME.components.text.schema.shader.oneOf.sdf.Shader.prototype = {
  "constructor": function () {},
  "init": function () {},
  "initVariables": function () {},
  "name": function () {},
  "parseValue": function () {},
  "setMapOnTextureLoad": function () {},
  "update": function () {},
  "updateVariables": function () {}
};
AFRAME.components.text.schema.shader.oneOf.standard.Shader.prototype = {
  "constructor": function () {},
  "fragmentShader": function () {},
  "initVariables": function () {},
  "name": function () {},
  "parseValue": function () {},
  "setMapOnTextureLoad": function () {},
  "updateVariables": function () {},
  "vertexShader": function () {}
};
AFRAME.components['tracked-controls'].Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "remove": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tock": function () {},
  "update": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components.visible.Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "init": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "remove": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components['vive-controls'].Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "remove": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "update": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components['vr-mode-ui'].Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "pause": function () {},
  "play": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components['wasd-controls'].Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tock": function () {},
  "update": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.components['windows-motion-controls'].Component.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "extendSchema": function () {},
  "flushToDOM": function () {},
  "name": function () {},
  "parse": function () {},
  "parseAttrValueForCache": function () {},
  "remove": function () {},
  "resetProperty": function () {},
  "stringify": function () {},
  "system": function () {},
  "tick": function () {},
  "tock": function () {},
  "update": function () {},
  "updateCachedAttrValue": function () {},
  "updateProperties": function () {},
  "updateSchema": function () {}
};
AFRAME.geometries.box.Geometry.prototype = {
  "constructor": function () {},
  "name": function () {},
  "update": function () {}
};
AFRAME.geometries.circle.Geometry.prototype = {
  "constructor": function () {},
  "name": function () {},
  "update": function () {}
};
AFRAME.geometries.cone.Geometry.prototype = {
  "constructor": function () {},
  "name": function () {},
  "update": function () {}
};
AFRAME.geometries.cylinder.Geometry.prototype = {
  "constructor": function () {},
  "name": function () {},
  "update": function () {}
};
AFRAME.geometries.dodecahedron.Geometry.prototype = {
  "constructor": function () {},
  "name": function () {},
  "update": function () {}
};
AFRAME.geometries.icosahedron.Geometry.prototype = {
  "constructor": function () {},
  "name": function () {},
  "update": function () {}
};
AFRAME.geometries.octahedron.Geometry.prototype = {
  "constructor": function () {},
  "name": function () {},
  "update": function () {}
};
AFRAME.geometries.plane.Geometry.prototype = {
  "constructor": function () {},
  "name": function () {},
  "update": function () {}
};
AFRAME.geometries.ring.Geometry.prototype = {
  "constructor": function () {},
  "name": function () {},
  "update": function () {}
};
AFRAME.geometries.sphere.Geometry.prototype = {
  "constructor": function () {},
  "name": function () {},
  "update": function () {}
};
AFRAME.geometries.tetrahedron.Geometry.prototype = {
  "constructor": function () {},
  "name": function () {},
  "update": function () {}
};
AFRAME.geometries.torus.Geometry.prototype = {
  "constructor": function () {},
  "name": function () {},
  "update": function () {}
};
AFRAME.geometries.torusKnot.Geometry.prototype = {
  "constructor": function () {},
  "name": function () {},
  "update": function () {}
};
AFRAME.geometries.triangle.Geometry.prototype = {
  "constructor": function () {},
  "name": function () {},
  "update": function () {}
};
AFRAME.primitives.primitives['a-box'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-camera'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-circle'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-collada-model'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-cone'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-cursor'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-curvedimage'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-cylinder'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-dodecahedron'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-gltf-model'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-icosahedron'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-image'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-light'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-link'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-obj-model'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-octahedron'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-plane'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-ring'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-sky'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-sound'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-sphere'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-tetrahedron'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-text'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-torus'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-torus-knot'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-triangle'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-video'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.primitives.primitives['a-videosphere'].prototype = {
  "ATTRIBUTE_NODE": function () {},
  "CDATA_SECTION_NODE": function () {},
  "COMMENT_NODE": function () {},
  "DOCUMENT_FRAGMENT_NODE": function () {},
  "DOCUMENT_NODE": function () {},
  "DOCUMENT_POSITION_CONTAINED_BY": function () {},
  "DOCUMENT_POSITION_CONTAINS": function () {},
  "DOCUMENT_POSITION_DISCONNECTED": function () {},
  "DOCUMENT_POSITION_FOLLOWING": function () {},
  "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC": function () {},
  "DOCUMENT_POSITION_PRECEDING": function () {},
  "DOCUMENT_TYPE_NODE": function () {},
  "ELEMENT_NODE": function () {},
  "ENTITY_NODE": function () {},
  "ENTITY_REFERENCE_NODE": function () {},
  "NOTATION_NODE": function () {},
  "PROCESSING_INSTRUCTION_NODE": function () {},
  "TEXT_NODE": function () {},
  "accessKey": function () {},
  "accessibleNode": function () {},
  "addEventListener": function () {},
  "after": function () {},
  "animate": function () {},
  "append": function () {},
  "appendChild": function () {},
  "ariaActiveDescendant": function () {},
  "ariaAtomic": function () {},
  "ariaAutoComplete": function () {},
  "ariaBusy": function () {},
  "ariaChecked": function () {},
  "ariaColCount": function () {},
  "ariaColIndex": function () {},
  "ariaColSpan": function () {},
  "ariaControls": function () {},
  "ariaCurrent": function () {},
  "ariaDescribedBy": function () {},
  "ariaDetails": function () {},
  "ariaDisabled": function () {},
  "ariaExpanded": function () {},
  "ariaHasPopup": function () {},
  "ariaHidden": function () {},
  "ariaLabel": function () {},
  "ariaLabelledBy": function () {},
  "ariaLevel": function () {},
  "ariaLive": function () {},
  "ariaModal": function () {},
  "ariaMultiLine": function () {},
  "ariaMultiSelectable": function () {},
  "ariaOrientation": function () {},
  "ariaOwns": function () {},
  "ariaPlaceholder": function () {},
  "ariaPosInSet": function () {},
  "ariaPressed": function () {},
  "ariaReadOnly": function () {},
  "ariaRelevant": function () {},
  "ariaRequired": function () {},
  "ariaRoleDescription": function () {},
  "ariaRowCount": function () {},
  "ariaRowIndex": function () {},
  "ariaRowSpan": function () {},
  "ariaSelected": function () {},
  "ariaSort": function () {},
  "ariaValueMax": function () {},
  "ariaValueMin": function () {},
  "ariaValueNow": function () {},
  "ariaValueText": function () {},
  "assignedSlot": function () {},
  "attachShadow": function () {},
  "attributeStyleMap": function () {},
  "attributes": function () {},
  "autocapitalize": function () {},
  "baseURI": function () {},
  "before": function () {},
  "blur": function () {},
  "childElementCount": function () {},
  "childNodes": function () {},
  "children": function () {},
  "classList": function () {},
  "className": function () {},
  "click": function () {},
  "clientHeight": function () {},
  "clientLeft": function () {},
  "clientTop": function () {},
  "clientWidth": function () {},
  "cloneNode": function () {},
  "compareDocumentPosition": function () {},
  "computedName": function () {},
  "computedRole": function () {},
  "computedStyleMap": function () {},
  "contains": function () {},
  "contentEditable": function () {},
  "createShadowRoot": function () {},
  "dataset": function () {},
  "dir": function () {},
  "dispatchEvent": function () {},
  "draggable": function () {},
  "firstChild": function () {},
  "firstElementChild": function () {},
  "focus": function () {},
  "getAnimations": function () {},
  "getAttributeNS": function () {},
  "getAttributeNames": function () {},
  "getAttributeNode": function () {},
  "getAttributeNodeNS": function () {},
  "getBoundingClientRect": function () {},
  "getClientRects": function () {},
  "getDestinationInsertionPoints": function () {},
  "getElementsByClassName": function () {},
  "getElementsByTagName": function () {},
  "getElementsByTagNameNS": function () {},
  "getRootNode": function () {},
  "hasAttribute": function () {},
  "hasAttributeNS": function () {},
  "hasAttributes": function () {},
  "hasChildNodes": function () {},
  "hasPointerCapture": function () {},
  "hidden": function () {},
  "id": function () {},
  "inert": function () {},
  "innerHTML": function () {},
  "innerText": function () {},
  "inputMode": function () {},
  "insertAdjacentElement": function () {},
  "insertAdjacentHTML": function () {},
  "insertAdjacentText": function () {},
  "insertBefore": function () {},
  "invisible": function () {},
  "isConnected": function () {},
  "isContentEditable": function () {},
  "isDefaultNamespace": function () {},
  "isEqualNode": function () {},
  "isSameNode": function () {},
  "lang": function () {},
  "lastChild": function () {},
  "lastElementChild": function () {},
  "localName": function () {},
  "lookupNamespaceURI": function () {},
  "lookupPrefix": function () {},
  "matches": function () {},
  "namespaceURI": function () {},
  "nextElementSibling": function () {},
  "nextSibling": function () {},
  "nodeName": function () {},
  "nodeType": function () {},
  "nodeValue": function () {},
  "nonce": function () {},
  "normalize": function () {},
  "offsetHeight": function () {},
  "offsetLeft": function () {},
  "offsetParent": function () {},
  "offsetTop": function () {},
  "offsetWidth": function () {},
  "onabort": function () {},
  "onactivateinvisible": function () {},
  "onauxclick": function () {},
  "onbeforecopy": function () {},
  "onbeforecut": function () {},
  "onbeforepaste": function () {},
  "onblur": function () {},
  "oncancel": function () {},
  "oncanplay": function () {},
  "oncanplaythrough": function () {},
  "onchange": function () {},
  "onclick": function () {},
  "onclose": function () {},
  "oncontextmenu": function () {},
  "oncopy": function () {},
  "oncuechange": function () {},
  "oncut": function () {},
  "ondblclick": function () {},
  "ondrag": function () {},
  "ondragend": function () {},
  "ondragenter": function () {},
  "ondragleave": function () {},
  "ondragover": function () {},
  "ondragstart": function () {},
  "ondrop": function () {},
  "ondurationchange": function () {},
  "onemptied": function () {},
  "onended": function () {},
  "onerror": function () {},
  "onfocus": function () {},
  "onformdata": function () {},
  "onfullscreenchange": function () {},
  "onfullscreenerror": function () {},
  "ongotpointercapture": function () {},
  "oninput": function () {},
  "oninvalid": function () {},
  "onkeydown": function () {},
  "onkeypress": function () {},
  "onkeyup": function () {},
  "onload": function () {},
  "onloadeddata": function () {},
  "onloadedmetadata": function () {},
  "onloadstart": function () {},
  "onlostpointercapture": function () {},
  "onmousedown": function () {},
  "onmouseenter": function () {},
  "onmouseleave": function () {},
  "onmousemove": function () {},
  "onmouseout": function () {},
  "onmouseover": function () {},
  "onmouseup": function () {},
  "onmousewheel": function () {},
  "onpaste": function () {},
  "onpause": function () {},
  "onplay": function () {},
  "onplaying": function () {},
  "onpointercancel": function () {},
  "onpointerdown": function () {},
  "onpointerenter": function () {},
  "onpointerleave": function () {},
  "onpointermove": function () {},
  "onpointerout": function () {},
  "onpointerover": function () {},
  "onpointerrawmove": function () {},
  "onpointerup": function () {},
  "onprogress": function () {},
  "onratechange": function () {},
  "onreset": function () {},
  "onresize": function () {},
  "onscroll": function () {},
  "onsearch": function () {},
  "onseeked": function () {},
  "onseeking": function () {},
  "onselect": function () {},
  "onselectionchange": function () {},
  "onselectstart": function () {},
  "onstalled": function () {},
  "onsubmit": function () {},
  "onsuspend": function () {},
  "ontimeupdate": function () {},
  "ontoggle": function () {},
  "onvolumechange": function () {},
  "onwaiting": function () {},
  "onwebkitfullscreenchange": function () {},
  "onwebkitfullscreenerror": function () {},
  "onwheel": function () {},
  "outerHTML": function () {},
  "outerText": function () {},
  "ownerDocument": function () {},
  "parentElement": function () {},
  "parentNode": function () {},
  "prefix": function () {},
  "prepend": function () {},
  "previousElementSibling": function () {},
  "previousSibling": function () {},
  "querySelector": function () {},
  "querySelectorAll": function () {},
  "releasePointerCapture": function () {},
  "removeAttributeNS": function () {},
  "removeAttributeNode": function () {},
  "removeChild": function () {},
  "removeEventListener": function () {},
  "replaceChild": function () {},
  "replaceWith": function () {},
  "requestFullscreen": function () {},
  "requestPointerLock": function () {},
  "role": function () {},
  "scroll": function () {},
  "scrollBy": function () {},
  "scrollHeight": function () {},
  "scrollIntoView": function () {},
  "scrollIntoViewIfNeeded": function () {},
  "scrollLeft": function () {},
  "scrollTo": function () {},
  "scrollTop": function () {},
  "scrollWidth": function () {},
  "setAttributeNS": function () {},
  "setAttributeNode": function () {},
  "setAttributeNodeNS": function () {},
  "setPointerCapture": function () {},
  "shadowRoot": function () {},
  "slot": function () {},
  "spellcheck": function () {},
  "style": function () {},
  "tabIndex": function () {},
  "tagName": function () {},
  "textContent": function () {},
  "title": function () {},
  "toggleAttribute": function () {},
  "translate": function () {},
  "webkitMatchesSelector": function () {},
  "webkitRequestFullScreen": function () {},
  "webkitRequestFullscreen": function () {}
};
AFRAME.shaders.flat.Shader.prototype = {
  "constructor": function () {},
  "fragmentShader": function () {},
  "initVariables": function () {},
  "name": function () {},
  "parseValue": function () {},
  "setMapOnTextureLoad": function () {},
  "updateVariables": function () {},
  "vertexShader": function () {}
};
AFRAME.shaders.ios10hls.Shader.prototype = {
  "constructor": function () {},
  "init": function () {},
  "initVariables": function () {},
  "name": function () {},
  "parseValue": function () {},
  "setMapOnTextureLoad": function () {},
  "update": function () {},
  "updateVariables": function () {}
};
AFRAME.shaders.msdf.Shader.prototype = {
  "constructor": function () {},
  "init": function () {},
  "initVariables": function () {},
  "name": function () {},
  "parseValue": function () {},
  "setMapOnTextureLoad": function () {},
  "update": function () {},
  "updateVariables": function () {}
};
AFRAME.shaders.portal.Shader.prototype = {
  "constructor": function () {},
  "init": function () {},
  "initVariables": function () {},
  "name": function () {},
  "parseValue": function () {},
  "setMapOnTextureLoad": function () {},
  "update": function () {},
  "updateVariables": function () {}
};
AFRAME.shaders.sdf.Shader.prototype = {
  "constructor": function () {},
  "init": function () {},
  "initVariables": function () {},
  "name": function () {},
  "parseValue": function () {},
  "setMapOnTextureLoad": function () {},
  "update": function () {},
  "updateVariables": function () {}
};
AFRAME.shaders.standard.Shader.prototype = {
  "constructor": function () {},
  "fragmentShader": function () {},
  "initVariables": function () {},
  "name": function () {},
  "parseValue": function () {},
  "setMapOnTextureLoad": function () {},
  "updateVariables": function () {},
  "vertexShader": function () {}
};
AFRAME.systems.camera.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "name": function () {},
  "pause": function () {},
  "play": function () {},
  "schema": function () {},
  "tick": function () {},
  "update": function () {},
  "updateProperties": function () {}
};
AFRAME.systems.geometry.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "name": function () {},
  "pause": function () {},
  "play": function () {},
  "schema": function () {},
  "tick": function () {},
  "tock": function () {},
  "update": function () {},
  "updateProperties": function () {}
};
AFRAME.systems.light.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "name": function () {},
  "pause": function () {},
  "play": function () {},
  "tick": function () {},
  "tock": function () {},
  "update": function () {},
  "updateProperties": function () {}
};
AFRAME.systems.material.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "name": function () {},
  "pause": function () {},
  "play": function () {},
  "schema": function () {},
  "tick": function () {},
  "tock": function () {},
  "update": function () {},
  "updateProperties": function () {}
};
AFRAME.systems.shadow.prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "name": function () {},
  "pause": function () {},
  "play": function () {},
  "tick": function () {},
  "tock": function () {},
  "update": function () {},
  "updateProperties": function () {}
};
AFRAME.systems['tracked-controls'].prototype = {
  "buildData": function () {},
  "constructor": function () {},
  "name": function () {},
  "pause": function () {},
  "play": function () {},
  "schema": function () {},
  "tock": function () {},
  "update": function () {},
  "updateProperties": function () {}
};
/**********************************************************************
 * End Generated Extern for AFRAME
/**********************************************************************/
