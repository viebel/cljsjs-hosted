var GraphQL = {
  "BREAK": {},
  "BreakingChangeType": {},
  "DEFAULT_DEPRECATION_REASON": {},
  "DangerousChangeType": {},
  "DirectiveLocation": {},
  "FieldsOnCorrectTypeRule": function() {},
  "FragmentsOnCompositeTypesRule": function() {},
  "GraphQLBoolean": {},
  "GraphQLDeprecatedDirective": {},
  "GraphQLDirective": function() {},
  "GraphQLEnumType": function() {},
  "GraphQLError": function() {},
  "GraphQLFloat": {},
  "GraphQLID": {},
  "GraphQLIncludeDirective": {},
  "GraphQLInputObjectType": function() {},
  "GraphQLInt": {},
  "GraphQLInterfaceType": function() {},
  "GraphQLList": function() {},
  "GraphQLNonNull": function() {},
  "GraphQLObjectType": function() {},
  "GraphQLScalarType": function() {},
  "GraphQLSchema": function() {},
  "GraphQLSkipDirective": {},
  "GraphQLString": {},
  "GraphQLUnionType": function() {},
  "Kind": {},
  "KnownArgumentNamesRule": function() {},
  "KnownDirectivesRule": function() {},
  "KnownFragmentNamesRule": function() {},
  "KnownTypeNamesRule": function() {},
  "LoneAnonymousOperationRule": function() {},
  "NoFragmentCyclesRule": function() {},
  "NoUndefinedVariablesRule": function() {},
  "NoUnusedFragmentsRule": function() {},
  "NoUnusedVariablesRule": function() {},
  "OverlappingFieldsCanBeMergedRule": function() {},
  "PossibleFragmentSpreadsRule": function() {},
  "ProvidedNonNullArgumentsRule": function() {},
  "ScalarLeafsRule": function() {},
  "SchemaMetaFieldDef": {},
  "SingleFieldSubscriptionsRule": function() {},
  "Source": function() {},
  "TokenKind": {},
  "TypeInfo": function() {},
  "TypeKind": {},
  "TypeMetaFieldDef": {},
  "TypeNameMetaFieldDef": {},
  "UniqueArgumentNamesRule": function() {},
  "UniqueDirectivesPerLocationRule": function() {},
  "UniqueFragmentNamesRule": function() {},
  "UniqueInputFieldNamesRule": function() {},
  "UniqueOperationNamesRule": function() {},
  "UniqueVariableNamesRule": function() {},
  "ValidationContext": function() {},
  "ValuesOfCorrectTypeRule": function() {},
  "VariablesAreInputTypesRule": function() {},
  "VariablesDefaultValueAllowedRule": function() {},
  "VariablesInAllowedPositionRule": function() {},
  "assertAbstractType": function() {},
  "assertCompositeType": function() {},
  "assertEnumType": function() {},
  "assertInputObjectType": function() {},
  "assertInputType": function() {},
  "assertInterfaceType": function() {},
  "assertLeafType": function() {},
  "assertListType": function() {},
  "assertNamedType": function() {},
  "assertNonNullType": function() {},
  "assertNullableType": function() {},
  "assertObjectType": function() {},
  "assertOutputType": function() {},
  "assertScalarType": function() {},
  "assertType": function() {},
  "assertUnionType": function() {},
  "assertValidName": function() {},
  "assertValidSchema": function() {},
  "assertWrappingType": function() {},
  "astFromValue": function() {},
  "buildASTSchema": function() {},
  "buildClientSchema": function() {},
  "buildSchema": function() {},
  "coerceValue": function() {},
  "concatAST": function() {},
  "createSourceEventStream": function() {},
  "defaultFieldResolver": function() {},
  "doTypesOverlap": function() {},
  "execute": function() {},
  "extendSchema": function() {},
  "findBreakingChanges": function() {},
  "findDangerousChanges": function() {},
  "findDeprecatedUsages": function() {},
  "formatError": function() {},
  "getDescription": function() {},
  "getDirectiveValues": function() {},
  "getIntrospectionQuery": function() {},
  "getLocation": function() {},
  "getNamedType": function() {},
  "getNullableType": function() {},
  "getOperationAST": function() {},
  "getVisitFn": function() {},
  "graphql": function() {},
  "graphqlSync": function() {},
  "introspectionFromSchema": function() {},
  "introspectionQuery": {},
  "introspectionTypes": {},
  "isAbstractType": function() {},
  "isCompositeType": function() {},
  "isDirective": function() {},
  "isEnumType": function() {},
  "isEqualType": function() {},
  "isInputObjectType": function() {},
  "isInputType": function() {},
  "isInterfaceType": function() {},
  "isIntrospectionType": function() {},
  "isLeafType": function() {},
  "isListType": function() {},
  "isNamedType": function() {},
  "isNonNullType": function() {},
  "isNullableType": function() {},
  "isObjectType": function() {},
  "isOutputType": function() {},
  "isScalarType": function() {},
  "isSchema": function() {},
  "isSpecifiedDirective": function() {},
  "isSpecifiedScalarType": function() {},
  "isType": function() {},
  "isTypeSubTypeOf": function() {},
  "isUnionType": function() {},
  "isValidJSValue": function() {},
  "isValidLiteralValue": function() {},
  "isValidNameError": function() {},
  "isWrappingType": function() {},
  "lexicographicSortSchema": function() {},
  "parse": function() {},
  "parseType": function() {},
  "parseValue": function() {},
  "print": function() {},
  "printError": function() {},
  "printIntrospectionSchema": function() {},
  "printSchema": function() {},
  "printType": function() {},
  "responsePathAsArray": function() {},
  "separateOperations": function() {},
  "specifiedDirectives": {},
  "specifiedRules": {},
  "specifiedScalarTypes": function() {},
  "subscribe": function() {},
  "typeFromAST": function() {},
  "validate": function() {},
  "validateSchema": function() {},
  "valueFromAST": function() {},
  "valueFromASTUntyped": function() {},
  "visit": function() {},
  "visitInParallel": function() {},
  "visitWithTypeInfo": function() {},
  "__Directive": {},
  "__DirectiveLocation": {},
  "__EnumValue": {},
  "__Field": {},
  "__InputValue": {},
  "__Schema": {},
  "__Type": {},
  "__TypeKind": {}
}
