THREE.NodeMaterialLoader=function(c,d){this.manager=void 0!==c?c:THREE.DefaultLoadingManager;this.nodes={};this.materials={};this.passes={};this.names={};this.library=d||{}};
THREE.NodeMaterialLoaderUtils={replaceUUIDObject:function(c,d,a,b){b=void 0!==b?b:!0;"object"===typeof d&&(d=d.uuid);if("object"===typeof c)for(var e=Object.keys(c),f=0;f<e.length;f++){var g=e[f];b&&(c[g]=this.replaceUUIDObject(c[g],d,a));g===d&&(c[d]=c[g],delete c[g])}return c===d?a:c},replaceUUID:function(c,d,a){this.replaceUUIDObject(c,d,a,!1);this.replaceUUIDObject(c.nodes,d,a);this.replaceUUIDObject(c.materials,d,a);this.replaceUUIDObject(c.passes,d,a);this.replaceUUIDObject(c.library,d,a,!1);
return c}};
Object.assign(THREE.NodeMaterialLoader.prototype,{load:function(c,d,a,b){var e=this;(new THREE.FileLoader(e.manager)).load(c,function(a){d(e.parse(JSON.parse(a)))},a,b);return this},getObjectByName:function(c){return this.names[c]},getObjectById:function(c){return this.library[c]||this.nodes[c]||this.names[c]},getNode:function(c){var d=this.getObjectById(c);d||console.warn('Node "'+c+'" not found.');return d},parse:function(c){var d,a,b,e,f;for(d in c.nodes)a=c.nodes[d],b=new THREE[a.type],a.name?
(b.name=a.name,this.names[b.name]=b):b.readonly=!0,void 0!==a.readonly&&(b.readonly=a.readonly),this.nodes[d]=b;for(d in c.materials)a=c.materials[d],b=new THREE[a.type],a.name&&(b.name=a.name,this.names[b.name]=b),this.materials[d]=b;for(d in c.passes)a=c.passes[d],b=new THREE[a.type],a.name&&(b.name=a.name,this.names[b.name]=b),this.passes[d]=b;c.material&&(this.material=this.materials[d]);c.pass&&(this.pass=this.passes[d]);for(d in c.nodes)switch(a=c.nodes[d],b=this.nodes[d],a.type){case "FloatNode":b.number=
a.number;break;case "ColorNode":b.value.copy(a);break;case "Vector2Node":b.x=a.x;b.y=a.y;break;case "Vector3Node":b.x=a.x;b.y=a.y;b.z=a.z;break;case "Vector4Node":b.x=a.x;b.y=a.y;b.z=a.z;b.w=a.w;break;case "Matrix3Node":case "Matrix4Node":b.value.fromArray(a.elements);break;case "OperatorNode":b.a=this.getNode(a.a);b.b=this.getNode(a.b);b.op=a.op;break;case "Math1Node":b.a=this.getNode(a.a);b.method=a.method;break;case "Math2Node":b.a=this.getNode(a.a);b.b=this.getNode(a.b);b.method=a.method;break;
case "Math3Node":b.a=this.getNode(a.a);b.b=this.getNode(a.b);b.c=this.getNode(a.c);b.method=a.method;break;case "UVNode":case "ColorsNode":b.index=a.index;break;case "LuminanceNode":b.rgb=this.getNode(a.rgb);break;case "PositionNode":case "NormalNode":case "ReflectNode":case "LightNode":b.scope=a.scope;break;case "SwitchNode":b.node=this.getNode(a.node);b.components=a.components;break;case "JoinNode":for(e in a.inputs)b[e]=this.getNode(a.inputs[e]);break;case "CameraNode":b.setScope(a.scope);a.camera&&
b.setCamera(this.getNode(a.camera));switch(a.scope){case THREE.CameraNode.DEPTH:b.near.number=a.near,b.far.number=a.far}break;case "ColorAdjustmentNode":b.rgb=this.getNode(a.rgb);b.adjustment=this.getNode(a.adjustment);b.method=a.method;break;case "UVTransformNode":b.uv=this.getNode(a.uv);b.transform=this.getNode(a.transform);break;case "BumpNode":b.value=this.getNode(a.value);b.coord=this.getNode(a.coord);b.scale=this.getNode(a.scale);break;case "BlurNode":b.value=this.getNode(a.value);b.coord=this.getNode(a.coord);
b.scale=this.getNode(a.scale);b.value=this.getNode(a.value);b.coord=this.getNode(a.coord);b.radius=this.getNode(a.radius);void 0!==a.size&&(b.size=new THREE.Vector2(a.size.x,a.size.y));b.blurX=a.blurX;b.blurY=a.blurY;break;case "ResolutionNode":b.renderer=this.getNode(a.renderer);break;case "ScreenUVNode":b.resolution=this.getNode(a.resolution);break;case "VelocityNode":a.target&&b.setTarget(this.getNode(a.target));b.setParams(a.params);break;case "TimerNode":b.scope=a.scope;b.scale=a.scale;break;
case "ConstNode":b.name=a.name;b.type=a.out;b.value=a.value;b.useDefine=!0===a.useDefine;break;case "AttributeNode":case "VarNode":b.type=a.out;break;case "ReflectorNode":b.setMirror(this.getNode(a.mirror));a.offset&&(b.offset=this.getNode(a.offset));break;case "NoiseNode":b.coord=this.getNode(a.coord);break;case "FunctionNode":b.isMethod=a.isMethod;b.useKeywords=a.useKeywords;b.extensions=a.extensions;b.keywords={};for(e in a.keywords)b.keywords[e]=this.getNode(a.keywords[e]);if(a.includes)for(f=
0;f<a.includes.length;f++)b.includes.push(this.getNode(a.includes[f]));b.eval(a.src,b.includes,b.extensions,b.keywords);b.isMethod||(b.type=a.out);break;case "FunctionCallNode":for(e in a.inputs)b.inputs[e]=this.getNode(a.inputs[e]);b.value=this.getNode(a.value);break;case "TextureNode":case "CubeTextureNode":case "ScreenNode":a.value&&(b.value=this.getNode(a.value));b.coord=this.getNode(a.coord);a.bias&&(b.bias=this.getNode(a.bias));void 0!==b.project&&(b.project=a.project);break;case "RoughnessToBlinnExponentNode":break;
case "RawNode":b.value=this.getNode(a.value);break;case "StandardNode":case "PhongNode":case "SpriteNode":b.color=this.getNode(a.color);a.alpha&&(b.alpha=this.getNode(a.alpha));a.specular&&(b.specular=this.getNode(a.specular));a.shininess&&(b.shininess=this.getNode(a.shininess));a.roughness&&(b.roughness=this.getNode(a.roughness));a.metalness&&(b.metalness=this.getNode(a.metalness));a.reflectivity&&(b.reflectivity=this.getNode(a.reflectivity));a.clearCoat&&(b.clearCoat=this.getNode(a.clearCoat));
a.clearCoatRoughness&&(b.clearCoatRoughness=this.getNode(a.clearCoatRoughness));a.normal&&(b.normal=this.getNode(a.normal));a.normalScale&&(b.normalScale=this.getNode(a.normalScale));a.emissive&&(b.emissive=this.getNode(a.emissive));a.ambient&&(b.ambient=this.getNode(a.ambient));a.shadow&&(b.shadow=this.getNode(a.shadow));a.light&&(b.light=this.getNode(a.light));a.ao&&(b.ao=this.getNode(a.ao));a.environment&&(b.environment=this.getNode(a.environment));a.environmentAlpha&&(b.environmentAlpha=this.getNode(a.environmentAlpha));
a.transform&&(b.transform=this.getNode(a.transform));!1===a.spherical&&(b.spherical=!1);break;default:console.warn(a.type,"not supported.")}for(d in c.materials)a=c.materials[d],b=this.materials[d],void 0!==a.name&&(b.name=a.name),void 0!==a.blending&&(b.blending=a.blending),void 0!==a.flatShading&&(b.flatShading=a.flatShading),void 0!==a.side&&(b.side=a.side),b.depthFunc=a.depthFunc,b.depthTest=a.depthTest,b.depthWrite=a.depthWrite,void 0!==a.wireframe&&(b.wireframe=a.wireframe),void 0!==a.wireframeLinewidth&&
(b.wireframeLinewidth=a.wireframeLinewidth),void 0!==a.wireframeLinecap&&(b.wireframeLinecap=a.wireframeLinecap),void 0!==a.wireframeLinejoin&&(b.wireframeLinejoin=a.wireframeLinejoin),void 0!==a.skinning&&(b.skinning=a.skinning),void 0!==a.morphTargets&&(b.morphTargets=a.morphTargets),void 0!==a.visible&&(b.visible=a.visible),void 0!==a.userData&&(b.userData=a.userData),b.vertex=this.getNode(a.vertex),b.fragment=this.getNode(a.fragment),b.vertex===b.fragment&&(b.node=b.vertex),b.build(),void 0!==
a.fog&&(b.fog=a.fog),void 0!==a.lights&&(b.lights=a.lights),void 0!==a.transparent&&(b.transparent=a.transparent);for(d in c.passes)a=c.passes[d],b=this.passes[d],b.value=this.getNode(a.value),b.build();return this.material||this.pass||this}});