THREE.CTMLoader=function(){THREE.Loader.call(this)};THREE.CTMLoader.prototype=Object.create(THREE.Loader.prototype);THREE.CTMLoader.prototype.constructor=THREE.CTMLoader;
THREE.CTMLoader.prototype.loadParts=function(d,g,a){a=a||{};var k=this,e=new XMLHttpRequest,c=a.basePath?a.basePath:THREE.LoaderUtils.extractUrlBase(d);e.onreadystatechange=function(){if(4===e.readyState&&(200===e.status||0===e.status)){for(var f=JSON.parse(e.responseText),d=[],b=[],h=0,l=0;l<f.materials.length;l++)d[l]=k.createMaterial(f.materials[l],c);k.load(c+f.data,function(a){h+=1;b.push(a);h===f.offsets.length&&g(b,d)},{useWorker:a.useWorker,worker:a.worker,offsets:f.offsets})}};e.open("GET",
d,!0);e.setRequestHeader("Content-Type","text/plain");e.send(null)};
THREE.CTMLoader.prototype.load=function(d,g,a){a=a||{};var k=this,e=void 0!==a.offsets?a.offsets:[0],c=new XMLHttpRequest;c.onreadystatechange=function(){if(4===c.readyState)if(200===c.status||0===c.status){var f=new Uint8Array(c.response),m=Date.now();if(a.useWorker){var b=a.worker||new Worker("js/loaders/ctm/CTMWorker.js");b.onmessage=function(a){a=a.data;for(var c=0;c<a.length;c++){var b=a[c],d=Date.now();k.createModel(b,g);b=Date.now();console.log("model load time [worker]: "+(b-d)+" ms, total: "+
(b-m))}};b.postMessage({data:f,offsets:e},[f.buffer])}else for(b=0;b<e.length;b++){var h=new CTM.Stream(f);h.offset=e[b];h=new CTM.File(h);k.createModel(h,g)}}else console.error("Couldn't load ["+d+"] ["+c.status+"]");else 3!==c.readyState&&2===c.readyState&&c.getResponseHeader("Content-Length")};c.open("GET",d,!0);c.responseType="arraybuffer";c.send(null)};
THREE.CTMLoader.prototype.createModel=function(d,g){var a=function(){THREE.BufferGeometry.call(this);this.materials=[];var a=d.body.indices,e=d.body.vertices,c=d.body.normals,f,g,b=d.body.uvMaps;void 0!==b&&0<b.length&&(f=b[0].uv);b=d.body.attrMaps;void 0!==b&&0<b.length&&"Color"===b[0].name&&(g=b[0].attr);this.setIndex(new THREE.BufferAttribute(a,1));this.addAttribute("position",new THREE.BufferAttribute(e,3));void 0!==c&&this.addAttribute("normal",new THREE.BufferAttribute(c,3));void 0!==f&&this.addAttribute("uv",
new THREE.BufferAttribute(f,2));void 0!==g&&this.addAttribute("color",new THREE.BufferAttribute(g,4))};a.prototype=Object.create(THREE.BufferGeometry.prototype);a.prototype.constructor=a;a=new a;void 0===a.attributes.normal&&a.computeVertexNormals();g(a)};