THREE.BabylonLoader=function(g){this.manager=void 0!==g?g:THREE.DefaultLoadingManager};
THREE.BabylonLoader.prototype={constructor:THREE.BabylonLoader,load:function(g,n,h,t){var e=this;(new THREE.FileLoader(e.manager)).load(g,function(h){n(e.parse(JSON.parse(h)))},h,t)},parse:function(g){var n=function(h){for(var g={},e=0,l=h.materials.length;e<l;e++){var b=h.materials[e],d=new THREE.MeshPhongMaterial;d.name=b.name;d.color.fromArray(b.diffuse);d.emissive.fromArray(b.emissive);d.specular.fromArray(b.specular);d.shininess=b.specularPower;d.opacity=b.alpha;g[b.id]=d}if(h.multiMaterials)for(e=
0,l=h.multiMaterials.length;e<l;e++)b=h.multiMaterials[e],console.warn("THREE.BabylonLoader: Multi materials not yet supported."),g[b.id]=new THREE.MeshPhongMaterial;return g}(g);return function(h,g){for(var e={},l=new THREE.Scene,b=h.cameras,d=0,p=b.length;d<p;d++){var a=b[d],c=new THREE.PerspectiveCamera(a.fov/Math.PI*180,1.33,a.minZ,a.maxZ);c.name=a.name;c.position.fromArray(a.position);a.rotation&&c.rotation.fromArray(a.rotation);e[a.id]=c}b=h.lights;d=0;for(p=b.length;d<p;d++){var a=b[d],f;switch(a.type){case 0:f=
new THREE.PointLight;break;case 1:f=new THREE.DirectionalLight;break;case 2:f=new THREE.SpotLight;break;case 3:f=new THREE.HemisphereLight}f.name=a.name;a.position&&f.position.set(a.position[0],a.position[1],-a.position[2]);f.color.fromArray(a.diffuse);a.groundColor&&f.groundColor.fromArray(a.groundColor);a.intensity&&(f.intensity=a.intensity);e[a.id]=f;l.add(f)}f=h.meshes;d=0;for(p=f.length;d<p;d++){a=f[d];if(a.indices){var k=a,b=new THREE.BufferGeometry,m=k.positions,q=k.normals,n=k.uvs;b.setIndex(k.indices);
for(var c=2,r=m.length;c<r;c+=3)m[c]=-m[c];b.addAttribute("position",new THREE.Float32BufferAttribute(m,3));if(q){c=2;for(r=q.length;c<r;c+=3)q[c]=-q[c];b.addAttribute("normal",new THREE.Float32BufferAttribute(q,3))}n&&b.addAttribute("uv",new THREE.Float32BufferAttribute(n,2));if(k=k.subMeshes)for(c=0,r=k.length;c<r;c++)m=k[c],b.addGroup(m.indexStart,m.indexCount);b=new THREE.Mesh(b,g[a.materialId])}else b=new THREE.Group;b.name=a.name;b.position.set(a.position[0],a.position[1],-a.position[2]);b.rotation.fromArray(a.rotation);
a.rotationQuaternion&&b.quaternion.fromArray(a.rotationQuaternion);b.scale.fromArray(a.scaling);a.parentId?e[a.parentId].add(b):l.add(b);e[a.id]=b}return l}(g,n)}};