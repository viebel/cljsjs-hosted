THREE.Refractor=function(q,e){THREE.Mesh.call(this,q);this.type="Refractor";var h=this;e=e||{};var r=void 0!==e.color?new THREE.Color(e.color):new THREE.Color(8355711),m=e.textureWidth||512,n=e.textureHeight||512,t=e.clipBias||0,k=e.shader||THREE.Refractor.RefractorShader,f=new THREE.PerspectiveCamera;f.matrixAutoUpdate=!1;f.userData.refractor=!0;var p=new THREE.Plane,g=new THREE.Matrix4,l=new THREE.WebGLRenderTarget(m,n,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,
stencilBuffer:!1});THREE.Math.isPowerOfTwo(m)&&THREE.Math.isPowerOfTwo(n)||(l.texture.generateMipmaps=!1);this.material=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(k.uniforms),vertexShader:k.vertexShader,fragmentShader:k.fragmentShader,transparent:!0});this.material.uniforms.color.value=r;this.material.uniforms.tDiffuse.value=l.texture;this.material.uniforms.textureMatrix.value=g;var u=function(){var d=new THREE.Vector3,a=new THREE.Vector3,b=new THREE.Matrix4,c=new THREE.Vector3,
f=new THREE.Vector3;return function(e){d.setFromMatrixPosition(h.matrixWorld);a.setFromMatrixPosition(e.matrixWorld);c.subVectors(d,a);b.extractRotation(h.matrixWorld);f.set(0,0,1);f.applyMatrix4(b);return 0>c.dot(f)}}(),v=function(){var d=new THREE.Vector3,a=new THREE.Vector3,b=new THREE.Quaternion,c=new THREE.Vector3;return function(){h.matrixWorld.decompose(a,b,c);d.set(0,0,1).applyQuaternion(b).normalize();d.negate();p.setFromNormalAndCoplanarPoint(d,a)}}(),w=function(){var d=new THREE.Plane,
a=new THREE.Vector4,b=new THREE.Vector4;return function(c){f.matrixWorld.copy(c.matrixWorld);f.matrixWorldInverse.getInverse(f.matrixWorld);f.projectionMatrix.copy(c.projectionMatrix);f.far=c.far;d.copy(p);d.applyMatrix4(f.matrixWorldInverse);a.set(d.normal.x,d.normal.y,d.normal.z,d.constant);c=f.projectionMatrix;b.x=(Math.sign(a.x)+c.elements[8])/c.elements[0];b.y=(Math.sign(a.y)+c.elements[9])/c.elements[5];b.z=-1;b.w=(1+c.elements[10])/c.elements[14];a.multiplyScalar(2/a.dot(b));c.elements[2]=
a.x;c.elements[6]=a.y;c.elements[10]=a.z+1-t;c.elements[14]=a.w}}(),x=function(){var d=new THREE.Vector4;return function(a,b,c){h.visible=!1;var e=a.getRenderTarget(),g=a.vr.enabled,k=a.shadowMap.autoUpdate;a.vr.enabled=!1;a.shadowMap.autoUpdate=!1;a.render(b,f,l,!0);a.vr.enabled=g;a.shadowMap.autoUpdate=k;a.setRenderTarget(e);b=c.bounds;void 0!==b&&(c=a.getSize(),e=a.getPixelRatio(),d.x=b.x*c.width*e,d.y=b.y*c.height*e,d.z=b.z*c.width*e,d.w=b.w*c.height*e,a.state.viewport(d));h.visible=!0}}();this.onBeforeRender=
function(d,a,b){!0!==b.userData.refractor&&!0!==!u(b)&&(v(),g.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),g.multiply(b.projectionMatrix),g.multiply(b.matrixWorldInverse),g.multiply(h.matrixWorld),w(b),x(d,a,b))};this.getRenderTarget=function(){return l}};THREE.Refractor.prototype=Object.create(THREE.Mesh.prototype);THREE.Refractor.prototype.constructor=THREE.Refractor;
THREE.Refractor.RefractorShader={uniforms:{color:{type:"c",value:null},tDiffuse:{type:"t",value:null},textureMatrix:{type:"m4",value:null}},vertexShader:"uniform mat4 textureMatrix;\nvarying vec4 vUv;\nvoid main() {\n\tvUv \x3d textureMatrix * vec4( position, 1.0 );\n\tgl_Position \x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform vec3 color;\nuniform sampler2D tDiffuse;\nvarying vec4 vUv;\nfloat blendOverlay( float base, float blend ) {\n\treturn( base \x3c 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n}\nvec3 blendOverlay( vec3 base, vec3 blend ) {\n\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\n}\nvoid main() {\n\tvec4 base \x3d texture2DProj( tDiffuse, vUv );\n\tgl_FragColor \x3d vec4( blendOverlay( base.rgb, color ), 1.0 );\n}"};