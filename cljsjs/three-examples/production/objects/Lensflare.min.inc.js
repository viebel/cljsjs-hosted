THREE.Lensflare=function(){THREE.Mesh.call(this,THREE.Lensflare.Geometry,new THREE.MeshBasicMaterial({opacity:0,transparent:!0}));this.type="Lensflare";this.frustumCulled=!1;this.renderOrder=Infinity;var a=new THREE.Vector3,c=new THREE.DataTexture(new Uint8Array(768),16,16,THREE.RGBFormat);c.minFilter=THREE.NearestFilter;c.magFilter=THREE.NearestFilter;c.wrapS=THREE.ClampToEdgeWrapping;c.wrapT=THREE.ClampToEdgeWrapping;c.needsUpdate=!0;var e=new THREE.DataTexture(new Uint8Array(768),16,16,THREE.RGBFormat);
e.minFilter=THREE.NearestFilter;e.magFilter=THREE.NearestFilter;e.wrapS=THREE.ClampToEdgeWrapping;e.wrapT=THREE.ClampToEdgeWrapping;e.needsUpdate=!0;var g=THREE.Lensflare.Geometry,q=new THREE.RawShaderMaterial({uniforms:{scale:{value:null},screenPosition:{value:null}},vertexShader:"precision highp float;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nattribute vec3 position;\nvoid main() {\n\tgl_Position \x3d vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n}",fragmentShader:"precision highp float;\nvoid main() {\n\tgl_FragColor \x3d vec4( 1.0, 0.0, 1.0, 1.0 );\n}",
depthTest:!0,depthWrite:!1,transparent:!1}),u=new THREE.RawShaderMaterial({uniforms:{map:{value:c},scale:{value:null},screenPosition:{value:null}},vertexShader:"precision highp float;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nattribute vec3 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\n\tvUV \x3d uv;\n\tgl_Position \x3d vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n}",fragmentShader:"precision highp float;\nuniform sampler2D map;\nvarying vec2 vUV;\nvoid main() {\n\tgl_FragColor \x3d texture2D( map, vUV );\n}",
depthTest:!1,depthWrite:!1,transparent:!1}),y=new THREE.Mesh(g,q),k=[],r=THREE.LensflareElement.Shader,l=new THREE.RawShaderMaterial({uniforms:{map:{value:null},occlusionMap:{value:e},color:{value:new THREE.Color(16777215)},scale:{value:new THREE.Vector2},screenPosition:{value:new THREE.Vector3}},vertexShader:r.vertexShader,fragmentShader:r.fragmentShader,blending:THREE.AdditiveBlending,transparent:!0,depthWrite:!1}),z=new THREE.Mesh(g,l);this.addElement=function(a){k.push(a)};var v=new THREE.Vector2,
m=new THREE.Vector2,w=new THREE.Box2,b=new THREE.Vector4;this.onBeforeRender=function(h,f,n){b.copy(h.getCurrentViewport());f=b.w/b.z;var d=b.z/2,t=b.w/2,p=16/b.w;v.set(p*f,p);w.min.set(b.x,b.y);w.max.set(b.x+(b.z-16),b.y+(b.w-16));a.setFromMatrixPosition(this.matrixWorld);a.applyMatrix4(n.matrixWorldInverse);a.applyMatrix4(n.projectionMatrix);m.x=b.x+a.x*d+d-8;m.y=b.y+a.y*t+t-8;if(w.containsPoint(m)){h.copyFramebufferToTexture(m,c);d=q.uniforms;d.scale.value=v;d.screenPosition.value=a;h.renderBufferDirect(n,
null,g,q,y,null);h.copyFramebufferToTexture(m,e);d=u.uniforms;d.scale.value=v;d.screenPosition.value=a;h.renderBufferDirect(n,null,g,u,y,null);for(var t=2*-a.x,r=2*-a.y,x=0,A=k.length;x<A;x++)f=k[x],d=l.uniforms,d.color.value.copy(f.color),d.map.value=f.texture,d.screenPosition.value.x=a.x+t*f.distance,d.screenPosition.value.y=a.y+r*f.distance,p=f.size/b.w,f=b.w/b.z,d.scale.value.set(p*f,p),l.uniformsNeedUpdate=!0,h.renderBufferDirect(n,null,g,l,z,null)}};this.dispose=function(){q.dispose();u.dispose();
l.dispose();c.dispose();e.dispose();for(var a=0,b=k.length;a<b;a++)k[a].texture.dispose()}};THREE.Lensflare.prototype=Object.create(THREE.Mesh.prototype);THREE.Lensflare.prototype.constructor=THREE.Lensflare;THREE.Lensflare.prototype.isLensflare=!0;THREE.LensflareElement=function(a,c,e,g){this.texture=a;this.size=c||1;this.distance=e||0;this.color=g||new THREE.Color(16777215)};
THREE.LensflareElement.Shader={uniforms:{map:{value:null},occlusionMap:{value:null},color:{value:null},scale:{value:null},screenPosition:{value:null}},vertexShader:"precision highp float;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform sampler2D occlusionMap;\nattribute vec3 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\n\tvUV \x3d uv;\n\tvec2 pos \x3d position.xy;\n\tvec4 visibility \x3d texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\n\tvisibility +\x3d texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\n\tvisibility +\x3d texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\n\tvisibility +\x3d texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\n\tvisibility +\x3d texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\n\tvisibility +\x3d texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\n\tvisibility +\x3d texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\n\tvisibility +\x3d texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\n\tvisibility +\x3d texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\n\tvVisibility \x3d        visibility.r / 9.0;\n\tvVisibility *\x3d 1.0 - visibility.g / 9.0;\n\tvVisibility *\x3d       visibility.b / 9.0;\n\tgl_Position \x3d vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"precision highp float;\nuniform sampler2D map;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\n\tvec4 texture \x3d texture2D( map, vUV );\n\ttexture.a *\x3d vVisibility;\n\tgl_FragColor \x3d texture;\n\tgl_FragColor.rgb *\x3d color;\n}"};
THREE.Lensflare.Geometry=function(){var a=new THREE.BufferGeometry,c=new Float32Array([-1,-1,0,0,0,1,-1,0,1,0,1,1,0,1,1,-1,1,0,0,1]),c=new THREE.InterleavedBuffer(c,5);a.setIndex([0,1,2,0,2,3]);a.addAttribute("position",new THREE.InterleavedBufferAttribute(c,3,0,!1));a.addAttribute("uv",new THREE.InterleavedBufferAttribute(c,2,3,!1));return a}();