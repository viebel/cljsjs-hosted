THREE.FreiChenShader={uniforms:{tDiffuse:{value:null},aspect:{value:new THREE.Vector2(512,512)}},vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv \x3d uv;\ngl_Position \x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D tDiffuse;\nvarying vec2 vUv;\nuniform vec2 aspect;\nvec2 texel \x3d vec2(1.0 / aspect.x, 1.0 / aspect.y);\nmat3 G[9];\nconst mat3 g0 \x3d mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 \x3d mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 \x3d mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 \x3d mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 \x3d mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 \x3d mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 \x3d mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 \x3d mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 \x3d mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\nvoid main(void)\n{\nG[0] \x3d g0,\nG[1] \x3d g1,\nG[2] \x3d g2,\nG[3] \x3d g3,\nG[4] \x3d g4,\nG[5] \x3d g5,\nG[6] \x3d g6,\nG[7] \x3d g7,\nG[8] \x3d g8;\nmat3 I;\nfloat cnv[9];\nvec3 sample;\nfor (float i\x3d0.0; i\x3c3.0; i++) {\nfor (float j\x3d0.0; j\x3c3.0; j++) {\nsample \x3d texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] \x3d length(sample);\n}\n}\nfor (int i\x3d0; i\x3c9; i++) {\nfloat dp3 \x3d dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] \x3d dp3 * dp3;\n}\nfloat M \x3d (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\nfloat S \x3d (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\ngl_FragColor \x3d vec4(vec3(sqrt(M/S)), 1.0);\n}"};