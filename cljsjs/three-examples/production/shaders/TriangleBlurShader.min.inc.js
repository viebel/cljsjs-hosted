THREE.TriangleBlurShader={uniforms:{texture:{value:null},delta:{value:new THREE.Vector2(1,1)}},vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv \x3d uv;\ngl_Position \x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"#include \x3ccommon\x3e\n#define ITERATIONS 10.0\nuniform sampler2D texture;\nuniform vec2 delta;\nvarying vec2 vUv;\nvoid main() {\nvec4 color \x3d vec4( 0.0 );\nfloat total \x3d 0.0;\nfloat offset \x3d rand( vUv );\nfor ( float t \x3d -ITERATIONS; t \x3c\x3d ITERATIONS; t ++ ) {\nfloat percent \x3d ( t + offset - 0.5 ) / ITERATIONS;\nfloat weight \x3d 1.0 - abs( percent );\ncolor +\x3d texture2D( texture, vUv + delta * percent ) * weight;\ntotal +\x3d weight;\n}\ngl_FragColor \x3d color / total;\n}"};