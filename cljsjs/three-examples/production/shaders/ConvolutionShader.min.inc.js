THREE.ConvolutionShader={defines:{KERNEL_SIZE_FLOAT:"25.0",KERNEL_SIZE_INT:"25"},uniforms:{tDiffuse:{value:null},uImageIncrement:{value:new THREE.Vector2(.001953125,0)},cKernel:{value:[]}},vertexShader:"uniform vec2 uImageIncrement;\nvarying vec2 vUv;\nvoid main() {\nvUv \x3d uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\ngl_Position \x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform float cKernel[ KERNEL_SIZE_INT ];\nuniform sampler2D tDiffuse;\nuniform vec2 uImageIncrement;\nvarying vec2 vUv;\nvoid main() {\nvec2 imageCoord \x3d vUv;\nvec4 sum \x3d vec4( 0.0, 0.0, 0.0, 0.0 );\nfor( int i \x3d 0; i \x3c KERNEL_SIZE_INT; i ++ ) {\nsum +\x3d texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\nimageCoord +\x3d uImageIncrement;\n}\ngl_FragColor \x3d sum;\n}",
buildKernel:function(e){var a,b,d,f,c=2*Math.ceil(3*e)+1;25<c&&(c=25);f=.5*(c-1);b=Array(c);for(a=d=0;a<c;++a){var g=a-f;b[a]=Math.exp(-(g*g)/(2*e*e));d+=b[a]}for(a=0;a<c;++a)b[a]/=d;return b}};