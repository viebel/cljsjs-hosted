THREE.HueSaturationShader={uniforms:{tDiffuse:{value:null},hue:{value:0},saturation:{value:0}},vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv \x3d uv;\ngl_Position \x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D tDiffuse;\nuniform float hue;\nuniform float saturation;\nvarying vec2 vUv;\nvoid main() {\ngl_FragColor \x3d texture2D( tDiffuse, vUv );\nfloat angle \x3d hue * 3.14159265;\nfloat s \x3d sin(angle), c \x3d cos(angle);\nvec3 weights \x3d (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\nfloat len \x3d length(gl_FragColor.rgb);\ngl_FragColor.rgb \x3d vec3(\ndot(gl_FragColor.rgb, weights.xyz),\ndot(gl_FragColor.rgb, weights.zxy),\ndot(gl_FragColor.rgb, weights.yzx)\n);\nfloat average \x3d (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\nif (saturation \x3e 0.0) {\ngl_FragColor.rgb +\x3d (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\n} else {\ngl_FragColor.rgb +\x3d (average - gl_FragColor.rgb) * (-saturation);\n}\n}"};