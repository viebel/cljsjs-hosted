THREE.DigitalGlitch={uniforms:{tDiffuse:{value:null},tDisp:{value:null},byp:{value:0},amount:{value:.08},angle:{value:.02},seed:{value:.02},seed_x:{value:.02},seed_y:{value:.02},distortion_x:{value:.5},distortion_y:{value:.6},col_s:{value:.05}},vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv \x3d uv;\ngl_Position \x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform int byp;\nuniform sampler2D tDiffuse;\nuniform sampler2D tDisp;\nuniform float amount;\nuniform float angle;\nuniform float seed;\nuniform float seed_x;\nuniform float seed_y;\nuniform float distortion_x;\nuniform float distortion_y;\nuniform float col_s;\nvarying vec2 vUv;\nfloat rand(vec2 co){\nreturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nvoid main() {\nif(byp\x3c1) {\nvec2 p \x3d vUv;\nfloat xs \x3d floor(gl_FragCoord.x / 0.5);\nfloat ys \x3d floor(gl_FragCoord.y / 0.5);\nvec4 normal \x3d texture2D (tDisp, p*seed*seed);\nif(p.y\x3cdistortion_x+col_s \x26\x26 p.y\x3edistortion_x-col_s*seed) {\nif(seed_x\x3e0.){\np.y \x3d 1. - (p.y + distortion_y);\n}\nelse {\np.y \x3d distortion_y;\n}\n}\nif(p.x\x3cdistortion_y+col_s \x26\x26 p.x\x3edistortion_y-col_s*seed) {\nif(seed_y\x3e0.){\np.x\x3ddistortion_x;\n}\nelse {\np.x \x3d 1. - (p.x + distortion_x);\n}\n}\np.x+\x3dnormal.x*seed_x*(seed/5.);\np.y+\x3dnormal.y*seed_y*(seed/5.);\nvec2 offset \x3d amount * vec2( cos(angle), sin(angle));\nvec4 cr \x3d texture2D(tDiffuse, p + offset);\nvec4 cga \x3d texture2D(tDiffuse, p);\nvec4 cb \x3d texture2D(tDiffuse, p - offset);\ngl_FragColor \x3d vec4(cr.r, cga.g, cb.b, cga.a);\nvec4 snow \x3d 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\ngl_FragColor \x3d gl_FragColor+ snow;\n}\nelse {\ngl_FragColor\x3dtexture2D (tDiffuse, vUv);\n}\n}"};