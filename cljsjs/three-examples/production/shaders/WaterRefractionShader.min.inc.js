THREE.WaterRefractionShader={uniforms:{color:{type:"c",value:null},time:{type:"f",value:0},tDiffuse:{type:"t",value:null},tDudv:{type:"t",value:null},textureMatrix:{type:"m4",value:null}},vertexShader:"uniform mat4 textureMatrix;\nvarying vec2 vUv;\nvarying vec4 vUvRefraction;\nvoid main() {\n\tvUv \x3d uv;\n\tvUvRefraction \x3d textureMatrix * vec4( position, 1.0 );\n\tgl_Position \x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform vec3 color;\nuniform float time;\nuniform sampler2D tDiffuse;\nuniform sampler2D tDudv;\nvarying vec2 vUv;\nvarying vec4 vUvRefraction;\nfloat blendOverlay( float base, float blend ) {\n\treturn( base \x3c 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n}\nvec3 blendOverlay( vec3 base, vec3 blend ) {\n\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ),blendOverlay( base.b, blend.b ) );\n}\nvoid main() {\n float waveStrength \x3d 0.1;\n float waveSpeed \x3d 0.03;\n\tvec2 distortedUv \x3d texture2D( tDudv, vec2( vUv.x + time * waveSpeed, vUv.y ) ).rg * waveStrength;\n\tdistortedUv \x3d vUv.xy + vec2( distortedUv.x, distortedUv.y + time * waveSpeed );\n\tvec2 distortion \x3d ( texture2D( tDudv, distortedUv ).rg * 2.0 - 1.0 ) * waveStrength;\n vec4 uv \x3d vec4( vUvRefraction );\n uv.xy +\x3d distortion;\n\tvec4 base \x3d texture2DProj( tDiffuse, uv );\n\tgl_FragColor \x3d vec4( blendOverlay( base.rgb, color ), 1.0 );\n}"};