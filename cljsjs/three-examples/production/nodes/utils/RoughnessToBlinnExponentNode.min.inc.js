THREE.RoughnessToBlinnExponentNode=function(){THREE.TempNode.call(this,"fv1")};THREE.RoughnessToBlinnExponentNode.getSpecularMIPLevel=new THREE.FunctionNode("float getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\tfloat maxMIPLevelScalar \x3d float( maxMIPLevel );\n\tfloat desiredMIPLevel \x3d maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n}");
THREE.RoughnessToBlinnExponentNode.prototype=Object.create(THREE.TempNode.prototype);THREE.RoughnessToBlinnExponentNode.prototype.constructor=THREE.RoughnessToBlinnExponentNode;THREE.RoughnessToBlinnExponentNode.prototype.nodeType="RoughnessToBlinnExponent";
THREE.RoughnessToBlinnExponentNode.prototype.generate=function(a,b){var c=a.material;if(a.isShader("fragment")){if(c.isDefined("PHYSICAL"))return a.include(THREE.RoughnessToBlinnExponentNode.getSpecularMIPLevel),a.isCache("clearCoat")?a.format("getSpecularMIPLevel( Material_ClearCoat_BlinnShininessExponent( material ), 8 )",this.type,b):a.format("getSpecularMIPLevel( Material_BlinnShininessExponent( material ), 8 )",this.type,b);console.warn("THREE.RoughnessToBlinnExponentNode is only compatible with PhysicalMaterial.");
return a.format("0.0",this.type,b)}console.warn("THREE.RoughnessToBlinnExponentNode is not compatible with "+a.shader+" shader.");return a.format("0.0",this.type,b)};