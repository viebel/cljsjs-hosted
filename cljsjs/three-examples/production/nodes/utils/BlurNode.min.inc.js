THREE.BlurNode=function(a,b,d,e){THREE.TempNode.call(this,"v4");this.value=a;this.coord=b||new THREE.UVNode;this.radius=new THREE.Vector2Node(1,1);this.size=e;this.blurY=this.blurX=!0;this.horizontal=new THREE.FloatNode(.015625);this.vertical=new THREE.FloatNode(.015625)};THREE.BlurNode.fBlurX=new THREE.FunctionNode("vec4 blurX( sampler2D texture, vec2 uv, float s ) {\n\tvec4 sum \x3d vec4( 0.0 );\n\tsum +\x3d texture2D( texture, vec2( uv.x - 4.0 * s, uv.y ) ) * 0.051;\n\tsum +\x3d texture2D( texture, vec2( uv.x - 3.0 * s, uv.y ) ) * 0.0918;\n\tsum +\x3d texture2D( texture, vec2( uv.x - 2.0 * s, uv.y ) ) * 0.12245;\n\tsum +\x3d texture2D( texture, vec2( uv.x - 1.0 * s, uv.y ) ) * 0.1531;\n\tsum +\x3d texture2D( texture, vec2( uv.x, uv.y ) ) * 0.1633;\n\tsum +\x3d texture2D( texture, vec2( uv.x + 1.0 * s, uv.y ) ) * 0.1531;\n\tsum +\x3d texture2D( texture, vec2( uv.x + 2.0 * s, uv.y ) ) * 0.12245;\n\tsum +\x3d texture2D( texture, vec2( uv.x + 3.0 * s, uv.y ) ) * 0.0918;\n\tsum +\x3d texture2D( texture, vec2( uv.x + 4.0 * s, uv.y ) ) * 0.051;\n\treturn sum;\n}");
THREE.BlurNode.fBlurY=new THREE.FunctionNode("vec4 blurY( sampler2D texture, vec2 uv, float s ) {\n\tvec4 sum \x3d vec4( 0.0 );\n\tsum +\x3d texture2D( texture, vec2( uv.x, uv.y - 4.0 * s ) ) * 0.051;\n\tsum +\x3d texture2D( texture, vec2( uv.x, uv.y - 3.0 * s ) ) * 0.0918;\n\tsum +\x3d texture2D( texture, vec2( uv.x, uv.y - 2.0 * s ) ) * 0.12245;\n\tsum +\x3d texture2D( texture, vec2( uv.x, uv.y - 1.0 * s ) ) * 0.1531;\n\tsum +\x3d texture2D( texture, vec2( uv.x, uv.y ) ) * 0.1633;\n\tsum +\x3d texture2D( texture, vec2( uv.x, uv.y + 1.0 * s ) ) * 0.1531;\n\tsum +\x3d texture2D( texture, vec2( uv.x, uv.y + 2.0 * s ) ) * 0.12245;\n\tsum +\x3d texture2D( texture, vec2( uv.x, uv.y + 3.0 * s ) ) * 0.0918;\n\tsum +\x3d texture2D( texture, vec2( uv.x, uv.y + 4.0 * s ) ) * 0.051;\n\treturn sum;\n}");
THREE.BlurNode.prototype=Object.create(THREE.TempNode.prototype);THREE.BlurNode.prototype.constructor=THREE.BlurNode;THREE.BlurNode.prototype.nodeType="Blur";THREE.BlurNode.prototype.updateFrame=function(a){this.size?(this.horizontal.number=this.radius.x/this.size.x,this.vertical.number=this.radius.y/this.size.y):this.value.value&&this.value.value.image&&(a=this.value.value.image,this.horizontal.number=this.radius.x/a.width,this.vertical.number=this.radius.y/a.height)};
THREE.BlurNode.prototype.generate=function(a,b){var d=THREE.BlurNode.fBlurX,e=THREE.BlurNode.fBlurY;a.include(d);a.include(e);if(a.isShader("fragment")){var c=[];this.blurX&&c.push(d.name+"("+this.value.build(a,"sampler2D")+","+this.coord.build(a,"v2")+","+this.horizontal.build(a,"fv1")+")");this.blurY&&c.push(e.name+"("+this.value.build(a,"sampler2D")+","+this.coord.build(a,"v2")+","+this.vertical.build(a,"fv1")+")");d=2==c.length?"("+c.join("+")+"/2.0)":c.length?"("+c[0]+")":"vec4( 0.0 )";return a.format(d,
this.getType(a),b)}console.warn("THREE.BlurNode is not compatible with "+a.shader+" shader.");return a.format("vec4( 0.0 )",this.getType(a),b)};THREE.BlurNode.prototype.toJSON=function(a){var b=this.getJSONNode(a);b||(b=this.createJSONNode(a),b.value=this.value.toJSON(a).uuid,b.coord=this.coord.toJSON(a).uuid,b.radius=this.radius.toJSON(a).uuid,this.size&&(b.size={x:this.size.x,y:this.size.y}),b.blurX=this.blurX,b.blurY=this.blurY);return b};