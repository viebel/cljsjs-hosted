THREE.ReflectNode=function(a){THREE.TempNode.call(this,"v3",{unique:!0});this.scope=a||THREE.ReflectNode.CUBE};THREE.ReflectNode.CUBE="cube";THREE.ReflectNode.SPHERE="sphere";THREE.ReflectNode.VECTOR="vector";THREE.ReflectNode.prototype=Object.create(THREE.TempNode.prototype);THREE.ReflectNode.prototype.constructor=THREE.ReflectNode;THREE.ReflectNode.prototype.nodeType="Reflect";THREE.ReflectNode.prototype.getType=function(a){switch(this.scope){case THREE.ReflectNode.SPHERE:return"v2"}return this.type};
THREE.ReflectNode.prototype.generate=function(a,c){var b;switch(this.scope){case THREE.ReflectNode.VECTOR:a.material.addFragmentNode("vec3 reflectVec \x3d inverseTransformDirection( reflect( -normalize( vViewPosition ), normal ), viewMatrix );");b="reflectVec";break;case THREE.ReflectNode.CUBE:b=(new THREE.ReflectNode(THREE.ReflectNode.VECTOR)).build(a,"v3");a.material.addFragmentNode("vec3 reflectCubeVec \x3d vec3( -1.0 * "+b+".x, "+b+".yz );");b="reflectCubeVec";break;case THREE.ReflectNode.SPHERE:b=
(new THREE.ReflectNode(THREE.ReflectNode.VECTOR)).build(a,"v3"),a.material.addFragmentNode("vec2 reflectSphereVec \x3d normalize((viewMatrix * vec4("+b+", 0.0 )).xyz + vec3(0.0,0.0,1.0)).xy * 0.5 + 0.5;"),b="reflectSphereVec"}return a.format(b,this.getType(this.type),c)};THREE.ReflectNode.prototype.toJSON=function(a){var c=this.getJSONNode(a);c||(c=this.createJSONNode(a),c.scope=this.scope);return c};