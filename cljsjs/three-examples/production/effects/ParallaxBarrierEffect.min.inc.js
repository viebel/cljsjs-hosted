THREE.ParallaxBarrierEffect=function(c){var k=new THREE.OrthographicCamera(-1,1,1,-1,0,1),h=new THREE.Scene,d=new THREE.StereoCamera,a={minFilter:THREE.LinearFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat},e=new THREE.WebGLRenderTarget(512,512,a),f=new THREE.WebGLRenderTarget(512,512,a),a=new THREE.ShaderMaterial({uniforms:{mapLeft:{value:e.texture},mapRight:{value:f.texture}},vertexShader:"varying vec2 vUv;\nvoid main() {\n\tvUv \x3d vec2( uv.x, uv.y );\n\tgl_Position \x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
fragmentShader:"uniform sampler2D mapLeft;\nuniform sampler2D mapRight;\nvarying vec2 vUv;\nvoid main() {\n\tvec2 uv \x3d vUv;\n\tif ( ( mod( gl_FragCoord.y, 2.0 ) ) \x3e 1.00 ) {\n\t\tgl_FragColor \x3d texture2D( mapLeft, uv );\n\t} else {\n\t\tgl_FragColor \x3d texture2D( mapRight, uv );\n\t}\n}"}),a=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),a);h.add(a);this.setSize=function(g,b){c.setSize(g,b);var a=c.getPixelRatio();e.setSize(g*a,b*a);f.setSize(g*a,b*a)};this.render=function(a,b){a.updateMatrixWorld();
null===b.parent&&b.updateMatrixWorld();d.update(b);c.render(a,d.cameraL,e,!0);c.render(a,d.cameraR,f,!0);c.render(h,k)}};