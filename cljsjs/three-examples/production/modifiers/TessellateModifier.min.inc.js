THREE.TessellateModifier=function(e){this.maxEdgeLength=e};
THREE.TessellateModifier.prototype.modify=function(e){for(var b,t=[],p=[],u=this.maxEdgeLength*this.maxEdgeLength,m=0,v=e.faceVertexUvs.length;m<v;m++)p[m]=[];m=0;for(v=e.faces.length;m<v;m++)if(b=e.faces[m],b instanceof THREE.Face3){var a=b.a,h=b.b,g=b.c,k=e.vertices[a],l=e.vertices[h],f=e.vertices[g],q=k.distanceToSquared(l),r=l.distanceToSquared(f),w=k.distanceToSquared(f);if(q>u||r>u||w>u){var n=e.vertices.length,c=b.clone(),d=b.clone();q>=r&&q>=w?(k=k.clone(),k.lerp(l,.5),c.a=a,c.b=n,c.c=g,d.a=
n,d.b=h,d.c=g,3===b.vertexNormals.length&&(a=b.vertexNormals[0].clone(),a.lerp(b.vertexNormals[1],.5),c.vertexNormals[1].copy(a),d.vertexNormals[0].copy(a)),3===b.vertexColors.length&&(a=b.vertexColors[0].clone(),a.lerp(b.vertexColors[1],.5),c.vertexColors[1].copy(a),d.vertexColors[0].copy(a)),b=0):r>=q&&r>=w?(k=l.clone(),k.lerp(f,.5),c.a=a,c.b=h,c.c=n,d.a=n,d.b=g,d.c=a,3===b.vertexNormals.length&&(a=b.vertexNormals[1].clone(),a.lerp(b.vertexNormals[2],.5),c.vertexNormals[2].copy(a),d.vertexNormals[0].copy(a),
d.vertexNormals[1].copy(b.vertexNormals[2]),d.vertexNormals[2].copy(b.vertexNormals[0])),3===b.vertexColors.length&&(a=b.vertexColors[1].clone(),a.lerp(b.vertexColors[2],.5),c.vertexColors[2].copy(a),d.vertexColors[0].copy(a),d.vertexColors[1].copy(b.vertexColors[2]),d.vertexColors[2].copy(b.vertexColors[0])),b=1):(k=k.clone(),k.lerp(f,.5),c.a=a,c.b=h,c.c=n,d.a=n,d.b=h,d.c=g,3===b.vertexNormals.length&&(a=b.vertexNormals[0].clone(),a.lerp(b.vertexNormals[2],.5),c.vertexNormals[2].copy(a),d.vertexNormals[0].copy(a)),
3===b.vertexColors.length&&(a=b.vertexColors[0].clone(),a.lerp(b.vertexColors[2],.5),c.vertexColors[2].copy(a),d.vertexColors[0].copy(a)),b=2);t.push(c,d);e.vertices.push(k);c=0;for(d=e.faceVertexUvs.length;c<d;c++)e.faceVertexUvs[c].length&&(g=e.faceVertexUvs[c][m],a=g[0],h=g[1],l=g[2],0===b?(f=a.clone(),f.lerp(h,.5),g=[a.clone(),f.clone(),l.clone()],a=[f.clone(),h.clone(),l.clone()]):1===b?(f=h.clone(),f.lerp(l,.5),g=[a.clone(),h.clone(),f.clone()],a=[f.clone(),l.clone(),a.clone()]):(f=a.clone(),
f.lerp(l,.5),g=[a.clone(),h.clone(),f.clone()],a=[f.clone(),h.clone(),l.clone()]),p[c].push(g,a))}else for(t.push(b),c=0,d=e.faceVertexUvs.length;c<d;c++)p[c].push(e.faceVertexUvs[c][m])}e.faces=t;e.faceVertexUvs=p};