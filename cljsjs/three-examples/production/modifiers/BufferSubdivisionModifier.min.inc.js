THREE.Face3.prototype.set=function(b,a,d){this.a=b;this.b=a;this.c=d};var TypedArrayHelper=function(b,a,d,c,f,e){this.array_type=c;this.register_type=d;this.unit_size=f;this.accessors=e;this.buffer=new c(b*f);this.register=[];this.length=0;this.real_length=b;this.available_registers=a;for(b=0;b<a;b++)this.register.push(new d)};
TypedArrayHelper.prototype={constructor:TypedArrayHelper,index_to_register:function(b,a,d){d=b*this.unit_size;if(a>=this.available_registers)throw Error("THREE.BufferSubdivisionModifier: Not enough registers in TypedArrayHelper.");if(b>this.length)throw Error("THREE.BufferSubdivisionModifier: Index is out of range in TypedArrayHelper.");for(b=0;b<this.unit_size;b++)this.register[a][this.accessors[b]]=this.buffer[d+b]},resize:function(b){0===b&&(b=8);if(b<this.length)this.buffer=this.buffer.subarray(0,
this.length*this.unit_size);else{var a;this.buffer.length<b*this.unit_size?(a=new this.array_type(b*this.unit_size),a.set(this.buffer)):(a=new this.array_type(b*this.unit_size),a.set(this.buffer.subarray(0,this.length*this.unit_size)));this.buffer=a;this.real_length=b}},from_existing:function(b){this.buffer=new this.array_type(b.length);this.buffer.set(b);this.real_length=this.length=b.length/this.unit_size},push_element:function(b){this.length+1>this.real_length&&this.resize(2*this.real_length);
for(var a=this.length*this.unit_size,d=0;d<this.unit_size;d++)this.buffer[a+d]=b[this.accessors[d]];this.length++},trim_size:function(){this.length<this.real_length&&this.resize(this.length)}};
function convertGeometryToIndexedBuffer(b){for(var a=new THREE.BufferGeometry,d=new TypedArrayHelper(b.vertices.length,0,THREE.Vector3,Float32Array,3,["x","y","z"]),c=new TypedArrayHelper(b.faces.length,0,THREE.Face3,Uint32Array,3,["a","b","c"]),f=new TypedArrayHelper(9*b.faceVertexUvs[0].length,0,THREE.Vector2,Float32Array,2,["x","y"]),e=0,k=b.vertices.length;e<k;e++)d.push_element(b.vertices[e]);e=0;for(k=b.faces.length;e<k;e++)c.push_element(b.faces[e]);e=0;for(k=b.faceVertexUvs[0].length;e<k;e++)f.push_element(b.faceVertexUvs[0][e][0]),
f.push_element(b.faceVertexUvs[0][e][1]),f.push_element(b.faceVertexUvs[0][e][2]);c.trim_size();d.trim_size();f.trim_size();a.setIndex(new THREE.BufferAttribute(c.buffer,3));a.addAttribute("position",new THREE.BufferAttribute(d.buffer,3));a.addAttribute("uv",new THREE.BufferAttribute(f.buffer,2));return a}
function compute_vertex_normals(b){var a=["x","y","z"],d=new TypedArrayHelper(0,5,THREE.Vector3,Float32Array,3,a),c=new TypedArrayHelper(0,3,THREE.Face3,Uint32Array,3,["a","b","c"]);d.from_existing(b.getAttribute("position").array);var a=new TypedArrayHelper(3*d.length,4,THREE.Vector3,Float32Array,3,a),f=new TypedArrayHelper(d.length,1,function(){this.x=0},Float32Array,1,["x"]);a.length=d.length;c.from_existing(b.index.array);for(var e,k=[0,0,0],l=0,h=c.length;l<h;l++)c.index_to_register(l,0),d.index_to_register(c.register[0].a,
0),d.index_to_register(c.register[0].b,1),d.index_to_register(c.register[0].c,2),a.register[0].subVectors(d.register[1],d.register[0]),a.register[1].subVectors(d.register[2],d.register[1]),a.register[0].cross(a.register[1]),e=Math.abs(a.register[0].length()),f.buffer[c.register[0].a]+=e,f.buffer[c.register[0].b]+=e,f.buffer[c.register[0].c]+=e;l=0;for(h=c.length;l<h;l++)c.index_to_register(l,0),d.index_to_register(c.register[0].a,0),d.index_to_register(c.register[0].b,1),d.index_to_register(c.register[0].c,
2),a.register[0].subVectors(d.register[1],d.register[0]),a.register[1].subVectors(d.register[2],d.register[0]),a.register[3].set(0,0,0),a.register[3].x=a.register[0].y*a.register[1].z-a.register[0].z*a.register[1].y,a.register[3].y=a.register[0].z*a.register[1].x-a.register[0].x*a.register[1].z,a.register[3].z=a.register[0].x*a.register[1].y-a.register[0].y*a.register[1].x,a.register[0].cross(a.register[1]),e=Math.abs(a.register[0].length()),k[0]=e/f.buffer[c.register[0].a],k[1]=e/f.buffer[c.register[0].b],
k[2]=e/f.buffer[c.register[0].c],a.buffer[3*c.register[0].a+0]+=a.register[3].x*k[0],a.buffer[3*c.register[0].a+1]+=a.register[3].y*k[0],a.buffer[3*c.register[0].a+2]+=a.register[3].z*k[0],a.buffer[3*c.register[0].b+0]+=a.register[3].x*k[1],a.buffer[3*c.register[0].b+1]+=a.register[3].y*k[1],a.buffer[3*c.register[0].b+2]+=a.register[3].z*k[1],a.buffer[3*c.register[0].c+0]+=a.register[3].x*k[2],a.buffer[3*c.register[0].c+1]+=a.register[3].y*k[2],a.buffer[3*c.register[0].c+2]+=a.register[3].z*k[2];
a.trim_size();b.addAttribute("normal",new THREE.BufferAttribute(a.buffer,3))}
function unIndexIndexedGeometry(b){var a=["x","y","z"],d=["x","y"],c=new TypedArrayHelper(0,3,THREE.Vector3,Float32Array,3,a),f=new TypedArrayHelper(0,3,THREE.Face3,Uint32Array,3,["a","b","c"]),e=new TypedArrayHelper(0,3,THREE.Vector2,Float32Array,2,d),k=new TypedArrayHelper(0,3,THREE.Vector3,Float32Array,3,a);c.from_existing(b.getAttribute("position").array);f.from_existing(b.index.array);e.from_existing(b.getAttribute("uv").array);compute_vertex_normals(b);k.from_existing(b.getAttribute("normal").array);
for(var l=new TypedArrayHelper(3*f.length,3,THREE.Vector3,Float32Array,3,a),a=new TypedArrayHelper(3*f.length,3,THREE.Vector3,Float32Array,3,a),d=new TypedArrayHelper(3*f.length,3,THREE.Vector2,Float32Array,2,d),h=0,z=f.length;h<z;h++)f.index_to_register(h,0),c.index_to_register(f.register[0].a,0),c.index_to_register(f.register[0].b,1),c.index_to_register(f.register[0].c,2),l.push_element(c.register[0]),l.push_element(c.register[1]),l.push_element(c.register[2]),0!==e.length&&(e.index_to_register(3*
h+0,0),e.index_to_register(3*h+1,1),e.index_to_register(3*h+2,2),d.push_element(e.register[0]),d.push_element(e.register[1]),d.push_element(e.register[2])),k.index_to_register(f.register[0].a,0),k.index_to_register(f.register[0].b,1),k.index_to_register(f.register[0].c,2),a.push_element(k.register[0]),a.push_element(k.register[1]),a.push_element(k.register[2]);l.trim_size();d.trim_size();a.trim_size();b.index=null;b.addAttribute("position",new THREE.BufferAttribute(l.buffer,3));b.addAttribute("normal",
new THREE.BufferAttribute(a.buffer,3));0!==d.length&&b.addAttribute("uv",new THREE.BufferAttribute(d.buffer,2));return b}THREE.BufferSubdivisionModifier=function(b){this.subdivisions=void 0===b?1:b};
THREE.BufferSubdivisionModifier.prototype.modify=function(b){b instanceof THREE.Geometry?(b.mergeVertices(),"undefined"===typeof b.normals&&(b.normals=[]),b=convertGeometryToIndexedBuffer(b)):b instanceof THREE.BufferGeometry||console.error("THREE.BufferSubdivisionModifier: Geometry is not an instance of THREE.BufferGeometry or THREE.Geometry");for(var a=this.subdivisions;0<a--;)this.smooth(b);return unIndexIndexedGeometry(b)};
var edge_type=function(b,a){this.a=b;this.b=a;this.faces=[];this.newEdge=null};
(function(){function b(a,b,c){return c[Math.min(a,b)+"_"+Math.max(a,b)]}function a(a,b,c,d,e,f){var g=Math.min(a,b),k=Math.max(a,b);c=g+"_"+k;c in d?g=d[c]:(g=new edge_type(g,k),d[c]=g);g.faces.push(e);f[a].edges.push(g);f[b].edges.push(g)}function d(a,b){return Math.abs(b-a)/2+Math.min(a,b)}function c(a,b,c,d){a.push_element(b);a.push_element(c);a.push_element(d)}var f=["a","b","c"],e=["x","y","z"],k=["x","y"];THREE.BufferSubdivisionModifier.prototype.smooth=function(l){var h,z,A,m,p,g,v,q,n,x,B;
h=new TypedArrayHelper(0,3,THREE.Vector3,Float32Array,3,e);z=new TypedArrayHelper(0,3,THREE.Face3,Uint32Array,3,f);A=new TypedArrayHelper(0,3,THREE.Vector2,Float32Array,2,k);h.from_existing(l.getAttribute("position").array);z.from_existing(l.index.array);A.from_existing(l.getAttribute("uv").array);var D=!1;"undefined"!==typeof A&&0!==A.length&&(D=!0);p=Array(h.length);B={};var w;m=0;for(q=h.length;m<q;m++)p[m]={edges:[]};m=0;for(q=z.length;m<q;m++)z.index_to_register(m,0),w=z.register[0],a(w.a,w.b,
h,B,m,p),a(w.b,w.c,h,B,m,p),a(w.c,w.a,h,B,m,p);m=new TypedArrayHelper(2*l.getAttribute("position").array.length/3,2,THREE.Vector3,Float32Array,3,e);var r,t,u,y=m.register[1];for(v in B){q=B[v];w=m.register[0];g=.375;t=.125;u=q.faces.length;2!==u&&(g=.5,t=0);h.index_to_register(q.a,0);h.index_to_register(q.b,1);w.addVectors(h.register[0],h.register[1]).multiplyScalar(g);y.set(0,0,0);for(n=0;n<u;n++){z.index_to_register(q.faces[n],0);g=z.register[0];for(x=0;3>x&&(h.index_to_register(g[f[x]],2),r=h.register[2],
g[f[x]]===q.a||g[f[x]]===q.b);x++);y.add(r)}y.multiplyScalar(t);w.add(y);q.newEdge=m.length;m.push_element(w)}w=m.length;var C;v=0;for(q=h.length;v<q;v++){h.index_to_register(v,0,e);n=h.register[0];u=p[v].edges;g=u.length;3===g?C=.1875:3<g&&(C=3/(8*g));r=1-g*C;t=C;2>=g&&2===g&&(r=.75,t=.125);x=n.multiplyScalar(r);y.set(0,0,0);for(n=0;n<g;n++)r=u[n],r=r.a!==v?r.a:r.b,h.index_to_register(r,1,e),y.add(h.register[1]);y.multiplyScalar(t);x.add(y);m.push_element(x,e)}h=new TypedArrayHelper(4*l.index.array.length/
3,1,THREE.Face3,Float32Array,3,f);p=new TypedArrayHelper(4*l.getAttribute("uv").array.length/2,3,THREE.Vector2,Float32Array,2,k);C=p.register[0];r=p.register[1];y=p.register[2];n=h.register[0];v=0;for(q=z.length;v<q;v++)z.index_to_register(v,0),g=z.register[0],t=b(g.a,g.b,B).newEdge,u=b(g.b,g.c,B).newEdge,x=b(g.c,g.a,B).newEdge,n.set(t,u,x),h.push_element(n),n.set(g.a+w,t,x),h.push_element(n),n.set(g.b+w,u,t),h.push_element(n),n.set(g.c+w,x,u),h.push_element(n),!0===D&&(A.index_to_register(3*v+0,
0),A.index_to_register(3*v+1,1),A.index_to_register(3*v+2,2),g=A.register[0],t=A.register[1],u=A.register[2],C.set(d(g.x,t.x),d(g.y,t.y)),r.set(d(t.x,u.x),d(t.y,u.y)),y.set(d(g.x,u.x),d(g.y,u.y)),c(p,C,r,y),c(p,g,C,y),c(p,t,r,C),c(p,u,y,r));h.trim_size();m.trim_size();p.trim_size();l.setIndex(new THREE.BufferAttribute(h.buffer,3));l.addAttribute("position",new THREE.BufferAttribute(m.buffer,3));l.addAttribute("uv",new THREE.BufferAttribute(p.buffer,2))}})();