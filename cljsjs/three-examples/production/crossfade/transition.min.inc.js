function Transition(d,e){this.scene=new THREE.Scene;this.cameraOrtho=new THREE.OrthographicCamera(window.innerWidth/-2,window.innerWidth/2,window.innerHeight/2,window.innerHeight/-2,-10,10);this.textures=[];for(var c=new THREE.TextureLoader,b=0;6>b;b++)this.textures[b]=c.load("textures/transition/transition"+(b+1)+".png");this.quadmaterial=new THREE.ShaderMaterial({uniforms:{tDiffuse1:{value:null},tDiffuse2:{value:null},mixRatio:{value:0},threshold:{value:.1},useTexture:{value:1},tMixTexture:{value:this.textures[0]}},
vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv \x3d vec2( uv.x, uv.y );\ngl_Position \x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform float mixRatio;\nuniform sampler2D tDiffuse1;\nuniform sampler2D tDiffuse2;\nuniform sampler2D tMixTexture;\nuniform int useTexture;\nuniform float threshold;\nvarying vec2 vUv;\nvoid main() {\nvec4 texel1 \x3d texture2D( tDiffuse1, vUv );\nvec4 texel2 \x3d texture2D( tDiffuse2, vUv );\nif (useTexture\x3d\x3d1) {\nvec4 transitionTexel \x3d texture2D( tMixTexture, vUv );\nfloat r \x3d mixRatio * (1.0 + threshold * 2.0) - threshold;\nfloat mixf\x3dclamp((transitionTexel.r - r)*(1.0/threshold), 0.0, 1.0);\ngl_FragColor \x3d mix( texel1, texel2, mixf );\n} else {\ngl_FragColor \x3d mix( texel2, texel1, mixRatio );\n}\n}"});
c=new THREE.PlaneBufferGeometry(window.innerWidth,window.innerHeight);this.quad=new THREE.Mesh(c,this.quadmaterial);this.scene.add(this.quad);this.sceneA=d;this.sceneB=e;this.quadmaterial.uniforms.tDiffuse1.value=d.fbo.texture;this.quadmaterial.uniforms.tDiffuse2.value=e.fbo.texture;this.needChange=!1;this.setTextureThreshold=function(a){this.quadmaterial.uniforms.threshold.value=a};this.useTexture=function(a){this.quadmaterial.uniforms.useTexture.value=a?1:0};this.setTexture=function(a){this.quadmaterial.uniforms.tMixTexture.value=
this.textures[a]};this.render=function(a){if(transitionParams.animateTransition){var b=(1+Math.sin(transitionParams.transitionSpeed*clock.getElapsedTime()/Math.PI))/2;transitionParams.transition=THREE.Math.smoothstep(b,.3,.7);!transitionParams.loopTexture||0!=transitionParams.transition&&1!=transitionParams.transition?this.needChange=!0:this.needChange&&(transitionParams.texture=(transitionParams.texture+1)%this.textures.length,this.quadmaterial.uniforms.tMixTexture.value=this.textures[transitionParams.texture],
this.needChange=!1)}this.quadmaterial.uniforms.mixRatio.value=transitionParams.transition;0==transitionParams.transition?this.sceneB.render(a,!1):1==transitionParams.transition?this.sceneA.render(a,!1):(this.sceneA.render(a,!0),this.sceneB.render(a,!0),renderer.render(this.scene,this.cameraOrtho,null,!0))}};