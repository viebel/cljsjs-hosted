THREE.DragControls=function(m,h,b){function r(){b.addEventListener("mousemove",t,!1);b.addEventListener("mousedown",u,!1);b.addEventListener("mouseup",p,!1);b.addEventListener("mouseleave",p,!1);b.addEventListener("touchmove",v,!1);b.addEventListener("touchstart",w,!1);b.addEventListener("touchend",x,!1)}function y(){b.removeEventListener("mousemove",t,!1);b.removeEventListener("mousedown",u,!1);b.removeEventListener("mouseup",p,!1);b.removeEventListener("mouseleave",p,!1);b.removeEventListener("touchmove",
v,!1);b.removeEventListener("touchstart",w,!1);b.removeEventListener("touchend",x,!1)}function t(a){a.preventDefault();var d=b.getBoundingClientRect();g.x=(a.clientX-d.left)/d.width*2-1;g.y=2*-((a.clientY-d.top)/d.height)+1;f.setFromCamera(g,h);c&&e.enabled?(f.ray.intersectPlane(k,l)&&c.position.copy(l.sub(q)),e.dispatchEvent({type:"drag",object:c})):(f.setFromCamera(g,h),a=f.intersectObjects(m),0<a.length?(a=a[0].object,k.setFromNormalAndCoplanarPoint(h.getWorldDirection(k.normal),a.position),n!==
a&&(e.dispatchEvent({type:"hoveron",object:a}),b.style.cursor="pointer",n=a)):null!==n&&(e.dispatchEvent({type:"hoveroff",object:n}),b.style.cursor="auto",n=null))}function u(a){a.preventDefault();f.setFromCamera(g,h);a=f.intersectObjects(m);0<a.length&&(c=a[0].object,f.ray.intersectPlane(k,l)&&q.copy(l).sub(c.position),b.style.cursor="move",e.dispatchEvent({type:"dragstart",object:c}))}function p(a){a.preventDefault();c&&(e.dispatchEvent({type:"dragend",object:c}),c=null);b.style.cursor="auto"}function v(a){a.preventDefault();
a=a.changedTouches[0];var d=b.getBoundingClientRect();g.x=(a.clientX-d.left)/d.width*2-1;g.y=2*-((a.clientY-d.top)/d.height)+1;f.setFromCamera(g,h);c&&e.enabled&&(f.ray.intersectPlane(k,l)&&c.position.copy(l.sub(q)),e.dispatchEvent({type:"drag",object:c}))}function w(a){a.preventDefault();a=a.changedTouches[0];var d=b.getBoundingClientRect();g.x=(a.clientX-d.left)/d.width*2-1;g.y=2*-((a.clientY-d.top)/d.height)+1;f.setFromCamera(g,h);a=f.intersectObjects(m);0<a.length&&(c=a[0].object,k.setFromNormalAndCoplanarPoint(h.getWorldDirection(k.normal),
c.position),f.ray.intersectPlane(k,l)&&q.copy(l).sub(c.position),b.style.cursor="move",e.dispatchEvent({type:"dragstart",object:c}))}function x(a){a.preventDefault();c&&(e.dispatchEvent({type:"dragend",object:c}),c=null);b.style.cursor="auto"}if(m instanceof THREE.Camera){console.warn("THREE.DragControls: Constructor now expects ( objects, camera, domElement )");var z=m;m=h;h=z}var k=new THREE.Plane,f=new THREE.Raycaster,g=new THREE.Vector2,q=new THREE.Vector3,l=new THREE.Vector3,c=null,n=null,e=
this;r();this.enabled=!0;this.activate=r;this.deactivate=y;this.dispose=function(){y()};this.setObjects=function(){console.error("THREE.DragControls: setObjects() has been removed.")};this.on=function(a,b){console.warn("THREE.DragControls: on() has been deprecated. Use addEventListener() instead.");e.addEventListener(a,b)};this.off=function(a,b){console.warn("THREE.DragControls: off() has been deprecated. Use removeEventListener() instead.");e.removeEventListener(a,b)};this.notify=function(a){console.error("THREE.DragControls: notify() has been deprecated. Use dispatchEvent() instead.");
e.dispatchEvent({type:a})}};THREE.DragControls.prototype=Object.create(THREE.EventDispatcher.prototype);THREE.DragControls.prototype.constructor=THREE.DragControls;