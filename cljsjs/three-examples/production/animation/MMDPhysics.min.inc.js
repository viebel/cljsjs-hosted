THREE.MMDPhysics=function(a,b){void 0===b&&(b={});this.mesh=a;this.helper=new THREE.MMDPhysics.ResourceHelper;this.unitStep=void 0!==b.unitStep?b.unitStep:1/65;this.maxStepNum=void 0!==b.maxStepNum?b.maxStepNum:3;this.world=void 0!==b.world?b.world:null;this.bodies=[];this.constraints=[];this.init(a)};
THREE.MMDPhysics.prototype={constructor:THREE.MMDPhysics,init:function(a){var b=a.parent;null!==b&&b.remove(a);var c=this.helper,d=c.allocThreeVector3(),e=c.allocThreeEuler(),f=c.allocThreeVector3();d.copy(a.position);e.copy(a.rotation);f.copy(a.scale);a.position.set(0,0,0);a.rotation.set(0,0,0);a.scale.set(1,1,1);a.updateMatrixWorld(!0);null===this.world&&this.initWorld();this.initRigidBodies();this.initConstraints();null!==b&&b.add(a);a.position.copy(d);a.rotation.copy(e);a.scale.copy(f);a.updateMatrixWorld(!0);
this.reset();c.freeThreeVector3(d);c.freeThreeEuler(e);c.freeThreeVector3(f)},initWorld:function(){var a=new Ammo.btDefaultCollisionConfiguration,b=new Ammo.btCollisionDispatcher(a),c=new Ammo.btDbvtBroadphase,d=new Ammo.btSequentialImpulseConstraintSolver,a=new Ammo.btDiscreteDynamicsWorld(b,c,d,a);a.setGravity(new Ammo.btVector3(0,-98,0));this.world=a},initRigidBodies:function(){for(var a=this.mesh.geometry.rigidBodies,b=0;b<a.length;b++){var c=new THREE.MMDPhysics.RigidBody(this.mesh,this.world,
a[b],this.helper);this.bodies.push(c)}},initConstraints:function(){for(var a=this.mesh.geometry.constraints,b=0;b<a.length;b++){var c=a[b],c=new THREE.MMDPhysics.Constraint(this.mesh,this.world,this.bodies[c.rigidBodyIndex1],this.bodies[c.rigidBodyIndex2],c,this.helper);this.constraints.push(c)}},update:function(a){this.updateRigidBodies();this.stepSimulation(a);this.updateBones()},stepSimulation:function(a){var b=this.unitStep,c=a;a=(a/b|0)+1;c<b&&(c=b,a=1);a>this.maxStepNum&&(a=this.maxStepNum);
this.world.stepSimulation(c,a,b)},updateRigidBodies:function(){for(var a=0;a<this.bodies.length;a++)this.bodies[a].updateFromBone()},updateBones:function(){for(var a=0;a<this.bodies.length;a++)this.bodies[a].updateBone()},reset:function(){for(var a=0;a<this.bodies.length;a++)this.bodies[a].reset()},warmup:function(a){for(var b=0;b<a;b++)this.update(1/60)}};
THREE.MMDPhysics.ResourceHelper=function(){this.threeVector3s=[];this.threeMatrix4s=[];this.threeQuaternions=[];this.threeEulers=[];this.transforms=[];this.quaternions=[];this.vector3s=[]};
THREE.MMDPhysics.ResourceHelper.prototype={allocThreeVector3:function(){return 0<this.threeVector3s.length?this.threeVector3s.pop():new THREE.Vector3},freeThreeVector3:function(a){this.threeVector3s.push(a)},allocThreeMatrix4:function(){return 0<this.threeMatrix4s.length?this.threeMatrix4s.pop():new THREE.Matrix4},freeThreeMatrix4:function(a){this.threeMatrix4s.push(a)},allocThreeQuaternion:function(){return 0<this.threeQuaternions.length?this.threeQuaternions.pop():new THREE.Quaternion},freeThreeQuaternion:function(a){this.threeQuaternions.push(a)},
allocThreeEuler:function(){return 0<this.threeEulers.length?this.threeEulers.pop():new THREE.Euler},freeThreeEuler:function(a){this.threeEulers.push(a)},allocTransform:function(){return 0<this.transforms.length?this.transforms.pop():new Ammo.btTransform},freeTransform:function(a){this.transforms.push(a)},allocQuaternion:function(){return 0<this.quaternions.length?this.quaternions.pop():new Ammo.btQuaternion},freeQuaternion:function(a){this.quaternions.push(a)},allocVector3:function(){return 0<this.vector3s.length?
this.vector3s.pop():new Ammo.btVector3},freeVector3:function(a){this.vector3s.push(a)},setIdentity:function(a){a.setIdentity()},getBasis:function(a){var b=this.allocQuaternion();a.getBasis().getRotation(b);return b},getBasisAsMatrix3:function(a){a=this.getBasis(a);var b=this.quaternionToMatrix3(a);this.freeQuaternion(a);return b},getOrigin:function(a){return a.getOrigin()},setOrigin:function(a,b){a.getOrigin().setValue(b.x(),b.y(),b.z())},copyOrigin:function(a,b){var c=b.getOrigin();this.setOrigin(a,
c)},setBasis:function(a,b){a.setRotation(b)},setBasisFromMatrix3:function(a,b){var c=this.matrix3ToQuaternion(b);this.setBasis(a,c);this.freeQuaternion(c)},setOriginFromArray3:function(a,b){a.getOrigin().setValue(b[0],b[1],b[2])},setOriginFromThreeVector3:function(a,b){a.getOrigin().setValue(b.x,b.y,b.z)},setBasisFromArray3:function(a,b){var c=this.allocThreeQuaternion(),d=this.allocThreeEuler();d.set(b[0],b[1],b[2]);this.setBasisFromThreeQuaternion(a,c.setFromEuler(d));this.freeThreeEuler(d);this.freeThreeQuaternion(c)},
setBasisFromThreeQuaternion:function(a,b){var c=this.allocQuaternion();c.setX(b.x);c.setY(b.y);c.setZ(b.z);c.setW(b.w);this.setBasis(a,c);this.freeQuaternion(c)},multiplyTransforms:function(a,b){var c=this.allocTransform();this.setIdentity(c);var d=this.getBasisAsMatrix3(a),e=this.getBasisAsMatrix3(b),f=this.getOrigin(a),g=this.getOrigin(b),g=this.multiplyMatrix3ByVector3(d,g),f=this.addVector3(g,f);this.setOrigin(c,f);d=this.multiplyMatrices3(d,e);this.setBasisFromMatrix3(c,d);this.freeVector3(g);
this.freeVector3(f);return c},inverseTransform:function(a){var b=this.allocTransform(),c=this.getBasisAsMatrix3(a);a=this.getOrigin(a);c=this.transposeMatrix3(c);a=this.negativeVector3(a);var d=this.multiplyMatrix3ByVector3(c,a);this.setOrigin(b,d);this.setBasisFromMatrix3(b,c);this.freeVector3(a);this.freeVector3(d);return b},multiplyMatrices3:function(a,b){var c=[],d=this.rowOfMatrix3(a,0),e=this.rowOfMatrix3(a,1),f=this.rowOfMatrix3(a,2),g=this.columnOfMatrix3(b,0),k=this.columnOfMatrix3(b,1),
h=this.columnOfMatrix3(b,2);c[0]=this.dotVectors3(d,g);c[1]=this.dotVectors3(d,k);c[2]=this.dotVectors3(d,h);c[3]=this.dotVectors3(e,g);c[4]=this.dotVectors3(e,k);c[5]=this.dotVectors3(e,h);c[6]=this.dotVectors3(f,g);c[7]=this.dotVectors3(f,k);c[8]=this.dotVectors3(f,h);this.freeVector3(d);this.freeVector3(e);this.freeVector3(f);this.freeVector3(g);this.freeVector3(k);this.freeVector3(h);return c},addVector3:function(a,b){var c=this.allocVector3();c.setValue(a.x()+b.x(),a.y()+b.y(),a.z()+b.z());return c},
dotVectors3:function(a,b){return a.x()*b.x()+a.y()*b.y()+a.z()*b.z()},rowOfMatrix3:function(a,b){var c=this.allocVector3();c.setValue(a[3*b+0],a[3*b+1],a[3*b+2]);return c},columnOfMatrix3:function(a,b){var c=this.allocVector3();c.setValue(a[b+0],a[b+3],a[b+6]);return c},negativeVector3:function(a){var b=this.allocVector3();b.setValue(-a.x(),-a.y(),-a.z());return b},multiplyMatrix3ByVector3:function(a,b){var c=this.allocVector3(),d=this.rowOfMatrix3(a,0),e=this.rowOfMatrix3(a,1),f=this.rowOfMatrix3(a,
2),g=this.dotVectors3(d,b),k=this.dotVectors3(e,b),h=this.dotVectors3(f,b);c.setValue(g,k,h);this.freeVector3(d);this.freeVector3(e);this.freeVector3(f);return c},transposeMatrix3:function(a){var b=[];b[0]=a[0];b[1]=a[3];b[2]=a[6];b[3]=a[1];b[4]=a[4];b[5]=a[7];b[6]=a[2];b[7]=a[5];b[8]=a[8];return b},quaternionToMatrix3:function(a){var b=[],c=a.x(),d=a.y(),e=a.z(),f=a.w();a=c*c;var g=d*d,k=e*e,h=c*d,m=d*e,n=e*c,c=c*f,d=d*f,e=e*f;b[0]=1-2*(g+k);b[1]=2*(h-e);b[2]=2*(n+d);b[3]=2*(h+e);b[4]=1-2*(k+a);
b[5]=2*(m-c);b[6]=2*(n-d);b[7]=2*(m+c);b[8]=1-2*(a+g);return b},matrix3ToQuaternion:function(a){var b=a[0]+a[4]+a[8],c,d,e;0<b?(c=2*Math.sqrt(b+1),e=.25*c,b=(a[7]-a[5])/c,d=(a[2]-a[6])/c,a=(a[3]-a[1])/c):a[0]>a[4]&&a[0]>a[8]?(c=2*Math.sqrt(1+a[0]-a[4]-a[8]),e=(a[7]-a[5])/c,b=.25*c,d=(a[1]+a[3])/c,a=(a[2]+a[6])/c):a[4]>a[8]?(c=2*Math.sqrt(1+a[4]-a[0]-a[8]),e=(a[2]-a[6])/c,b=(a[1]+a[3])/c,d=.25*c,a=(a[5]+a[7])/c):(c=2*Math.sqrt(1+a[8]-a[0]-a[4]),e=(a[3]-a[1])/c,b=(a[2]+a[6])/c,d=(a[5]+a[7])/c,a=.25*
c);c=this.allocQuaternion();c.setX(b);c.setY(d);c.setZ(a);c.setW(e);return c}};THREE.MMDPhysics.RigidBody=function(a,b,c,d){this.mesh=a;this.world=b;this.params=c;this.helper=d;this.boneOffsetFormInverse=this.boneOffsetForm=this.bone=this.body=null;this.init()};
THREE.MMDPhysics.RigidBody.prototype={constructor:THREE.MMDPhysics.RigidBody,init:function(){var a=this.helper,b=this.params,c=this.mesh.skeleton.bones,c=-1===b.boneIndex?new THREE.Bone:c[b.boneIndex],d;a:switch(b.shapeType){case 0:d=new Ammo.btSphereShape(b.width);break a;case 1:d=new Ammo.btBoxShape(new Ammo.btVector3(b.width,b.height,b.depth));break a;case 2:d=new Ammo.btCapsuleShape(b.width,b.height);break a;default:throw"unknown shape type "+b.shapeType;}var e=0===b.type?0:b.weight,f=a.allocVector3();
f.setValue(0,0,0);0!==e&&d.calculateLocalInertia(e,f);var g=a.allocTransform();a.setIdentity(g);a.setOriginFromArray3(g,b.position);a.setBasisFromArray3(g,b.rotation);var k=a.allocThreeVector3(),h=a.allocTransform();a.setIdentity(h);a.setOriginFromThreeVector3(h,c.getWorldPosition(k));var m=a.multiplyTransforms(h,g),n=new Ammo.btDefaultMotionState(m);d=new Ammo.btRigidBodyConstructionInfo(e,n,d,f);d.set_m_friction(b.friction);d.set_m_restitution(b.restitution);d=new Ammo.btRigidBody(d);0===b.type&&
(d.setCollisionFlags(d.getCollisionFlags()|2),d.setActivationState(4));d.setDamping(b.positionDamping,b.rotationDamping);d.setSleepingThresholds(0,0);this.world.addRigidBody(d,1<<b.groupIndex,b.groupTarget);this.body=d;this.bone=c;this.boneOffsetForm=g;this.boneOffsetFormInverse=a.inverseTransform(g);a.freeVector3(f);a.freeTransform(m);a.freeTransform(h);a.freeThreeVector3(k)},reset:function(){this.setTransformFromBone()},updateFromBone:function(){-1!==this.params.boneIndex&&0===this.params.type&&
this.setTransformFromBone()},updateBone:function(){0!==this.params.type&&-1!==this.params.boneIndex&&(this.updateBoneRotation(),1===this.params.type&&this.updateBonePosition(),this.bone.updateMatrixWorld(!0),2===this.params.type&&this.setPositionFromBone())},getBoneTransform:function(){var a=this.helper,b=a.allocThreeVector3(),c=a.allocThreeQuaternion();this.bone.getWorldPosition(b);this.bone.getWorldQuaternion(c);var d=a.allocTransform();a.setOriginFromThreeVector3(d,b);a.setBasisFromThreeQuaternion(d,
c);var e=a.multiplyTransforms(d,this.boneOffsetForm);a.freeTransform(d);a.freeThreeQuaternion(c);a.freeThreeVector3(b);return e},getWorldTransformForBone:function(){var a=this.helper,b=a.allocTransform();this.body.getMotionState().getWorldTransform(b);var c=a.multiplyTransforms(b,this.boneOffsetFormInverse);a.freeTransform(b);return c},setTransformFromBone:function(){var a=this.helper,b=this.getBoneTransform();this.body.setCenterOfMassTransform(b);this.body.getMotionState().setWorldTransform(b);a.freeTransform(b)},
setPositionFromBone:function(){var a=this.helper,b=this.getBoneTransform(),c=a.allocTransform();this.body.getMotionState().getWorldTransform(c);a.copyOrigin(c,b);this.body.setCenterOfMassTransform(c);this.body.getMotionState().setWorldTransform(c);a.freeTransform(c);a.freeTransform(b)},updateBoneRotation:function(){this.bone.updateMatrixWorld(!0);var a=this.helper,b=this.getWorldTransformForBone(),c=a.getBasis(b),d=a.allocThreeQuaternion(),e=a.allocThreeQuaternion(),f=a.allocThreeQuaternion();d.set(c.x(),
c.y(),c.z(),c.w());e.setFromRotationMatrix(this.bone.matrixWorld);e.conjugate();e.multiply(d);f.setFromRotationMatrix(this.bone.matrix);this.bone.quaternion.copy(e.multiply(f));a.freeThreeQuaternion(d);a.freeThreeQuaternion(e);a.freeThreeQuaternion(f);a.freeQuaternion(c);a.freeTransform(b)},updateBonePosition:function(){var a=this.helper,b=this.getWorldTransformForBone(),c=a.allocThreeVector3(),d=a.getOrigin(b);c.set(d.x(),d.y(),d.z());d=this.bone.worldToLocal(c);this.bone.position.add(d);a.freeThreeVector3(c);
a.freeTransform(b)}};THREE.MMDPhysics.Constraint=function(a,b,c,d,e,f){this.mesh=a;this.world=b;this.bodyA=c;this.bodyB=d;this.params=e;this.helper=f;this.constraint=null;this.init()};
THREE.MMDPhysics.Constraint.prototype={constructor:THREE.MMDPhysics.Constraint,init:function(){var a=this.helper,b=this.params,c=this.bodyA,d=this.bodyB,e=a.allocTransform();a.setIdentity(e);a.setOriginFromArray3(e,b.position);a.setBasisFromArray3(e,b.rotation);var f=a.allocTransform(),g=a.allocTransform();c.body.getMotionState().getWorldTransform(f);d.body.getMotionState().getWorldTransform(g);var k=a.inverseTransform(f),h=a.inverseTransform(g),m=a.multiplyTransforms(k,e),n=a.multiplyTransforms(h,
e),c=new Ammo.btGeneric6DofSpringConstraint(c.body,d.body,m,n,!0),d=a.allocVector3(),p=a.allocVector3(),q=a.allocVector3(),r=a.allocVector3();d.setValue(b.translationLimitation1[0],b.translationLimitation1[1],b.translationLimitation1[2]);p.setValue(b.translationLimitation2[0],b.translationLimitation2[1],b.translationLimitation2[2]);q.setValue(b.rotationLimitation1[0],b.rotationLimitation1[1],b.rotationLimitation1[2]);r.setValue(b.rotationLimitation2[0],b.rotationLimitation2[1],b.rotationLimitation2[2]);
c.setLinearLowerLimit(d);c.setLinearUpperLimit(p);c.setAngularLowerLimit(q);c.setAngularUpperLimit(r);for(var l=0;3>l;l++)0!==b.springPosition[l]&&(c.enableSpring(l,!0),c.setStiffness(l,b.springPosition[l]));for(l=0;3>l;l++)0!==b.springRotation[l]&&(c.enableSpring(l+3,!0),c.setStiffness(l+3,b.springRotation[l]));if(void 0!==c.setParam)for(l=0;6>l;l++)c.setParam(2,.475,l);this.world.addConstraint(c,!0);this.constraint=c;a.freeTransform(e);a.freeTransform(f);a.freeTransform(g);a.freeTransform(k);a.freeTransform(h);
a.freeTransform(m);a.freeTransform(n);a.freeVector3(d);a.freeVector3(p);a.freeVector3(q);a.freeVector3(r)}};
THREE.MMDPhysicsHelper=function(a){if(void 0===a.physics||void 0===a.geometry.rigidBodies)throw"THREE.MMDPhysicsHelper requires physics in mesh and rigidBodies in mesh.geometry.";THREE.Object3D.call(this);this.root=a;this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.materials=[];this.materials.push(new THREE.MeshBasicMaterial({color:new THREE.Color(16746632),wireframe:!0,depthTest:!1,depthWrite:!1,opacity:.25,transparent:!0}));this.materials.push(new THREE.MeshBasicMaterial({color:new THREE.Color(8978312),
wireframe:!0,depthTest:!1,depthWrite:!1,opacity:.25,transparent:!0}));this.materials.push(new THREE.MeshBasicMaterial({color:new THREE.Color(8947967),wireframe:!0,depthTest:!1,depthWrite:!1,opacity:.25,transparent:!0}));this._init();this.update()};THREE.MMDPhysicsHelper.prototype=Object.create(THREE.Object3D.prototype);THREE.MMDPhysicsHelper.prototype.constructor=THREE.MMDPhysicsHelper;
THREE.MMDPhysicsHelper.prototype._init=function(){function a(a){switch(a.shapeType){case 0:return new THREE.SphereBufferGeometry(a.width,16,8);case 1:return new THREE.BoxBufferGeometry(2*a.width,2*a.height,2*a.depth,8,8,8);case 2:return new b(a.width,a.height,16,8);default:return null}}function b(a,b,c,d){var e=new THREE.CylinderBufferGeometry(a,a,b,c,d,!0),f=new THREE.Mesh(new THREE.SphereBufferGeometry(a,c,d,0,2*Math.PI,0,Math.PI/2));a=new THREE.Mesh(new THREE.SphereBufferGeometry(a,c,d,0,2*Math.PI,
Math.PI/2,Math.PI/2));f.position.set(0,b/2,0);a.position.set(0,-b/2,0);f.updateMatrix();a.updateMatrix();e.merge(f.geometry,f.matrix);e.merge(a.geometry,a.matrix);return e}for(var c=this.root.geometry.rigidBodies,d=0,e=c.length;d<e;d++){var f=c[d];this.add(new THREE.Mesh(a(f),this.materials[f.type]))}};
THREE.MMDPhysicsHelper.prototype.update=function(){function a(a){g.set(a.x(),a.y(),a.z());g.applyMatrix4(f);return g}function b(a){k.set(a.x(),a.y(),a.z(),a.w());h.setFromRotationMatrix(f);h.multiply(k);return h}for(var c=this.root,d=c.geometry.rigidBodies,e=c.physics.bodies,f=(new THREE.Matrix4).getInverse(c.matrixWorld),g=new THREE.Vector3,k=new THREE.Quaternion,h=new THREE.Quaternion,m=0,d=d.length;m<d;m++){var n=e[m].body,c=this.children[m],n=n.getCenterOfMassTransform();c.position.copy(a(n.getOrigin()));
c.quaternion.copy(b(n.getRotation()))}};