THREE.SAOPass=function(a,c,d,b,e){THREE.Pass.call(this);this.scene=a;this.camera=c;this.clear=!0;this.needsSwap=!1;this.supportsDepthTextureExtension=void 0!==d?d:!1;this.supportsNormalTexture=void 0!==b?b:!1;this.oldClearColor=new THREE.Color;this.oldClearAlpha=1;this.params={output:0,saoBias:.5,saoIntensity:.18,saoScale:1,saoKernelRadius:100,saoMinResolution:0,saoBlur:!0,saoBlurRadius:8,saoBlurStdDev:4,saoBlurDepthCutoff:.01};this.resolution=void 0!==e?new THREE.Vector2(e.x,e.y):new THREE.Vector2(256,
256);this.saoRenderTarget=new THREE.WebGLRenderTarget(this.resolution.x,this.resolution.y,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat});this.blurIntermediateRenderTarget=this.saoRenderTarget.clone();this.beautyRenderTarget=this.saoRenderTarget.clone();this.normalRenderTarget=new THREE.WebGLRenderTarget(this.resolution.x,this.resolution.y,{minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat});this.depthRenderTarget=this.normalRenderTarget.clone();
this.supportsDepthTextureExtension&&(d=new THREE.DepthTexture,d.type=THREE.UnsignedShortType,d.minFilter=THREE.NearestFilter,d.maxFilter=THREE.NearestFilter,this.beautyRenderTarget.depthTexture=d,this.beautyRenderTarget.depthBuffer=!0);this.depthMaterial=new THREE.MeshDepthMaterial;this.depthMaterial.depthPacking=THREE.RGBADepthPacking;this.depthMaterial.blending=THREE.NoBlending;this.normalMaterial=new THREE.MeshNormalMaterial;this.normalMaterial.blending=THREE.NoBlending;void 0===THREE.SAOShader&&
console.error("THREE.SAOPass relies on THREE.SAOShader");this.saoMaterial=new THREE.ShaderMaterial({defines:Object.assign({},THREE.SAOShader.defines),fragmentShader:THREE.SAOShader.fragmentShader,vertexShader:THREE.SAOShader.vertexShader,uniforms:THREE.UniformsUtils.clone(THREE.SAOShader.uniforms)});this.saoMaterial.extensions.derivatives=!0;this.saoMaterial.defines.DEPTH_PACKING=this.supportsDepthTextureExtension?0:1;this.saoMaterial.defines.NORMAL_TEXTURE=this.supportsNormalTexture?1:0;this.saoMaterial.defines.PERSPECTIVE_CAMERA=
this.camera.isPerspectiveCamera?1:0;this.saoMaterial.uniforms.tDepth.value=this.supportsDepthTextureExtension?d:this.depthRenderTarget.texture;this.saoMaterial.uniforms.tNormal.value=this.normalRenderTarget.texture;this.saoMaterial.uniforms.size.value.set(this.resolution.x,this.resolution.y);this.saoMaterial.uniforms.cameraInverseProjectionMatrix.value.getInverse(this.camera.projectionMatrix);this.saoMaterial.uniforms.cameraProjectionMatrix.value=this.camera.projectionMatrix;this.saoMaterial.blending=
THREE.NoBlending;void 0===THREE.DepthLimitedBlurShader&&console.error("THREE.SAOPass relies on THREE.DepthLimitedBlurShader");this.vBlurMaterial=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(THREE.DepthLimitedBlurShader.uniforms),defines:Object.assign({},THREE.DepthLimitedBlurShader.defines),vertexShader:THREE.DepthLimitedBlurShader.vertexShader,fragmentShader:THREE.DepthLimitedBlurShader.fragmentShader});this.vBlurMaterial.defines.DEPTH_PACKING=this.supportsDepthTextureExtension?0:
1;this.vBlurMaterial.defines.PERSPECTIVE_CAMERA=this.camera.isPerspectiveCamera?1:0;this.vBlurMaterial.uniforms.tDiffuse.value=this.saoRenderTarget.texture;this.vBlurMaterial.uniforms.tDepth.value=this.supportsDepthTextureExtension?d:this.depthRenderTarget.texture;this.vBlurMaterial.uniforms.size.value.set(this.resolution.x,this.resolution.y);this.vBlurMaterial.blending=THREE.NoBlending;this.hBlurMaterial=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(THREE.DepthLimitedBlurShader.uniforms),
defines:Object.assign({},THREE.DepthLimitedBlurShader.defines),vertexShader:THREE.DepthLimitedBlurShader.vertexShader,fragmentShader:THREE.DepthLimitedBlurShader.fragmentShader});this.hBlurMaterial.defines.DEPTH_PACKING=this.supportsDepthTextureExtension?0:1;this.hBlurMaterial.defines.PERSPECTIVE_CAMERA=this.camera.isPerspectiveCamera?1:0;this.hBlurMaterial.uniforms.tDiffuse.value=this.blurIntermediateRenderTarget.texture;this.hBlurMaterial.uniforms.tDepth.value=this.supportsDepthTextureExtension?
d:this.depthRenderTarget.texture;this.hBlurMaterial.uniforms.size.value.set(this.resolution.x,this.resolution.y);this.hBlurMaterial.blending=THREE.NoBlending;void 0===THREE.CopyShader&&console.error("THREE.SAOPass relies on THREE.CopyShader");this.materialCopy=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(THREE.CopyShader.uniforms),vertexShader:THREE.CopyShader.vertexShader,fragmentShader:THREE.CopyShader.fragmentShader,blending:THREE.NoBlending});this.materialCopy.transparent=!0;this.materialCopy.depthTest=
!1;this.materialCopy.depthWrite=!1;this.materialCopy.blending=THREE.CustomBlending;this.materialCopy.blendSrc=THREE.DstColorFactor;this.materialCopy.blendDst=THREE.ZeroFactor;this.materialCopy.blendEquation=THREE.AddEquation;this.materialCopy.blendSrcAlpha=THREE.DstAlphaFactor;this.materialCopy.blendDstAlpha=THREE.ZeroFactor;this.materialCopy.blendEquationAlpha=THREE.AddEquation;void 0===THREE.CopyShader&&console.error("THREE.SAOPass relies on THREE.UnpackDepthRGBAShader");this.depthCopy=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(THREE.UnpackDepthRGBAShader.uniforms),
vertexShader:THREE.UnpackDepthRGBAShader.vertexShader,fragmentShader:THREE.UnpackDepthRGBAShader.fragmentShader,blending:THREE.NoBlending});this.quadCamera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.quadScene=new THREE.Scene;this.quad=new THREE.Mesh(new THREE.PlaneGeometry(2,2),null);this.quadScene.add(this.quad)};THREE.SAOPass.OUTPUT={Beauty:1,Default:0,SAO:2,Depth:3,Normal:4};
THREE.SAOPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.SAOPass,render:function(a,c,d,b,e){this.renderToScreen&&(this.materialCopy.blending=THREE.NoBlending,this.materialCopy.uniforms.tDiffuse.value=d.texture,this.materialCopy.needsUpdate=!0,this.renderPass(a,this.materialCopy,null));if(1!==this.params.output){this.oldClearColor.copy(a.getClearColor());this.oldClearAlpha=a.getClearAlpha();c=a.autoClear;a.autoClear=!1;a.clearTarget(this.depthRenderTarget);this.saoMaterial.uniforms.bias.value=
this.params.saoBias;this.saoMaterial.uniforms.intensity.value=this.params.saoIntensity;this.saoMaterial.uniforms.scale.value=this.params.saoScale;this.saoMaterial.uniforms.kernelRadius.value=this.params.saoKernelRadius;this.saoMaterial.uniforms.minResolution.value=this.params.saoMinResolution;this.saoMaterial.uniforms.cameraNear.value=this.camera.near;this.saoMaterial.uniforms.cameraFar.value=this.camera.far;b=this.params.saoBlurDepthCutoff*(this.camera.far-this.camera.near);this.vBlurMaterial.uniforms.depthCutoff.value=
b;this.hBlurMaterial.uniforms.depthCutoff.value=b;this.vBlurMaterial.uniforms.cameraNear.value=this.camera.near;this.vBlurMaterial.uniforms.cameraFar.value=this.camera.far;this.hBlurMaterial.uniforms.cameraNear.value=this.camera.near;this.hBlurMaterial.uniforms.cameraFar.value=this.camera.far;this.params.saoBlurRadius=Math.floor(this.params.saoBlurRadius);if(this.prevStdDev!==this.params.saoBlurStdDev||this.prevNumSamples!==this.params.saoBlurRadius)THREE.BlurShaderUtils.configure(this.vBlurMaterial,
this.params.saoBlurRadius,this.params.saoBlurStdDev,new THREE.Vector2(0,1)),THREE.BlurShaderUtils.configure(this.hBlurMaterial,this.params.saoBlurRadius,this.params.saoBlurStdDev,new THREE.Vector2(1,0)),this.prevStdDev=this.params.saoBlurStdDev,this.prevNumSamples=this.params.saoBlurRadius;a.setClearColor(0);a.render(this.scene,this.camera,this.beautyRenderTarget,!0);this.supportsDepthTextureExtension||this.renderOverride(a,this.depthMaterial,this.depthRenderTarget,0,1);this.supportsNormalTexture&&
this.renderOverride(a,this.normalMaterial,this.normalRenderTarget,7829503,1);this.renderPass(a,this.saoMaterial,this.saoRenderTarget,16777215,1);this.params.saoBlur&&(this.renderPass(a,this.vBlurMaterial,this.blurIntermediateRenderTarget,16777215,1),this.renderPass(a,this.hBlurMaterial,this.saoRenderTarget,16777215,1));b=this.materialCopy;3===this.params.output?this.supportsDepthTextureExtension?(this.materialCopy.uniforms.tDiffuse.value=this.beautyRenderTarget.depthTexture,this.materialCopy.needsUpdate=
!0):(this.depthCopy.uniforms.tDiffuse.value=this.depthRenderTarget.texture,this.depthCopy.needsUpdate=!0,b=this.depthCopy):(this.materialCopy.uniforms.tDiffuse.value=4===this.params.output?this.normalRenderTarget.texture:this.saoRenderTarget.texture,this.materialCopy.needsUpdate=!0);b.blending=0===this.params.output?THREE.CustomBlending:THREE.NoBlending;this.renderPass(a,b,this.renderToScreen?null:d);a.setClearColor(this.oldClearColor,this.oldClearAlpha);a.autoClear=c}},renderPass:function(a,c,d,
b,e){var g=a.getClearColor(),h=a.getClearAlpha(),k=a.autoClear;a.autoClear=!1;var f=void 0!==b&&null!==b;f&&(a.setClearColor(b),a.setClearAlpha(e||0));this.quad.material=c;a.render(this.quadScene,this.quadCamera,d,f);a.autoClear=k;a.setClearColor(g);a.setClearAlpha(h)},renderOverride:function(a,c,d,b,e){var g=a.getClearColor(),h=a.getClearAlpha(),k=a.autoClear;a.autoClear=!1;b=c.clearColor||b;e=c.clearAlpha||e;var f=void 0!==b&&null!==b;f&&(a.setClearColor(b),a.setClearAlpha(e||0));this.scene.overrideMaterial=
c;a.render(this.scene,this.camera,d,f);this.scene.overrideMaterial=null;a.autoClear=k;a.setClearColor(g);a.setClearAlpha(h)},setSize:function(a,c){this.beautyRenderTarget.setSize(a,c);this.saoRenderTarget.setSize(a,c);this.blurIntermediateRenderTarget.setSize(a,c);this.normalRenderTarget.setSize(a,c);this.depthRenderTarget.setSize(a,c);this.saoMaterial.uniforms.size.value.set(a,c);this.saoMaterial.uniforms.cameraInverseProjectionMatrix.value.getInverse(this.camera.projectionMatrix);this.saoMaterial.uniforms.cameraProjectionMatrix.value=
this.camera.projectionMatrix;this.saoMaterial.needsUpdate=!0;this.vBlurMaterial.uniforms.size.value.set(a,c);this.vBlurMaterial.needsUpdate=!0;this.hBlurMaterial.uniforms.size.value.set(a,c);this.hBlurMaterial.needsUpdate=!0}});