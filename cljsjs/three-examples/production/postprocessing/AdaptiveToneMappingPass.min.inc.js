THREE.AdaptiveToneMappingPass=function(a,c){THREE.Pass.call(this);this.resolution=void 0!==c?c:256;this.needsInit=!0;this.adaptive=void 0!==a?!!a:!0;this.currentLuminanceRT=this.previousLuminanceRT=this.luminanceRT=null;void 0===THREE.CopyShader&&console.error("THREE.AdaptiveToneMappingPass relies on THREE.CopyShader");var b=THREE.CopyShader;this.copyUniforms=THREE.UniformsUtils.clone(b.uniforms);this.materialCopy=new THREE.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:b.vertexShader,fragmentShader:b.fragmentShader,
blending:THREE.NoBlending,depthTest:!1});void 0===THREE.LuminosityShader&&console.error("THREE.AdaptiveToneMappingPass relies on THREE.LuminosityShader");this.materialLuminance=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(THREE.LuminosityShader.uniforms),vertexShader:THREE.LuminosityShader.vertexShader,fragmentShader:THREE.LuminosityShader.fragmentShader,blending:THREE.NoBlending});this.adaptLuminanceShader={defines:{MIP_LEVEL_1X1:(Math.log(this.resolution)/Math.log(2)).toFixed(1)},
uniforms:{lastLum:{value:null},currentLum:{value:null},minLuminance:{value:.01},delta:{value:.016},tau:{value:1}},vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv \x3d uv;\ngl_Position \x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"varying vec2 vUv;\nuniform sampler2D lastLum;\nuniform sampler2D currentLum;\nuniform float minLuminance;\nuniform float delta;\nuniform float tau;\nvoid main() {\nvec4 lastLum \x3d texture2D( lastLum, vUv, MIP_LEVEL_1X1 );\nvec4 currentLum \x3d texture2D( currentLum, vUv, MIP_LEVEL_1X1 );\nfloat fLastLum \x3d max( minLuminance, lastLum.r );\nfloat fCurrentLum \x3d max( minLuminance, currentLum.r );\nfCurrentLum *\x3d fCurrentLum;\nfloat fAdaptedLum \x3d fLastLum + (fCurrentLum - fLastLum) * (1.0 - exp(-delta * tau));\ngl_FragColor.r \x3d fAdaptedLum;\n}"};
this.materialAdaptiveLum=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(this.adaptLuminanceShader.uniforms),vertexShader:this.adaptLuminanceShader.vertexShader,fragmentShader:this.adaptLuminanceShader.fragmentShader,defines:Object.assign({},this.adaptLuminanceShader.defines),blending:THREE.NoBlending});void 0===THREE.ToneMapShader&&console.error("THREE.AdaptiveToneMappingPass relies on THREE.ToneMapShader");this.materialToneMap=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(THREE.ToneMapShader.uniforms),
vertexShader:THREE.ToneMapShader.vertexShader,fragmentShader:THREE.ToneMapShader.fragmentShader,blending:THREE.NoBlending});this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene;this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null);this.quad.frustumCulled=!1;this.scene.add(this.quad)};
THREE.AdaptiveToneMappingPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.AdaptiveToneMappingPass,render:function(a,c,b,d,e){this.needsInit&&(this.reset(a),this.luminanceRT.texture.type=b.texture.type,this.previousLuminanceRT.texture.type=b.texture.type,this.currentLuminanceRT.texture.type=b.texture.type,this.needsInit=!1);this.adaptive&&(this.quad.material=this.materialLuminance,this.materialLuminance.uniforms.tDiffuse.value=b.texture,a.render(this.scene,this.camera,
this.currentLuminanceRT),this.quad.material=this.materialAdaptiveLum,this.materialAdaptiveLum.uniforms.delta.value=d,this.materialAdaptiveLum.uniforms.lastLum.value=this.previousLuminanceRT.texture,this.materialAdaptiveLum.uniforms.currentLum.value=this.currentLuminanceRT.texture,a.render(this.scene,this.camera,this.luminanceRT),this.quad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.luminanceRT.texture,a.render(this.scene,this.camera,this.previousLuminanceRT));this.quad.material=
this.materialToneMap;this.materialToneMap.uniforms.tDiffuse.value=b.texture;this.renderToScreen?a.render(this.scene,this.camera):a.render(this.scene,this.camera,c,this.clear)},reset:function(a){this.luminanceRT&&this.luminanceRT.dispose();this.currentLuminanceRT&&this.currentLuminanceRT.dispose();this.previousLuminanceRT&&this.previousLuminanceRT.dispose();a={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat};this.luminanceRT=new THREE.WebGLRenderTarget(this.resolution,
this.resolution,a);this.luminanceRT.texture.name="AdaptiveToneMappingPass.l";this.luminanceRT.texture.generateMipmaps=!1;this.previousLuminanceRT=new THREE.WebGLRenderTarget(this.resolution,this.resolution,a);this.previousLuminanceRT.texture.name="AdaptiveToneMappingPass.pl";this.previousLuminanceRT.texture.generateMipmaps=!1;a.minFilter=THREE.LinearMipMapLinearFilter;this.currentLuminanceRT=new THREE.WebGLRenderTarget(this.resolution,this.resolution,a);this.currentLuminanceRT.texture.name="AdaptiveToneMappingPass.cl";
this.adaptive&&(this.materialToneMap.defines.ADAPTED_LUMINANCE="",this.materialToneMap.uniforms.luminanceMap.value=this.luminanceRT.texture);this.quad.material=new THREE.MeshBasicMaterial({color:7829367});this.materialLuminance.needsUpdate=!0;this.materialAdaptiveLum.needsUpdate=!0;this.materialToneMap.needsUpdate=!0},setAdaptive:function(a){a?(this.adaptive=!0,this.materialToneMap.defines.ADAPTED_LUMINANCE="",this.materialToneMap.uniforms.luminanceMap.value=this.luminanceRT.texture):(this.adaptive=
!1,delete this.materialToneMap.defines.ADAPTED_LUMINANCE,this.materialToneMap.uniforms.luminanceMap.value=null);this.materialToneMap.needsUpdate=!0},setAdaptionRate:function(a){a&&(this.materialAdaptiveLum.uniforms.tau.value=Math.abs(a))},setMinLuminance:function(a){a&&(this.materialToneMap.uniforms.minLuminance.value=a,this.materialAdaptiveLum.uniforms.minLuminance.value=a)},setMaxLuminance:function(a){a&&(this.materialToneMap.uniforms.maxLuminance.value=a)},setAverageLuminance:function(a){a&&(this.materialToneMap.uniforms.averageLuminance.value=
a)},setMiddleGrey:function(a){a&&(this.materialToneMap.uniforms.middleGrey.value=a)},dispose:function(){this.luminanceRT&&this.luminanceRT.dispose();this.previousLuminanceRT&&this.previousLuminanceRT.dispose();this.currentLuminanceRT&&this.currentLuminanceRT.dispose();this.materialLuminance&&this.materialLuminance.dispose();this.materialAdaptiveLum&&this.materialAdaptiveLum.dispose();this.materialCopy&&this.materialCopy.dispose();this.materialToneMap&&this.materialToneMap.dispose()}});