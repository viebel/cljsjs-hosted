/**********************************************************************
 * Extern for Immutable
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var Immutable = {
  "Iterable": {
    "isIterable": function () {},
    "isKeyed": function () {},
    "isIndexed": function () {},
    "isAssociative": function () {},
    "isOrdered": function () {},
    "Keyed": function () {},
    "Indexed": function () {},
    "Set": function () {},
    "Iterator": {
      "KEYS": {},
      "VALUES": {},
      "ENTRIES": {}
    }
  },
  "Seq": {
    "of": function () {},
    "isSeq": function () {},
    "Keyed": function () {},
    "Set": {
      "of": function () {}
    },
    "Indexed": {
      "of": function () {}
    }
  },
  "Collection": {
    "Keyed": function () {},
    "Indexed": function () {},
    "Set": function () {}
  },
  "Map": {
    "of": function () {},
    "isMap": function () {}
  },
  "OrderedMap": {
    "of": function () {},
    "isOrderedMap": function () {}
  },
  "List": {
    "of": function () {},
    "isList": function () {}
  },
  "Stack": {
    "of": function () {},
    "isStack": function () {}
  },
  "Set": {
    "of": function () {},
    "fromKeys": function () {},
    "isSet": function () {}
  },
  "OrderedSet": {
    "of": function () {},
    "fromKeys": function () {},
    "isOrderedSet": function () {}
  },
  "Record": function () {},
  "Range": function () {},
  "Repeat": function () {},
  "is": function () {},
  "fromJS": function () {}
};
Immutable.Iterable.prototype = {
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toKeyedSeq": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "toString": function () {},
  "__toString": function () {},
  "concat": function () {},
  "includes": function () {},
  "entries": function () {},
  "every": function () {},
  "filter": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "reverse": function () {},
  "slice": function () {},
  "some": function () {},
  "sort": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "first": function () {},
  "flatMap": function () {},
  "flatten": function () {},
  "fromEntrySeq": function () {},
  "get": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "has": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "keySeq": function () {},
  "last": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipWhile": function () {},
  "skipUntil": function () {},
  "sortBy": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {},
  "contains": function () {}
};
Immutable.Iterable.Keyed.prototype = {
  "constructor": function () {},
  "flip": function () {},
  "mapEntries": function () {},
  "mapKeys": function () {},
  "@@__IMMUTABLE_KEYED__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toKeyedSeq": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "toString": function () {},
  "__toString": function () {},
  "concat": function () {},
  "includes": function () {},
  "entries": function () {},
  "every": function () {},
  "filter": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "reverse": function () {},
  "slice": function () {},
  "some": function () {},
  "sort": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "first": function () {},
  "flatMap": function () {},
  "flatten": function () {},
  "fromEntrySeq": function () {},
  "get": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "has": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "keySeq": function () {},
  "last": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipWhile": function () {},
  "skipUntil": function () {},
  "sortBy": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {},
  "contains": function () {}
};
Immutable.Iterable.Indexed.prototype = {
  "constructor": function () {},
  "toKeyedSeq": function () {},
  "filter": function () {},
  "findIndex": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "reverse": function () {},
  "slice": function () {},
  "splice": function () {},
  "findLastIndex": function () {},
  "first": function () {},
  "flatten": function () {},
  "get": function () {},
  "has": function () {},
  "interpose": function () {},
  "interleave": function () {},
  "keySeq": function () {},
  "last": function () {},
  "skipWhile": function () {},
  "zip": function () {},
  "zipWith": function () {},
  "@@__IMMUTABLE_INDEXED__@@": function () {},
  "@@__IMMUTABLE_ORDERED__@@": function () {},
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "toString": function () {},
  "__toString": function () {},
  "concat": function () {},
  "includes": function () {},
  "entries": function () {},
  "every": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "some": function () {},
  "sort": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "flatMap": function () {},
  "fromEntrySeq": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipUntil": function () {},
  "sortBy": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {},
  "contains": function () {}
};
Immutable.Iterable.Set.prototype = {
  "constructor": function () {},
  "get": function () {},
  "includes": function () {},
  "keySeq": function () {},
  "has": function () {},
  "contains": function () {},
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toKeyedSeq": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "toString": function () {},
  "__toString": function () {},
  "concat": function () {},
  "entries": function () {},
  "every": function () {},
  "filter": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "reverse": function () {},
  "slice": function () {},
  "some": function () {},
  "sort": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "first": function () {},
  "flatMap": function () {},
  "flatten": function () {},
  "fromEntrySeq": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "last": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipWhile": function () {},
  "skipUntil": function () {},
  "sortBy": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {}
};
Immutable.Iterable.Iterator.prototype = {
  "toString": function () {},
  "toSource": function () {},
  "inspect": function () {}
};
Immutable.Seq.prototype = {
  "constructor": function () {},
  "toSeq": function () {},
  "toString": function () {},
  "cacheResult": function () {},
  "__iterate": function () {},
  "__iterator": function () {},
  "@@__IMMUTABLE_SEQ__@@": function () {},
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toKeyedSeq": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "__toString": function () {},
  "concat": function () {},
  "includes": function () {},
  "entries": function () {},
  "every": function () {},
  "filter": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "reverse": function () {},
  "slice": function () {},
  "some": function () {},
  "sort": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "first": function () {},
  "flatMap": function () {},
  "flatten": function () {},
  "fromEntrySeq": function () {},
  "get": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "has": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "keySeq": function () {},
  "last": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipWhile": function () {},
  "skipUntil": function () {},
  "sortBy": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {},
  "contains": function () {}
};
Immutable.Seq.Keyed.prototype = {
  "constructor": function () {},
  "toKeyedSeq": function () {},
  "flip": function () {},
  "mapEntries": function () {},
  "mapKeys": function () {},
  "@@__IMMUTABLE_KEYED__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toSeq": function () {},
  "toString": function () {},
  "cacheResult": function () {},
  "__iterate": function () {},
  "__iterator": function () {},
  "@@__IMMUTABLE_SEQ__@@": function () {},
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "__toString": function () {},
  "concat": function () {},
  "includes": function () {},
  "entries": function () {},
  "every": function () {},
  "filter": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "reverse": function () {},
  "slice": function () {},
  "some": function () {},
  "sort": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "first": function () {},
  "flatMap": function () {},
  "flatten": function () {},
  "fromEntrySeq": function () {},
  "get": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "has": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "keySeq": function () {},
  "last": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipWhile": function () {},
  "skipUntil": function () {},
  "sortBy": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {},
  "contains": function () {}
};
Immutable.Seq.Set.prototype = {
  "constructor": function () {},
  "toSetSeq": function () {},
  "get": function () {},
  "includes": function () {},
  "keySeq": function () {},
  "has": function () {},
  "contains": function () {},
  "toSeq": function () {},
  "toString": function () {},
  "cacheResult": function () {},
  "__iterate": function () {},
  "__iterator": function () {},
  "@@__IMMUTABLE_SEQ__@@": function () {},
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toKeyedSeq": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toStack": function () {},
  "toList": function () {},
  "__toString": function () {},
  "concat": function () {},
  "entries": function () {},
  "every": function () {},
  "filter": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "reverse": function () {},
  "slice": function () {},
  "some": function () {},
  "sort": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "first": function () {},
  "flatMap": function () {},
  "flatten": function () {},
  "fromEntrySeq": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "last": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipWhile": function () {},
  "skipUntil": function () {},
  "sortBy": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {}
};
Immutable.Seq.Indexed.prototype = {
  "constructor": function () {},
  "toIndexedSeq": function () {},
  "toString": function () {},
  "__iterate": function () {},
  "__iterator": function () {},
  "toKeyedSeq": function () {},
  "filter": function () {},
  "findIndex": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "reverse": function () {},
  "slice": function () {},
  "splice": function () {},
  "findLastIndex": function () {},
  "first": function () {},
  "flatten": function () {},
  "get": function () {},
  "has": function () {},
  "interpose": function () {},
  "interleave": function () {},
  "keySeq": function () {},
  "last": function () {},
  "skipWhile": function () {},
  "zip": function () {},
  "zipWith": function () {},
  "@@__IMMUTABLE_INDEXED__@@": function () {},
  "@@__IMMUTABLE_ORDERED__@@": function () {},
  "toSeq": function () {},
  "cacheResult": function () {},
  "@@__IMMUTABLE_SEQ__@@": function () {},
  "toArray": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "__toString": function () {},
  "concat": function () {},
  "includes": function () {},
  "entries": function () {},
  "every": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "some": function () {},
  "sort": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "flatMap": function () {},
  "fromEntrySeq": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipUntil": function () {},
  "sortBy": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {},
  "contains": function () {}
};
Immutable.Collection.prototype = {
  "constructor": function () {},
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toKeyedSeq": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "toString": function () {},
  "__toString": function () {},
  "concat": function () {},
  "includes": function () {},
  "entries": function () {},
  "every": function () {},
  "filter": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "reverse": function () {},
  "slice": function () {},
  "some": function () {},
  "sort": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "first": function () {},
  "flatMap": function () {},
  "flatten": function () {},
  "fromEntrySeq": function () {},
  "get": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "has": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "keySeq": function () {},
  "last": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipWhile": function () {},
  "skipUntil": function () {},
  "sortBy": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {},
  "contains": function () {}
};
Immutable.Collection.Keyed.prototype = {
  "constructor": function () {},
  "flip": function () {},
  "mapEntries": function () {},
  "mapKeys": function () {},
  "@@__IMMUTABLE_KEYED__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toKeyedSeq": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "toString": function () {},
  "__toString": function () {},
  "concat": function () {},
  "includes": function () {},
  "entries": function () {},
  "every": function () {},
  "filter": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "reverse": function () {},
  "slice": function () {},
  "some": function () {},
  "sort": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "first": function () {},
  "flatMap": function () {},
  "flatten": function () {},
  "fromEntrySeq": function () {},
  "get": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "has": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "keySeq": function () {},
  "last": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipWhile": function () {},
  "skipUntil": function () {},
  "sortBy": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {},
  "contains": function () {}
};
Immutable.Collection.Indexed.prototype = {
  "constructor": function () {},
  "toKeyedSeq": function () {},
  "filter": function () {},
  "findIndex": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "reverse": function () {},
  "slice": function () {},
  "splice": function () {},
  "findLastIndex": function () {},
  "first": function () {},
  "flatten": function () {},
  "get": function () {},
  "has": function () {},
  "interpose": function () {},
  "interleave": function () {},
  "keySeq": function () {},
  "last": function () {},
  "skipWhile": function () {},
  "zip": function () {},
  "zipWith": function () {},
  "@@__IMMUTABLE_INDEXED__@@": function () {},
  "@@__IMMUTABLE_ORDERED__@@": function () {},
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "toString": function () {},
  "__toString": function () {},
  "concat": function () {},
  "includes": function () {},
  "entries": function () {},
  "every": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "some": function () {},
  "sort": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "flatMap": function () {},
  "fromEntrySeq": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipUntil": function () {},
  "sortBy": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {},
  "contains": function () {}
};
Immutable.Collection.Set.prototype = {
  "constructor": function () {},
  "get": function () {},
  "includes": function () {},
  "keySeq": function () {},
  "has": function () {},
  "contains": function () {},
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toKeyedSeq": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "toString": function () {},
  "__toString": function () {},
  "concat": function () {},
  "entries": function () {},
  "every": function () {},
  "filter": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "reverse": function () {},
  "slice": function () {},
  "some": function () {},
  "sort": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "first": function () {},
  "flatMap": function () {},
  "flatten": function () {},
  "fromEntrySeq": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "last": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipWhile": function () {},
  "skipUntil": function () {},
  "sortBy": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {}
};
Immutable.Map.prototype = {
  "constructor": function () {},
  "toString": function () {},
  "get": function () {},
  "set": function () {},
  "setIn": function () {},
  "remove": function () {},
  "deleteIn": function () {},
  "update": function () {},
  "updateIn": function () {},
  "clear": function () {},
  "merge": function () {},
  "mergeWith": function () {},
  "mergeIn": function () {},
  "mergeDeep": function () {},
  "mergeDeepWith": function () {},
  "mergeDeepIn": function () {},
  "sort": function () {},
  "sortBy": function () {},
  "withMutations": function () {},
  "asMutable": function () {},
  "asImmutable": function () {},
  "wasAltered": function () {},
  "__iterator": function () {},
  "__iterate": function () {},
  "__ensureOwner": function () {},
  "@@__IMMUTABLE_MAP__@@": function () {},
  "delete": function () {},
  "removeIn": function () {},
  "flip": function () {},
  "mapEntries": function () {},
  "mapKeys": function () {},
  "@@__IMMUTABLE_KEYED__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toKeyedSeq": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "__toString": function () {},
  "concat": function () {},
  "includes": function () {},
  "entries": function () {},
  "every": function () {},
  "filter": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "reverse": function () {},
  "slice": function () {},
  "some": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "first": function () {},
  "flatMap": function () {},
  "flatten": function () {},
  "fromEntrySeq": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "has": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "keySeq": function () {},
  "last": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipWhile": function () {},
  "skipUntil": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {},
  "contains": function () {}
};
Immutable.OrderedMap.prototype = {
  "constructor": function () {},
  "toString": function () {},
  "get": function () {},
  "clear": function () {},
  "set": function () {},
  "remove": function () {},
  "wasAltered": function () {},
  "__iterate": function () {},
  "__iterator": function () {},
  "__ensureOwner": function () {},
  "@@__IMMUTABLE_ORDERED__@@": function () {},
  "delete": function () {},
  "setIn": function () {},
  "deleteIn": function () {},
  "update": function () {},
  "updateIn": function () {},
  "merge": function () {},
  "mergeWith": function () {},
  "mergeIn": function () {},
  "mergeDeep": function () {},
  "mergeDeepWith": function () {},
  "mergeDeepIn": function () {},
  "sort": function () {},
  "sortBy": function () {},
  "withMutations": function () {},
  "asMutable": function () {},
  "asImmutable": function () {},
  "@@__IMMUTABLE_MAP__@@": function () {},
  "removeIn": function () {},
  "flip": function () {},
  "mapEntries": function () {},
  "mapKeys": function () {},
  "@@__IMMUTABLE_KEYED__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toKeyedSeq": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "__toString": function () {},
  "concat": function () {},
  "includes": function () {},
  "entries": function () {},
  "every": function () {},
  "filter": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "reverse": function () {},
  "slice": function () {},
  "some": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "first": function () {},
  "flatMap": function () {},
  "flatten": function () {},
  "fromEntrySeq": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "has": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "keySeq": function () {},
  "last": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipWhile": function () {},
  "skipUntil": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {},
  "contains": function () {}
};
Immutable.List.prototype = {
  "constructor": function () {},
  "toString": function () {},
  "get": function () {},
  "set": function () {},
  "remove": function () {},
  "insert": function () {},
  "clear": function () {},
  "push": function () {},
  "pop": function () {},
  "unshift": function () {},
  "shift": function () {},
  "merge": function () {},
  "mergeWith": function () {},
  "mergeDeep": function () {},
  "mergeDeepWith": function () {},
  "setSize": function () {},
  "slice": function () {},
  "__iterator": function () {},
  "__iterate": function () {},
  "__ensureOwner": function () {},
  "@@__IMMUTABLE_LIST__@@": function () {},
  "delete": function () {},
  "setIn": function () {},
  "removeIn": function () {},
  "deleteIn": function () {},
  "update": function () {},
  "updateIn": function () {},
  "mergeIn": function () {},
  "mergeDeepIn": function () {},
  "withMutations": function () {},
  "asMutable": function () {},
  "asImmutable": function () {},
  "wasAltered": function () {},
  "toKeyedSeq": function () {},
  "filter": function () {},
  "findIndex": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "reverse": function () {},
  "splice": function () {},
  "findLastIndex": function () {},
  "first": function () {},
  "flatten": function () {},
  "has": function () {},
  "interpose": function () {},
  "interleave": function () {},
  "keySeq": function () {},
  "last": function () {},
  "skipWhile": function () {},
  "zip": function () {},
  "zipWith": function () {},
  "@@__IMMUTABLE_INDEXED__@@": function () {},
  "@@__IMMUTABLE_ORDERED__@@": function () {},
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "__toString": function () {},
  "concat": function () {},
  "includes": function () {},
  "entries": function () {},
  "every": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "some": function () {},
  "sort": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "flatMap": function () {},
  "fromEntrySeq": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipUntil": function () {},
  "sortBy": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {},
  "contains": function () {}
};
Immutable.Stack.prototype = {
  "constructor": function () {},
  "toString": function () {},
  "get": function () {},
  "peek": function () {},
  "push": function () {},
  "pushAll": function () {},
  "pop": function () {},
  "unshift": function () {},
  "unshiftAll": function () {},
  "shift": function () {},
  "clear": function () {},
  "slice": function () {},
  "__ensureOwner": function () {},
  "__iterate": function () {},
  "__iterator": function () {},
  "@@__IMMUTABLE_STACK__@@": function () {},
  "withMutations": function () {},
  "asMutable": function () {},
  "asImmutable": function () {},
  "wasAltered": function () {},
  "toKeyedSeq": function () {},
  "filter": function () {},
  "findIndex": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "reverse": function () {},
  "splice": function () {},
  "findLastIndex": function () {},
  "first": function () {},
  "flatten": function () {},
  "has": function () {},
  "interpose": function () {},
  "interleave": function () {},
  "keySeq": function () {},
  "last": function () {},
  "skipWhile": function () {},
  "zip": function () {},
  "zipWith": function () {},
  "@@__IMMUTABLE_INDEXED__@@": function () {},
  "@@__IMMUTABLE_ORDERED__@@": function () {},
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "__toString": function () {},
  "concat": function () {},
  "includes": function () {},
  "entries": function () {},
  "every": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "some": function () {},
  "sort": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "flatMap": function () {},
  "fromEntrySeq": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipUntil": function () {},
  "sortBy": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {},
  "contains": function () {}
};
Immutable.Set.prototype = {
  "constructor": function () {},
  "toString": function () {},
  "has": function () {},
  "add": function () {},
  "remove": function () {},
  "clear": function () {},
  "union": function () {},
  "intersect": function () {},
  "subtract": function () {},
  "merge": function () {},
  "mergeWith": function () {},
  "sort": function () {},
  "sortBy": function () {},
  "wasAltered": function () {},
  "__iterate": function () {},
  "__iterator": function () {},
  "__ensureOwner": function () {},
  "@@__IMMUTABLE_SET__@@": function () {},
  "delete": function () {},
  "mergeDeep": function () {},
  "mergeDeepWith": function () {},
  "withMutations": function () {},
  "asMutable": function () {},
  "asImmutable": function () {},
  "__empty": function () {},
  "__make": function () {},
  "get": function () {},
  "includes": function () {},
  "keySeq": function () {},
  "contains": function () {},
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toKeyedSeq": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "__toString": function () {},
  "concat": function () {},
  "entries": function () {},
  "every": function () {},
  "filter": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "reverse": function () {},
  "slice": function () {},
  "some": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "first": function () {},
  "flatMap": function () {},
  "flatten": function () {},
  "fromEntrySeq": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "last": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipWhile": function () {},
  "skipUntil": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {}
};
Immutable.OrderedSet.prototype = {
  "constructor": function () {},
  "toString": function () {},
  "@@__IMMUTABLE_ORDERED__@@": function () {},
  "__empty": function () {},
  "__make": function () {},
  "has": function () {},
  "add": function () {},
  "remove": function () {},
  "clear": function () {},
  "union": function () {},
  "intersect": function () {},
  "subtract": function () {},
  "merge": function () {},
  "mergeWith": function () {},
  "sort": function () {},
  "sortBy": function () {},
  "wasAltered": function () {},
  "__iterate": function () {},
  "__iterator": function () {},
  "__ensureOwner": function () {},
  "@@__IMMUTABLE_SET__@@": function () {},
  "delete": function () {},
  "mergeDeep": function () {},
  "mergeDeepWith": function () {},
  "withMutations": function () {},
  "asMutable": function () {},
  "asImmutable": function () {},
  "get": function () {},
  "includes": function () {},
  "keySeq": function () {},
  "contains": function () {},
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toKeyedSeq": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "__toString": function () {},
  "concat": function () {},
  "entries": function () {},
  "every": function () {},
  "filter": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "reverse": function () {},
  "slice": function () {},
  "some": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "first": function () {},
  "flatMap": function () {},
  "flatten": function () {},
  "fromEntrySeq": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "last": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipWhile": function () {},
  "skipUntil": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {}
};
Immutable.Record.prototype = {
  "constructor": function () {},
  "toString": function () {},
  "has": function () {},
  "get": function () {},
  "clear": function () {},
  "set": function () {},
  "remove": function () {},
  "wasAltered": function () {},
  "__iterator": function () {},
  "__iterate": function () {},
  "__ensureOwner": function () {},
  "delete": function () {},
  "removeIn": function () {},
  "deleteIn": function () {},
  "merge": function () {},
  "mergeWith": function () {},
  "mergeIn": function () {},
  "mergeDeep": function () {},
  "mergeDeepWith": function () {},
  "mergeDeepIn": function () {},
  "setIn": function () {},
  "update": function () {},
  "updateIn": function () {},
  "withMutations": function () {},
  "asMutable": function () {},
  "asImmutable": function () {},
  "flip": function () {},
  "mapEntries": function () {},
  "mapKeys": function () {},
  "@@__IMMUTABLE_KEYED__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toArray": function () {},
  "toIndexedSeq": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toKeyedSeq": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "__toString": function () {},
  "concat": function () {},
  "includes": function () {},
  "entries": function () {},
  "every": function () {},
  "filter": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "reverse": function () {},
  "slice": function () {},
  "some": function () {},
  "sort": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "equals": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "first": function () {},
  "flatMap": function () {},
  "flatten": function () {},
  "fromEntrySeq": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "keySeq": function () {},
  "last": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipWhile": function () {},
  "skipUntil": function () {},
  "sortBy": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {},
  "contains": function () {}
};
Immutable.Range.prototype = {
  "constructor": function () {},
  "toString": function () {},
  "get": function () {},
  "includes": function () {},
  "slice": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "__iterate": function () {},
  "__iterator": function () {},
  "equals": function () {},
  "toIndexedSeq": function () {},
  "toKeyedSeq": function () {},
  "filter": function () {},
  "findIndex": function () {},
  "reverse": function () {},
  "splice": function () {},
  "findLastIndex": function () {},
  "first": function () {},
  "flatten": function () {},
  "has": function () {},
  "interpose": function () {},
  "interleave": function () {},
  "keySeq": function () {},
  "last": function () {},
  "skipWhile": function () {},
  "zip": function () {},
  "zipWith": function () {},
  "@@__IMMUTABLE_INDEXED__@@": function () {},
  "@@__IMMUTABLE_ORDERED__@@": function () {},
  "toSeq": function () {},
  "cacheResult": function () {},
  "@@__IMMUTABLE_SEQ__@@": function () {},
  "toArray": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "__toString": function () {},
  "concat": function () {},
  "entries": function () {},
  "every": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "some": function () {},
  "sort": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "flatMap": function () {},
  "fromEntrySeq": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipUntil": function () {},
  "sortBy": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {},
  "contains": function () {}
};
Immutable.Repeat.prototype = {
  "constructor": function () {},
  "toString": function () {},
  "get": function () {},
  "includes": function () {},
  "slice": function () {},
  "reverse": function () {},
  "indexOf": function () {},
  "lastIndexOf": function () {},
  "__iterate": function () {},
  "__iterator": function () {},
  "equals": function () {},
  "toIndexedSeq": function () {},
  "toKeyedSeq": function () {},
  "filter": function () {},
  "findIndex": function () {},
  "splice": function () {},
  "findLastIndex": function () {},
  "first": function () {},
  "flatten": function () {},
  "has": function () {},
  "interpose": function () {},
  "interleave": function () {},
  "keySeq": function () {},
  "last": function () {},
  "skipWhile": function () {},
  "zip": function () {},
  "zipWith": function () {},
  "@@__IMMUTABLE_INDEXED__@@": function () {},
  "@@__IMMUTABLE_ORDERED__@@": function () {},
  "toSeq": function () {},
  "cacheResult": function () {},
  "@@__IMMUTABLE_SEQ__@@": function () {},
  "toArray": function () {},
  "toJS": function () {},
  "toJSON": function () {},
  "toMap": function () {},
  "toObject": function () {},
  "toOrderedMap": function () {},
  "toOrderedSet": function () {},
  "toSet": function () {},
  "toSetSeq": function () {},
  "toStack": function () {},
  "toList": function () {},
  "__toString": function () {},
  "concat": function () {},
  "entries": function () {},
  "every": function () {},
  "find": function () {},
  "forEach": function () {},
  "join": function () {},
  "keys": function () {},
  "map": function () {},
  "reduce": function () {},
  "reduceRight": function () {},
  "some": function () {},
  "sort": function () {},
  "values": function () {},
  "butLast": function () {},
  "isEmpty": function () {},
  "count": function () {},
  "countBy": function () {},
  "entrySeq": function () {},
  "filterNot": function () {},
  "findEntry": function () {},
  "findKey": function () {},
  "findLast": function () {},
  "findLastEntry": function () {},
  "findLastKey": function () {},
  "flatMap": function () {},
  "fromEntrySeq": function () {},
  "getIn": function () {},
  "groupBy": function () {},
  "hasIn": function () {},
  "isSubset": function () {},
  "isSuperset": function () {},
  "keyOf": function () {},
  "lastKeyOf": function () {},
  "max": function () {},
  "maxBy": function () {},
  "min": function () {},
  "minBy": function () {},
  "rest": function () {},
  "skip": function () {},
  "skipLast": function () {},
  "skipUntil": function () {},
  "sortBy": function () {},
  "take": function () {},
  "takeLast": function () {},
  "takeWhile": function () {},
  "takeUntil": function () {},
  "valueSeq": function () {},
  "hashCode": function () {},
  "@@__IMMUTABLE_ITERABLE__@@": function () {},
  "__toJS": function () {},
  "__toStringMapper": function () {},
  "toSource": function () {},
  "inspect": function () {},
  "chain": function () {},
  "contains": function () {}
};
/**********************************************************************
 * End Generated Extern for Immutable
/**********************************************************************/
