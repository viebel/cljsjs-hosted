{"version":3,"file":"incremental-dom-closure.js","sources":["src/util.js","src/node_data.js","src/nodes.js","src/notifications.js","src/context.js","src/assertions.js","src/dom_util.js","src/core.js","src/symbols.js","src/attributes.js","src/virtual_elements.js"],"sourcesContent":["/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A cached reference to the hasOwnProperty function.\n */\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n/**\n * A constructor function that will create blank objects.\n * @constructor\n */\nfunction Blank() {}\n\nBlank.prototype = Object.create(null);\n\n\n/**\n * Used to prevent property collisions between our \"map\" and its prototype.\n * @param {!Object<string, *>} map The map to check.\n * @param {string} property The property to check.\n * @return {boolean} Whether map has property.\n */\nconst has = function(map, property) {\n  return hasOwnProperty.call(map, property);\n};\n\n\n/**\n * Creates an map object without a prototype.\n * @return {!Object}\n */\nconst createMap = function() {\n  return new Blank();\n};\n\n\n/** */\nexport {\n  createMap,\n  has\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createMap } from './util';\n\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {!string} nodeName\n * @param {?string=} key\n * @constructor\n */\nfunction NodeData(nodeName, key) {\n  /**\n   * The attributes and their values.\n   * @const {!Object<string, *>}\n   */\n  this.attrs = createMap();\n\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * The incoming attributes for this Node, before they are updated.\n   * @const {!Object<string, *>}\n   */\n  this.newAttrs = createMap();\n\n  /**\n   * Whether or not the statics have been applied for the node yet.\n   * {boolean}\n   */\n  this.staticsApplied = false;\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @const\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {!Object<string, !Element>}\n   */\n  this.keyMap = createMap();\n\n  /**\n   * Whether or not the keyMap is currently valid.\n   * @type {boolean}\n   */\n  this.keyMapValid = true;\n\n  /**\n   * Whether or the associated node is, or contains, a focused Element.\n   * @type {boolean}\n   */\n  this.focused = false;\n\n  /**\n   * The node name for this node.\n   * @const {string}\n   */\n  this.nodeName = nodeName;\n\n  /**\n   * @type {?string}\n   */\n  this.text = null;\n}\n\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {Node} node The node to initialize data for.\n * @param {string} nodeName The node name of node.\n * @param {?string=} key The key that identifies the node.\n * @return {!NodeData} The newly initialized data object\n */\nconst initData = function(node, nodeName, key) {\n  const data = new NodeData(nodeName, key);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {?Node} node The Node to retrieve the data for.\n * @return {!NodeData} The NodeData for this Node.\n */\nconst getData = function(node) {\n  importNode(node);\n  return node['__incrementalDOMData'];\n};\n\n\n/**\n * Imports node and its subtree, initializing caches.\n *\n * @param {?Node} node The Node to import.\n */\nconst importNode = function(node) {\n  if (node['__incrementalDOMData']) {\n    return;\n  }\n\n  const isElement = node instanceof Element;\n  const nodeName = isElement ? node.localName : node.nodeName;\n  const key = isElement ? node.getAttribute('key') : null;\n  const data = initData(node, nodeName, key);\n\n  if (key) {\n    getData(node.parentNode).keyMap[key] = node;\n  }\n\n  if (isElement) {\n    const attributes = node.attributes;\n    const attrs = data.attrs;\n    const newAttrs = data.newAttrs;\n    const attrsArr = data.attrsArr;\n\n    for (let i = 0; i < attributes.length; i += 1) {\n      const attr = attributes[i];\n      const name = attr.name;\n      const value = attr.value;\n\n      attrs[name] = value;\n      newAttrs[name] = undefined;\n      attrsArr.push(name);\n      attrsArr.push(value);\n    }\n  }\n\n  for (let child = node.firstChild; child; child = child.nextSibling) {\n    importNode(child);\n  }\n};\n\n\n/** */\nexport {\n  getData,\n  initData,\n  importNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    getData,\n    initData\n} from './node_data';\n\n\n/**\n * Gets the namespace to create an element (of a given tag) in.\n * @param {string} tag The tag to get the namespace for.\n * @param {?Node} parent\n * @return {?string} The namespace to create the tag in.\n */\nconst getNamespaceForTag = function(tag, parent) {\n  if (tag === 'svg') {\n    return 'http://www.w3.org/2000/svg';\n  }\n\n  if (getData(parent).nodeName === 'foreignObject') {\n    return null;\n  }\n\n  return parent.namespaceURI;\n};\n\n\n/**\n * Creates an Element.\n * @param {Document} doc The document with which to create the Element.\n * @param {?Node} parent\n * @param {string} tag The tag for the Element.\n * @param {?string=} key A key to identify the Element.\n * @return {!Element}\n */\nconst createElement = function(doc, parent, tag, key) {\n  const namespace = getNamespaceForTag(tag, parent);\n  let el;\n\n  if (namespace) {\n    el = doc.createElementNS(namespace, tag);\n  } else {\n    el = doc.createElement(tag);\n  }\n\n  initData(el, tag, key);\n\n  return el;\n};\n\n\n/**\n * Creates a Text Node.\n * @param {Document} doc The document with which to create the Element.\n * @return {!Text}\n */\nconst createText = function(doc) {\n  const node = doc.createTextNode('');\n  initData(node, '#text', null);\n  return node;\n};\n\n\n/** */\nexport {\n  createElement,\n  createText\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst notifications = {\n  /**\n   * Called after patch has compleated with any Nodes that have been created\n   * and added to the DOM.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesCreated: null,\n\n  /**\n   * Called after patch has compleated with any Nodes that have been removed\n   * from the DOM.\n   * Note it's an applications responsibility to handle any childNodes.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesDeleted: null\n};\n\nexport {\n  notifications\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { notifications } from './notifications';\n\n\n/**\n * Keeps track of the state of a patch.\n * @constructor\n */\nfunction Context() {\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.created = notifications.nodesCreated && [];\n\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.deleted = notifications.nodesDeleted && [];\n}\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markCreated = function(node) {\n  if (this.created) {\n    this.created.push(node);\n  }\n};\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markDeleted = function(node) {\n  if (this.deleted) {\n    this.deleted.push(node);\n  }\n};\n\n\n/**\n * Notifies about nodes that were created during the patch opearation.\n */\nContext.prototype.notifyChanges = function() {\n  if (this.created && this.created.length > 0) {\n    notifications.nodesCreated(this.created);\n  }\n\n  if (this.deleted && this.deleted.length > 0) {\n    notifications.nodesDeleted(this.deleted);\n  }\n};\n\n\n/** */\nexport {\n  Context\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n  * Keeps track whether or not we are in an attributes declaration (after\n  * elementOpenStart, but before elementOpenEnd).\n  * @type {boolean}\n  */\nlet inAttributes = false;\n\n\n/**\n  * Keeps track whether or not we are in an element that should not have its\n  * children cleared.\n  * @type {boolean}\n  */\nlet inSkip = false;\n\n\n/**\n * Makes sure that there is a current patch context.\n * @param {string} functionName\n * @param {*} context\n */\nconst assertInPatch = function(functionName, context) {\n  if (!context) {\n    throw new Error('Cannot call ' + functionName + '() unless in patch.');\n  }\n};\n\n\n/**\n * Makes sure that a patch closes every node that it opened.\n * @param {?Node} openElement\n * @param {!Node|!DocumentFragment} root\n */\nconst assertNoUnclosedTags = function(openElement, root) {\n  if (openElement === root) {\n    return;\n  }\n\n  let currentElement = openElement;\n  const openTags = [];\n  while (currentElement && currentElement !== root) {\n    openTags.push(currentElement.nodeName.toLowerCase());\n    currentElement = currentElement.parentNode;\n  }\n\n  throw new Error('One or more tags were not closed:\\n' +\n      openTags.join('\\n'));\n};\n\n\n/**\n * Makes sure that the caller is not where attributes are expected.\n * @param {string} functionName\n */\nconst assertNotInAttributes = function(functionName) {\n  if (inAttributes) {\n    throw new Error(functionName + '() can not be called between ' +\n        'elementOpenStart() and elementOpenEnd().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is not inside an element that has declared skip.\n * @param {string} functionName\n */\nconst assertNotInSkip = function(functionName) {\n  if (inSkip) {\n    throw new Error(functionName + '() may not be called inside an element ' +\n        'that has called skip().');\n  }\n};\n\n\n/**\n * Makes sure that the caller is where attributes are expected.\n * @param {string} functionName\n */\nconst assertInAttributes = function(functionName) {\n  if (!inAttributes) {\n    throw new Error(functionName + '() can only be called after calling ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n * Makes sure the patch closes virtual attributes call\n */\nconst assertVirtualAttributesClosed = function() {\n  if (inAttributes) {\n    throw new Error('elementOpenEnd() must be called after calling ' +\n        'elementOpenStart().');\n  }\n};\n\n\n/**\n  * Makes sure that tags are correctly nested.\n  * @param {string} nodeName\n  * @param {string} tag\n  */\nconst assertCloseMatchesOpenTag = function(nodeName, tag) {\n  if (nodeName !== tag) {\n    throw new Error('Received a call to close \"' + tag + '\" but \"' +\n        nodeName + '\" was open.');\n  }\n};\n\n\n/**\n * Makes sure that no children elements have been declared yet in the current\n * element.\n * @param {string} functionName\n * @param {?Node} previousNode\n */\nconst assertNoChildrenDeclaredYet = function(functionName, previousNode) {\n  if (previousNode !== null) {\n    throw new Error(functionName + '() must come before any child ' +\n        'declarations inside the current element.');\n  }\n};\n\n\n/**\n * Checks that a call to patchOuter actually patched the element.\n * @param {?Node} startNode The value for the currentNode when the patch\n *     started.\n * @param {?Node} currentNode The currentNode when the patch finished.\n * @param {?Node} expectedNextNode The Node that is expected to follow the\n *    currentNode after the patch;\n * @param {?Node} expectedPrevNode The Node that is expected to preceed the\n *    currentNode after the patch.\n */\nconst assertPatchElementNoExtras = function(\n    startNode,\n    currentNode,\n    expectedNextNode,\n    expectedPrevNode) {\n  const wasUpdated = currentNode.nextSibling === expectedNextNode &&\n                     currentNode.previousSibling === expectedPrevNode;\n  const wasChanged = currentNode.nextSibling === startNode.nextSibling &&\n                     currentNode.previousSibling === expectedPrevNode;\n  const wasRemoved = currentNode === startNode;\n\n  if (!wasUpdated && !wasChanged && !wasRemoved) {\n    throw new Error('There must be exactly one top level call corresponding ' +\n        'to the patched element.');\n  }\n};\n\n\n/**\n * Updates the state of being in an attribute declaration.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nconst setInAttributes = function(value) {\n  const previous = inAttributes;\n  inAttributes = value;\n  return previous;\n};\n\n\n/**\n * Updates the state of being in a skip element.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nconst setInSkip = function(value) {\n  const previous = inSkip;\n  inSkip = value;\n  return previous;\n};\n\n\n/** */\nexport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertNotInSkip,\n  assertPatchElementNoExtras,\n  setInAttributes,\n  setInSkip\n};\n","/**\n * Copyright 2016 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {!Node} node\n * @return {boolean} True if the node the root of a document, false otherwise.\n */\nconst isDocumentRoot = function(node) {\n  // For ShadowRoots, check if they are a DocumentFragment instead of if they\n  // are a ShadowRoot so that this can work in 'use strict' if ShadowRoots are\n  // not supported.\n  return node instanceof Document || node instanceof DocumentFragment;\n};\n\n\n/**\n * @param {!Node} node The node to start at, inclusive.\n * @param {?Node} root The root ancestor to get until, exclusive.\n * @return {!Array<!Node>} The ancestry of DOM nodes.\n */\nconst getAncestry = function(node, root) {\n  const ancestry = [];\n  let cur = node;\n\n  while (cur !== root) {\n    ancestry.push(cur);\n    cur = cur.parentNode;\n  }\n\n  return ancestry;\n};\n\n\n/**\n * @param {!Node} node\n * @return {!Node} The root node of the DOM tree that contains node.\n */\nconst getRoot = function(node) {\n  let cur = node;\n  let prev = cur;\n\n  while (cur) {\n    prev = cur;\n    cur = cur.parentNode;\n  }\n\n  return prev;\n};\n\n\n/**\n * @param {!Node} node The node to get the activeElement for.\n * @return {?Element} The activeElement in the Document or ShadowRoot\n *     corresponding to node, if present.\n */\nconst getActiveElement = function(node) {\n  const root = getRoot(node);\n  return isDocumentRoot(root) ? root.activeElement : null;\n};\n\n\n/**\n * Gets the path of nodes that contain the focused node in the same document as\n * a reference node, up until the root.\n * @param {!Node} node The reference node to get the activeElement for.\n * @param {?Node} root The root to get the focused path until.\n * @return {!Array<Node>}\n */\nconst getFocusedPath = function(node, root) {\n  const activeElement = getActiveElement(node);\n\n  if (!activeElement || !node.contains(activeElement)) {\n    return [];\n  }\n\n  return getAncestry(activeElement, root);\n};\n\n\n/**\n * Like insertBefore, but instead instead of moving the desired node, instead\n * moves all the other nodes after.\n * @param {?Node} parentNode\n * @param {!Node} node\n * @param {?Node} referenceNode\n */\nconst moveBefore = function(parentNode, node, referenceNode) {\n  const insertReferenceNode = node.nextSibling;\n  let cur = referenceNode;\n\n  while (cur !== node) {\n    const next = cur.nextSibling;\n    parentNode.insertBefore(cur, insertReferenceNode);\n    cur = next;\n  }\n};\n\n\n/** */\nexport {\n  getFocusedPath,\n  moveBefore\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createElement,\n  createText\n} from './nodes';\nimport { getData } from './node_data';\nimport { Context } from './context';\nimport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertPatchElementNoExtras,\n  setInAttributes,\n  setInSkip\n} from './assertions';\nimport {\n  getFocusedPath,\n  moveBefore\n} from './dom_util';\n\n\n/** @type {?Context} */\nlet context = null;\n\n/** @type {?Node} */\nlet currentNode = null;\n\n/** @type {?Node} */\nlet currentParent = null;\n\n/** @type {?Document} */\nlet doc = null;\n\n\n/**\n * @param {!Array<Node>} focusPath The nodes to mark.\n * @param {boolean} focused Whether or not they are focused.\n */\nconst markFocused = function(focusPath, focused) {\n  for (let i = 0; i < focusPath.length; i += 1) {\n    getData(focusPath[i]).focused = focused;\n  }\n};\n\n\n/**\n * Returns a patcher function that sets up and restores a patch context,\n * running the run function with the provided data.\n * @param {function((!Element|!DocumentFragment),!function(T),T=): ?Node} run\n * @return {function((!Element|!DocumentFragment),!function(T),T=): ?Node}\n * @template T\n */\nconst patchFactory = function(run) {\n  /**\n   * TODO(moz): These annotations won't be necessary once we switch to Closure\n   * Compiler's new type inference. Remove these once the switch is done.\n   *\n   * @param {(!Element|!DocumentFragment)} node\n   * @param {!function(T)} fn\n   * @param {T=} data\n   * @return {?Node} node\n   * @template T\n   */\n  const f = function(node, fn, data) {\n    const prevContext = context;\n    const prevDoc = doc;\n    const prevCurrentNode = currentNode;\n    const prevCurrentParent = currentParent;\n    let previousInAttributes = false;\n    let previousInSkip = false;\n\n    context = new Context();\n    doc = node.ownerDocument;\n    currentParent = node.parentNode;\n\n    if (process.env.NODE_ENV !== 'production') {\n      previousInAttributes = setInAttributes(false);\n      previousInSkip = setInSkip(false);\n    }\n\n    const focusPath = getFocusedPath(node, currentParent);\n    markFocused(focusPath, true);\n    const retVal = run(node, fn, data);\n    markFocused(focusPath, false);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assertVirtualAttributesClosed();\n      setInAttributes(previousInAttributes);\n      setInSkip(previousInSkip);\n    }\n\n    context.notifyChanges();\n\n    context = prevContext;\n    doc = prevDoc;\n    currentNode = prevCurrentNode;\n    currentParent = prevCurrentParent;\n\n    return retVal;\n  };\n  return f;\n};\n\n\n/**\n * Patches the document starting at node with the provided function. This\n * function may be called during an existing patch operation.\n * @param {!Element|!DocumentFragment} node The Element or Document\n *     to patch.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {!Node} The patched node.\n * @template T\n */\nconst patchInner = patchFactory(function(node, fn, data) {\n  currentNode = node;\n\n  enterNode();\n  fn(data);\n  exitNode();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoUnclosedTags(currentNode, node);\n  }\n\n  return node;\n});\n\n\n/**\n * Patches an Element with the the provided function. Exactly one top level\n * element call should be made corresponding to `node`.\n * @param {!Element} node The Element where the patch should start.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM. This should have at most one top level\n *     element call.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {?Node} The node if it was updated, its replacedment or null if it\n *     was removed.\n * @template T\n */\nconst patchOuter = patchFactory(function(node, fn, data) {\n  let startNode = /** @type {!Element} */({ nextSibling: node });\n  let expectedNextNode = null;\n  let expectedPrevNode = null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    expectedNextNode = node.nextSibling;\n    expectedPrevNode = node.previousSibling;\n  }\n\n  currentNode = startNode;\n  fn(data);\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertPatchElementNoExtras(startNode, currentNode, expectedNextNode,\n        expectedPrevNode);\n  }\n\n  if (node !== currentNode && node.parentNode) {\n    removeChild(currentParent, node, getData(currentParent).keyMap);\n  }\n\n  return (startNode === currentNode) ? null : currentNode;\n});\n\n\n/**\n * Checks whether or not the current node matches the specified nodeName and\n * key.\n *\n * @param {!Node} matchNode A node to match the data to.\n * @param {?string} nodeName The nodeName for this node.\n * @param {?string=} key An optional key that identifies a node.\n * @return {boolean} True if the node matches, false otherwise.\n */\nconst matches = function(matchNode, nodeName, key) {\n  const data = getData(matchNode);\n\n  // Key check is done using double equals as we want to treat a null key the\n  // same as undefined. This should be okay as the only values allowed are\n  // strings, null and undefined so the == semantics are not too weird.\n  return nodeName === data.nodeName && key == data.key;\n};\n\n\n/**\n * Aligns the virtual Element definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {string} nodeName For an Element, this should be a valid tag string.\n *     For a Text, this should be #text.\n * @param {?string=} key The key used to identify this element.\n */\nconst alignWithDOM = function(nodeName, key) {\n  if (currentNode && matches(currentNode, nodeName, key)) {\n    return;\n  }\n\n  const parentData = getData(currentParent);\n  const currentNodeData = currentNode && getData(currentNode);\n  const keyMap = parentData.keyMap;\n  let node;\n\n  // Check to see if the node has moved within the parent.\n  if (key) {\n    const keyNode = keyMap[key];\n    if (keyNode) {\n      if (matches(keyNode, nodeName, key)) {\n        node = keyNode;\n      } else if (keyNode === currentNode) {\n        context.markDeleted(keyNode);\n      } else {\n        removeChild(currentParent, keyNode, keyMap);\n      }\n    }\n  }\n\n  // Create the node if it doesn't exist.\n  if (!node) {\n    if (nodeName === '#text') {\n      node = createText(doc);\n    } else {\n      node = createElement(doc, currentParent, nodeName, key);\n    }\n\n    if (key) {\n      keyMap[key] = node;\n    }\n\n    context.markCreated(node);\n  }\n\n  // Re-order the node into the right position, preserving focus if either\n  // node or currentNode are focused by making sure that they are not detached\n  // from the DOM.\n  if (getData(node).focused) {\n    // Move everything else before the node.\n    moveBefore(currentParent, node, currentNode);\n  } else if (currentNodeData && currentNodeData.key && !currentNodeData.focused) {\n    // Remove the currentNode, which can always be added back since we hold a\n    // reference through the keyMap. This prevents a large number of moves when\n    // a keyed item is removed or moved backwards in the DOM.\n    currentParent.replaceChild(node, currentNode);\n    parentData.keyMapValid = false;\n  } else {\n    currentParent.insertBefore(node, currentNode);\n  }\n\n  currentNode = node;\n};\n\n\n/**\n * @param {?Node} node\n * @param {?Node} child\n * @param {?Object<string, !Element>} keyMap\n */\nconst removeChild = function(node, child, keyMap) {\n  node.removeChild(child);\n  context.markDeleted(/** @type {!Node}*/(child));\n\n  const key = getData(child).key;\n  if (key) {\n    delete keyMap[key];\n  }\n};\n\n\n/**\n * Clears out any unvisited Nodes, as the corresponding virtual element\n * functions were never called for them.\n */\nconst clearUnvisitedDOM = function() {\n  const node = currentParent;\n  const data = getData(node);\n  const keyMap = data.keyMap;\n  const keyMapValid = data.keyMapValid;\n  let child = node.lastChild;\n  let key;\n\n  if (child === currentNode && keyMapValid) {\n    return;\n  }\n\n  while (child !== currentNode) {\n    removeChild(node, child, keyMap);\n    child = node.lastChild;\n  }\n\n  // Clean the keyMap, removing any unusued keys.\n  if (!keyMapValid) {\n    for (key in keyMap) {\n      child = keyMap[key];\n      if (child.parentNode !== node) {\n        context.markDeleted(child);\n        delete keyMap[key];\n      }\n    }\n\n    data.keyMapValid = true;\n  }\n};\n\n\n/**\n * Changes to the first child of the current node.\n */\nconst enterNode = function() {\n  currentParent = currentNode;\n  currentNode = null;\n};\n\n\n/**\n * @return {?Node} The next Node to be patched.\n */\nconst getNextNode = function() {\n  if (currentNode) {\n    return currentNode.nextSibling;\n  } else {\n    return currentParent.firstChild;\n  }\n};\n\n\n/**\n * Changes to the next sibling of the current node.\n */\nconst nextNode = function() {\n  currentNode = getNextNode();\n};\n\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nconst exitNode = function() {\n  clearUnvisitedDOM();\n\n  currentNode = currentParent;\n  currentParent = currentParent.parentNode;\n};\n\n\n/**\n * Makes sure that the current node is an Element with a matching tagName and\n * key.\n *\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key) {\n  nextNode();\n  alignWithDOM(tag, key);\n  enterNode();\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * Closes the currently open Element, removing any unvisited children if\n * necessary.\n *\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    setInSkip(false);\n  }\n\n  exitNode();\n  return /** @type {!Element} */(currentNode);\n};\n\n\n/**\n * Makes sure the current node is a Text node and creates a Text node if it is\n * not.\n *\n * @return {!Text} The corresponding Text Node.\n */\nconst text = function() {\n  nextNode();\n  alignWithDOM('#text', null);\n  return /** @type {!Text} */(currentNode);\n};\n\n\n/**\n * Gets the current Element being patched.\n * @return {!Element}\n */\nconst currentElement = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentElement', context);\n    assertNotInAttributes('currentElement');\n  }\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * @return {Node} The Node that will be evaluated for the next instruction.\n */\nconst currentPointer = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentPointer', context);\n    assertNotInAttributes('currentPointer');\n  }\n  return getNextNode();\n};\n\n\n/**\n * Skips the children in a subtree, allowing an Element to be closed without\n * clearing out the children.\n */\nconst skip = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoChildrenDeclaredYet('skip', currentNode);\n    setInSkip(true);\n  }\n  currentNode = currentParent.lastChild;\n};\n\n\n/**\n * Skips the next Node to be patched, moving the pointer forward to the next\n * sibling of the current pointer.\n */\nconst skipNode = nextNode;\n\n\n/** */\nexport {\n  elementOpen,\n  elementClose,\n  text,\n  patchInner,\n  patchOuter,\n  currentElement,\n  currentPointer,\n  skip,\n  skipNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst symbols = {\n  default: '__default'\n};\n\n/** */\nexport {\n  symbols\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getData } from './node_data';\nimport { symbols } from './symbols';\nimport {\n  createMap,\n  has\n} from './util';\n\n\n/**\n * @param {string} name\n * @return {string|undefined} The namespace to use for the attribute.\n */\nconst getNamespace = function(name) {\n  if (name.lastIndexOf('xml:', 0) === 0) {\n    return 'http://www.w3.org/XML/1998/namespace';\n  }\n\n  if (name.lastIndexOf('xlink:', 0) === 0) {\n    return 'http://www.w3.org/1999/xlink';\n  }\n};\n\n\n/**\n * Applies an attribute or property to a given Element. If the value is null\n * or undefined, it is removed from the Element. Otherwise, the value is set\n * as an attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {?(boolean|number|string)=} value The attribute's value.\n */\nconst applyAttr = function(el, name, value) {\n  if (value == null) {\n    el.removeAttribute(name);\n  } else {\n    const attrNS = getNamespace(name);\n    if (attrNS) {\n      el.setAttributeNS(attrNS, name, value);\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n};\n\n/**\n * Applies a property to a given Element.\n * @param {!Element} el\n * @param {string} name The property's name.\n * @param {*} value The property's value.\n */\nconst applyProp = function(el, name, value) {\n  el[name] = value;\n};\n\n\n/**\n * Applies a value to a style declaration. Supports CSS custom properties by\n * setting properties containing a dash using CSSStyleDeclaration.setProperty.\n * @param {CSSStyleDeclaration} style\n * @param {!string} prop\n * @param {*} value\n */\nconst setStyleValue = function(style, prop, value) {\n  if (prop.indexOf('-') >= 0) {\n    style.setProperty(prop, /** @type {string} */(value));\n  } else {\n    style[prop] = value;\n  }\n};\n\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} style The style to set. Either a string of css or an object\n *     containing property-value pairs.\n */\nconst applyStyle = function(el, name, style) {\n  if (typeof style === 'string') {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n    const elStyle = el.style;\n    const obj = /** @type {!Object<string,string>} */(style);\n\n    for (const prop in obj) {\n      if (has(obj, prop)) {\n        setStyleValue(elStyle, prop, obj[prop]);\n      }\n    }\n  }\n};\n\n\n/**\n * Updates a single attribute on an Element.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is an object or\n *     function it is set on the Element, otherwise, it is set as an HTML\n *     attribute.\n */\nconst applyAttributeTyped = function(el, name, value) {\n  const type = typeof value;\n\n  if (type === 'object' || type === 'function') {\n    applyProp(el, name, value);\n  } else {\n    applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\n  }\n};\n\n\n/**\n * Calls the appropriate attribute mutator for this attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value.\n */\nconst updateAttribute = function(el, name, value) {\n  const data = getData(el);\n  const attrs = data.attrs;\n\n  if (attrs[name] === value) {\n    return;\n  }\n\n  const mutator = attributes[name] || attributes[symbols.default];\n  mutator(el, name, value);\n\n  attrs[name] = value;\n};\n\n\n/**\n * A publicly mutable object to provide custom mutators for attributes.\n * @const {!Object<string, function(!Element, string, *)>}\n */\nconst attributes = createMap();\n\n// Special generic mutator that's called for any attribute that does not\n// have a specific mutator.\nattributes[symbols.default] = applyAttributeTyped;\n\nattributes['style'] = applyStyle;\n\n\n/** */\nexport {\n  updateAttribute,\n  applyProp,\n  applyAttr,\n  attributes\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  elementOpen as coreElementOpen,\n  elementClose as coreElementClose,\n  text as coreText\n} from './core';\nimport { updateAttribute } from './attributes';\nimport { getData } from './node_data';\nimport {\n  assertNotInAttributes,\n  assertNotInSkip,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  setInAttributes\n} from './assertions';\n\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nconst ATTRIBUTES_OFFSET = 3;\n\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @const {Array<*>}\n */\nconst argsBuilder = [];\n\n\n/**\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args, Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key, statics, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpen');\n    assertNotInSkip('elementOpen');\n  }\n\n  const node = coreElementOpen(tag, key);\n  const data = getData(node);\n\n  if (!data.staticsApplied) {\n    if (statics) {\n      for (let i = 0; i < statics.length; i += 2) {\n        const name = /** @type {string} */(statics[i]);\n        const value = statics[i + 1];\n        updateAttribute(node, name, value);\n      }\n    }\n    // Down the road, we may want to keep track of the statics array to use it\n    // as an additional signal about whether a node matches or not. For now,\n    // just use a marker so that we do not reapply statics.\n    data.staticsApplied = true;\n  }\n\n  /*\n   * Checks to see if one or more attributes have changed for a given Element.\n   * When no attributes have changed, this is much faster than checking each\n   * individual argument. When attributes have changed, the overhead of this is\n   * minimal.\n   */\n  const attrsArr = data.attrsArr;\n  const newAttrs = data.newAttrs;\n  const isNew = !attrsArr.length;\n  let i = ATTRIBUTES_OFFSET;\n  let j = 0;\n\n  for (; i < arguments.length; i += 2, j += 2) {\n    const attr = arguments[i];\n    if (isNew) {\n      attrsArr[j] = attr;\n      newAttrs[attr] = undefined;\n    } else if (attrsArr[j] !== attr) {\n      break;\n    }\n\n    const value = arguments[i + 1];\n    if (isNew || attrsArr[j + 1] !== value) {\n      attrsArr[j + 1] = value;\n      updateAttribute(node, attr, value);\n    }\n  }\n\n  if (i < arguments.length || j < attrsArr.length) {\n    for (; i < arguments.length; i += 1, j += 1) {\n      attrsArr[j] = arguments[i];\n    }\n\n    if (j < attrsArr.length) {\n      attrsArr.length = j;\n    }\n\n    /*\n     * Actually perform the attribute update.\n     */\n    for (i = 0; i < attrsArr.length; i += 2) {\n      const name = /** @type {string} */(attrsArr[i]);\n      const value = attrsArr[i + 1];\n      newAttrs[name] = value;\n    }\n\n    for (const attr in newAttrs) {\n      updateAttribute(node, attr, newAttrs[attr]);\n      newAttrs[attr] = undefined;\n    }\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nconst elementOpenStart = function(tag, key, statics) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpenStart');\n    setInAttributes(true);\n  }\n\n  argsBuilder[0] = tag;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n};\n\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nconst attr = function(name, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('attr');\n  }\n\n  argsBuilder.push(name);\n  argsBuilder.push(value);\n};\n\n\n/**\n * Closes an open tag started with elementOpenStart.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpenEnd = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('elementOpenEnd');\n    setInAttributes(false);\n  }\n\n  const node = elementOpen.apply(null, argsBuilder);\n  argsBuilder.length = 0;\n  return node;\n};\n\n\n/**\n * Closes an open virtual Element.\n *\n * @param {string} tag The element's tag.\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function(tag) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementClose');\n  }\n\n  const node = coreElementClose();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertCloseMatchesOpenTag(getData(node).nodeName, tag);\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementVoid = function(tag, key, statics, var_args) {\n  elementOpen.apply(null, arguments);\n  return elementClose(tag);\n};\n\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string|number|boolean} value The value of the Text.\n * @param {...(function((string|number|boolean)):string)} var_args\n *     Functions to format the value which are called only when the value has\n *     changed.\n * @return {!Text} The corresponding text node.\n */\nconst text = function(value, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('text');\n    assertNotInSkip('text');\n  }\n\n  const node = coreText();\n  const data = getData(node);\n\n  if (data.text !== value) {\n    data.text = /** @type {string} */(value);\n\n    let formatted = value;\n    for (let i = 1; i < arguments.length; i += 1) {\n      /*\n       * Call the formatter function directly to prevent leaking arguments.\n       * https://github.com/google/incremental-dom/pull/204#issuecomment-178223574\n       */\n      const fn = arguments[i];\n      formatted = fn(formatted);\n    }\n\n    node.data = formatted;\n  }\n\n  return node;\n};\n\n\n/** */\nexport {\n  elementOpenStart,\n  elementOpenEnd,\n  elementOpen,\n  elementVoid,\n  elementClose,\n  text,\n  attr\n};\n"],"names":["hasOwnProperty","Object","prototype","Blank","create","has","map","property","call","createMap","NodeData","nodeName","key","attrs","attrsArr","newAttrs","staticsApplied","keyMap","keyMapValid","focused","text","initData","node","data","getData","importNode","isElement","Element","localName","getAttribute","parentNode","attributes","i","length","attr","name","value","undefined","push","child","firstChild","nextSibling","getNamespaceForTag","tag","parent","namespaceURI","createElement","doc","namespace","el","createElementNS","createText","createTextNode","notifications","Context","created","nodesCreated","deleted","nodesDeleted","markCreated","markDeleted","notifyChanges","inAttributes","inSkip","assertInPatch","functionName","context","Error","assertNoUnclosedTags","openElement","root","currentElement","openTags","toLowerCase","join","assertNotInAttributes","assertNotInSkip","assertInAttributes","assertVirtualAttributesClosed","assertCloseMatchesOpenTag","assertNoChildrenDeclaredYet","previousNode","assertPatchElementNoExtras","startNode","currentNode","expectedNextNode","expectedPrevNode","wasUpdated","previousSibling","wasChanged","wasRemoved","setInAttributes","previous","setInSkip","isDocumentRoot","Document","DocumentFragment","getAncestry","ancestry","cur","getRoot","prev","getActiveElement","activeElement","getFocusedPath","contains","moveBefore","referenceNode","insertReferenceNode","next","insertBefore","currentParent","markFocused","focusPath","patchFactory","run","f","fn","prevContext","prevDoc","prevCurrentNode","prevCurrentParent","previousInAttributes","previousInSkip","ownerDocument","process","env","NODE_ENV","retVal","patchInner","patchOuter","matches","matchNode","alignWithDOM","parentData","currentNodeData","keyNode","replaceChild","removeChild","clearUnvisitedDOM","lastChild","enterNode","getNextNode","nextNode","exitNode","elementOpen","elementClose","currentPointer","skip","skipNode","symbols","getNamespace","lastIndexOf","applyAttr","removeAttribute","attrNS","setAttributeNS","setAttribute","applyProp","setStyleValue","style","prop","indexOf","setProperty","applyStyle","cssText","elStyle","obj","applyAttributeTyped","type","updateAttribute","mutator","default","ATTRIBUTES_OFFSET","argsBuilder","statics","var_args","coreElementOpen","isNew","j","arguments","elementOpenStart","elementOpenEnd","apply","coreElementClose","elementVoid","coreText","formatted"],"mappings":"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","sourceRoot":"/source/"}