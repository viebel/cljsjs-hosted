/**********************************************************************
 * Extern for tf
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var tf = {
  "AdadeltaOptimizer": {
    "className": {},
    "fromConfig": function () { }
  },
  "AdagradOptimizer": {
    "className": {},
    "fromConfig": function () { }
  },
  "AdamOptimizer": {
    "className": {},
    "fromConfig": function () { }
  },
  "AdamaxOptimizer": {
    "className": {},
    "fromConfig": function () { }
  },
  "Add": {},
  "AddN": {},
  "Atan2": {},
  "AvgPool": {},
  "AvgPool3D": {},
  "AvgPool3DBackprop": {},
  "AvgPoolBackprop": {},
  "BatchMatMul": {},
  "BatchToSpaceND": {},
  "BroadcastTo": {},
  "Callback": function () { },
  "CallbackList": function () { },
  "Complex": {},
  "Concat": {},
  "Conv2D": {},
  "Conv2DBackpropFilter": {},
  "Conv2DBackpropInput": {},
  "Conv3D": {},
  "Conv3DBackpropFilterV2": {},
  "Conv3DBackpropInputV2": {},
  "Cumsum": {},
  "CustomCallback": function () { },
  "DataStorage": function () { },
  "DepthToSpace": {},
  "DepthwiseConv2dNative": {},
  "DepthwiseConv2dNativeBackpropFilter": {},
  "DepthwiseConv2dNativeBackpropInput": {},
  "Diag": {},
  "Div": {},
  "ENV": {
    "evaluateFlag": function () { },
    "flagRegistry": {
      "DEBUG": {
        "evaluationFn": function () { },
        "setHook": function () { }
      },
      "DEPRECATION_WARNINGS_ENABLED": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "HAS_WEBGL": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "IS_BROWSER": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "IS_CHROME": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "IS_NODE": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "IS_TEST": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "PROD": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "TENSORLIKE_CHECK_SHAPE_CONSISTENCY": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_BUFFER_SUPPORTED": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_CONV_IM2COL": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_CPU_FORWARD": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_DOWNLOAD_FLOAT_ENABLED": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_FENCE_API_ENABLED": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_FORCE_F16_TEXTURES": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_LAZILY_UNPACK": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_MAX_TEXTURES_IN_SHADER": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_MAX_TEXTURE_SIZE": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_PACK": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_PACK_ARRAY_OPERATIONS": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_PACK_BINARY_OPERATIONS": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_PACK_CLIP": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_PACK_DEPTHWISECONV": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_PACK_IMAGE_OPERATIONS": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_PACK_NORMALIZATION": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_PACK_REDUCE": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_PACK_UNARY_OPERATIONS": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_RENDER_FLOAT32_CAPABLE": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_RENDER_FLOAT32_ENABLED": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_SIZE_UPLOAD_UNIFORM": {
        "evaluationFn": function () { },
        "setHook": {}
      },
      "WEBGL_VERSION": {
        "evaluationFn": function () { },
        "setHook": {}
      }
    },
    "flags": {
      "IS_BROWSER": {},
      "IS_NODE": {}
    },
    "get": function () { },
    "getAsync": function () { },
    "getBool": function () { },
    "getFlags": function () { },
    "getNumber": function () { },
    "global": {
      "PERSISTENT": {},
      "TEMPORARY": {},
      "_tfGlobals": {},
      "_tfengine": {
        "ENV": {},
        "addTapeNode": function () { },
        "backendNames": function () { },
        "checkKernelForMemLeak": function () { },
        "clone": function () { },
        "customGrad": function () { },
        "disposeRegisteredKernels": function () { },
        "disposeTensor": function () { },
        "disposeVariable": function () { },
        "disposeVariables": function () { },
        "endScope": function () { },
        "endTape": function () { },
        "findBackend": function () { },
        "findBackendFactory": function () { },
        "getSortedBackends": function () { },
        "getTensorsForGradient": function () { },
        "gradients": function () { },
        "incRef": function () { },
        "initializeBackend": function () { },
        "initializeBackendsAndReturnBest": function () { },
        "isTapeOn": function () { },
        "keep": function () { },
        "makeTensor": function () { },
        "makeTensorFromDataId": function () { },
        "makeVariable": function () { },
        "memory": function () { },
        "moveData": function () { },
        "nextTensorId": function () { },
        "nextVariableId": function () { },
        "pendingBackendInitId": {},
        "profile": function () { },
        "read": function () { },
        "readSync": function () { },
        "ready": function () { },
        "registerBackend": function () { },
        "registry": {},
        "registryFactory": {
          "cpu": {
            "factory": function () { },
            "priority": {}
          },
          "webgl": {
            "factory": function () { },
            "priority": {}
          }
        },
        "removeBackend": function () { },
        "reset": function () { },
        "runKernel": function () { },
        "runKernelFunc": function () { },
        "saveTensorsForBackwardMode": function () { },
        "scopedRun": function () { },
        "setBackend": function () { },
        "setupRegisteredKernels": function () { },
        "shouldCheckForMemLeaks": function () { },
        "startScope": function () { },
        "startTape": function () { },
        "state": {
          "activeProfile": {
            "kernels": {},
            "newBytes": {},
            "newTensors": {},
            "peakBytes": {},
            "result": {}
          },
          "dispose": function () { },
          "gradientDepth": {},
          "kernelDepth": {},
          "nextScopeId": {},
          "nextTapeNodeId": {},
          "numBytes": {},
          "numDataBuffers": {},
          "numDataMovesStack": {},
          "numStringTensors": {},
          "numTensors": {},
          "profiling": {},
          "registeredVariables": {},
          "scopeStack": {},
          "tensorInfo": {}
        },
        "tidy": function () { },
        "time": function () { },
        "track": function () { }
      },
      "addEventListener": function () { },
      "alert": function () { },
      "applicationCache": {
        "CHECKING": {},
        "DOWNLOADING": {},
        "IDLE": {},
        "OBSOLETE": {},
        "UNCACHED": {},
        "UPDATEREADY": {},
        "abort": function () { },
        "addEventListener": function () { },
        "dispatchEvent": function () { },
        "oncached": {},
        "onchecking": {},
        "ondownloading": {},
        "onerror": {},
        "onnoupdate": {},
        "onobsolete": {},
        "onprogress": {},
        "onupdateready": {},
        "removeEventListener": function () { },
        "status": {},
        "swapCache": function () { },
        "update": function () { }
      },
      "atob": function () { },
      "blur": function () { },
      "btoa": function () { },
      "caches": {
        "delete": function () { },
        "has": function () { },
        "keys": function () { },
        "match": function () { },
        "open": function () { }
      },
      "cancelAnimationFrame": function () { },
      "cancelIdleCallback": function () { },
      "captureEvents": function () { },
      "chrome": {
        "app": {
          "InstallState": {
            "DISABLED": {},
            "INSTALLED": {},
            "NOT_INSTALLED": {}
          },
          "RunningState": {
            "CANNOT_RUN": {},
            "READY_TO_RUN": {},
            "RUNNING": {}
          },
          "getDetails": function () { },
          "getIsInstalled": function () { },
          "installState": function () { },
          "isInstalled": {},
          "runningState": function () { }
        },
        "csi": function () { },
        "loadTimes": function () { }
      },
      "clearImmediate": function () { },
      "clearInterval": function () { },
      "clearTimeout": function () { },
      "clientInformation": {
        "appCodeName": {},
        "appName": {},
        "appVersion": {},
        "bluetooth": {
          "addEventListener": function () { },
          "dispatchEvent": function () { },
          "getAvailability": function () { },
          "removeEventListener": function () { },
          "requestDevice": function () { }
        },
        "clearAppBadge": function () { },
        "clipboard": {
          "addEventListener": function () { },
          "dispatchEvent": function () { },
          "read": function () { },
          "readText": function () { },
          "removeEventListener": function () { },
          "write": function () { },
          "writeText": function () { }
        },
        "connection": {
          "addEventListener": function () { },
          "dispatchEvent": function () { },
          "downlink": {},
          "effectiveType": {},
          "onchange": {},
          "removeEventListener": function () { },
          "rtt": {},
          "saveData": {}
        },
        "cookieEnabled": {},
        "credentials": {
          "create": function () { },
          "get": function () { },
          "preventSilentAccess": function () { },
          "store": function () { }
        },
        "deviceMemory": {},
        "doNotTrack": {},
        "geolocation": {
          "clearWatch": function () { },
          "getCurrentPosition": function () { },
          "watchPosition": function () { }
        },
        "getBattery": function () { },
        "getGamepads": function () { },
        "getInstalledRelatedApps": function () { },
        "getUserMedia": function () { },
        "hardwareConcurrency": {},
        "javaEnabled": function () { },
        "keyboard": {
          "getLayoutMap": function () { },
          "lock": function () { },
          "unlock": function () { }
        },
        "language": {},
        "languages": {},
        "locks": {
          "query": function () { },
          "request": function () { }
        },
        "maxTouchPoints": {},
        "mediaCapabilities": {
          "decodingInfo": function () { }
        },
        "mediaDevices": {
          "addEventListener": function () { },
          "dispatchEvent": function () { },
          "enumerateDevices": function () { },
          "getDisplayMedia": function () { },
          "getSupportedConstraints": function () { },
          "getUserMedia": function () { },
          "ondevicechange": {},
          "removeEventListener": function () { }
        },
        "mediaSession": {
          "metadata": {},
          "playbackState": {},
          "setActionHandler": function () { },
          "setPositionState": function () { }
        },
        "mimeTypes": {
          "0": {
            "description": {},
            "enabledPlugin": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "suffixes": {},
            "type": {}
          },
          "1": {
            "description": {},
            "enabledPlugin": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "suffixes": {},
            "type": {}
          },
          "2": {
            "description": {},
            "enabledPlugin": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "1": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "suffixes": {},
            "type": {}
          },
          "3": {
            "description": {},
            "enabledPlugin": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "1": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "suffixes": {},
            "type": {}
          },
          "item": function () { },
          "length": {},
          "namedItem": function () { }
        },
        "onLine": {},
        "permissions": {
          "query": function () { }
        },
        "platform": {},
        "plugins": {
          "0": {
            "0": {
              "description": {},
              "enabledPlugin": {},
              "suffixes": {},
              "type": {}
            },
            "description": {},
            "filename": {},
            "item": function () { },
            "length": {},
            "name": {},
            "namedItem": function () { }
          },
          "1": {
            "0": {
              "description": {},
              "enabledPlugin": {},
              "suffixes": {},
              "type": {}
            },
            "description": {},
            "filename": {},
            "item": function () { },
            "length": {},
            "name": {},
            "namedItem": function () { }
          },
          "2": {
            "0": {
              "description": {},
              "enabledPlugin": {},
              "suffixes": {},
              "type": {}
            },
            "1": {
              "description": {},
              "enabledPlugin": {},
              "suffixes": {},
              "type": {}
            },
            "description": {},
            "filename": {},
            "item": function () { },
            "length": {},
            "name": {},
            "namedItem": function () { }
          },
          "item": function () { },
          "length": {},
          "namedItem": function () { },
          "refresh": function () { }
        },
        "presentation": {
          "defaultRequest": {},
          "receiver": {}
        },
        "product": {},
        "productSub": {},
        "registerProtocolHandler": function () { },
        "requestMIDIAccess": function () { },
        "requestMediaKeySystemAccess": function () { },
        "sendBeacon": function () { },
        "serviceWorker": {
          "addEventListener": function () { },
          "controller": {},
          "dispatchEvent": function () { },
          "getRegistration": function () { },
          "getRegistrations": function () { },
          "oncontrollerchange": {},
          "onmessage": {},
          "onmessageerror": {},
          "ready": {},
          "register": function () { },
          "removeEventListener": function () { },
          "startMessages": function () { }
        },
        "setAppBadge": function () { },
        "storage": {
          "estimate": function () { },
          "persist": function () { },
          "persisted": function () { }
        },
        "unregisterProtocolHandler": function () { },
        "usb": {
          "addEventListener": function () { },
          "dispatchEvent": function () { },
          "getDevices": function () { },
          "onconnect": {},
          "ondisconnect": {},
          "removeEventListener": function () { },
          "requestDevice": function () { }
        },
        "userActivation": {
          "hasBeenActive": {},
          "isActive": {}
        },
        "userAgent": {},
        "vendor": {},
        "vendorSub": {},
        "vibrate": function () { },
        "webkitGetUserMedia": function () { },
        "webkitPersistentStorage": {
          "queryUsageAndQuota": function () { },
          "requestQuota": function () { }
        },
        "webkitTemporaryStorage": {
          "queryUsageAndQuota": function () { },
          "requestQuota": function () { }
        },
        "xr": {
          "addEventListener": function () { },
          "dispatchEvent": function () { },
          "isSessionSupported": function () { },
          "ondevicechange": {},
          "removeEventListener": function () { },
          "requestSession": function () { },
          "supportsSession": function () { }
        }
      },
      "close": function () { },
      "closed": {},
      "confirm": function () { },
      "createImageBitmap": function () { },
      "crypto": {
        "getRandomValues": function () { },
        "subtle": {
          "decrypt": function () { },
          "deriveBits": function () { },
          "deriveKey": function () { },
          "digest": function () { },
          "encrypt": function () { },
          "exportKey": function () { },
          "generateKey": function () { },
          "importKey": function () { },
          "sign": function () { },
          "unwrapKey": function () { },
          "verify": function () { },
          "wrapKey": function () { }
        }
      },
      "customElements": {
        "define": function () { },
        "get": function () { },
        "upgrade": function () { },
        "whenDefined": function () { }
      },
      "defaultStatus": {},
      "defaultstatus": {},
      "devicePixelRatio": {},
      "dispatchEvent": function () { },
      "document": {},
      "external": {
        "AddSearchProvider": function () { },
        "IsSearchProviderInstalled": function () { }
      },
      "fetch": function () { },
      "find": function () { },
      "focus": function () { },
      "frameElement": {},
      "frames": {},
      "getComputedStyle": function () { },
      "getSelection": function () { },
      "history": {
        "back": function () { },
        "forward": function () { },
        "go": function () { },
        "length": {},
        "pushState": function () { },
        "replaceState": function () { },
        "scrollRestoration": {},
        "state": {}
      },
      "indexedDB": {
        "cmp": function () { },
        "databases": function () { },
        "deleteDatabase": function () { },
        "open": function () { }
      },
      "innerHeight": {},
      "innerWidth": {},
      "isSecureContext": {},
      "length": {},
      "localStorage": {
        "clear": function () { },
        "getItem": function () { },
        "key": function () { },
        "length": {},
        "removeItem": function () { },
        "setItem": function () { }
      },
      "location": {
        "ancestorOrigins": {
          "0": {},
          "contains": function () { },
          "item": function () { },
          "length": {}
        },
        "assign": function () { },
        "fragmentDirective": {},
        "hash": {},
        "host": {},
        "hostname": {},
        "href": {},
        "origin": {},
        "pathname": {},
        "port": {},
        "protocol": {},
        "reload": function () { },
        "replace": function () { },
        "search": {},
        "toString": function () { }
      },
      "locationbar": {
        "visible": {}
      },
      "matchMedia": function () { },
      "menubar": {
        "visible": {}
      },
      "moveBy": function () { },
      "moveTo": function () { },
      "name": {},
      "navigator": {
        "appCodeName": {},
        "appName": {},
        "appVersion": {},
        "bluetooth": {
          "addEventListener": function () { },
          "dispatchEvent": function () { },
          "getAvailability": function () { },
          "removeEventListener": function () { },
          "requestDevice": function () { }
        },
        "clearAppBadge": function () { },
        "clipboard": {
          "addEventListener": function () { },
          "dispatchEvent": function () { },
          "read": function () { },
          "readText": function () { },
          "removeEventListener": function () { },
          "write": function () { },
          "writeText": function () { }
        },
        "connection": {
          "addEventListener": function () { },
          "dispatchEvent": function () { },
          "downlink": {},
          "effectiveType": {},
          "onchange": {},
          "removeEventListener": function () { },
          "rtt": {},
          "saveData": {}
        },
        "cookieEnabled": {},
        "credentials": {
          "create": function () { },
          "get": function () { },
          "preventSilentAccess": function () { },
          "store": function () { }
        },
        "deviceMemory": {},
        "doNotTrack": {},
        "geolocation": {
          "clearWatch": function () { },
          "getCurrentPosition": function () { },
          "watchPosition": function () { }
        },
        "getBattery": function () { },
        "getGamepads": function () { },
        "getInstalledRelatedApps": function () { },
        "getUserMedia": function () { },
        "hardwareConcurrency": {},
        "javaEnabled": function () { },
        "keyboard": {
          "getLayoutMap": function () { },
          "lock": function () { },
          "unlock": function () { }
        },
        "language": {},
        "languages": {},
        "locks": {
          "query": function () { },
          "request": function () { }
        },
        "maxTouchPoints": {},
        "mediaCapabilities": {
          "decodingInfo": function () { }
        },
        "mediaDevices": {
          "addEventListener": function () { },
          "dispatchEvent": function () { },
          "enumerateDevices": function () { },
          "getDisplayMedia": function () { },
          "getSupportedConstraints": function () { },
          "getUserMedia": function () { },
          "ondevicechange": {},
          "removeEventListener": function () { }
        },
        "mediaSession": {
          "metadata": {},
          "playbackState": {},
          "setActionHandler": function () { },
          "setPositionState": function () { }
        },
        "mimeTypes": {
          "0": {
            "description": {},
            "enabledPlugin": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "suffixes": {},
            "type": {}
          },
          "1": {
            "description": {},
            "enabledPlugin": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "suffixes": {},
            "type": {}
          },
          "2": {
            "description": {},
            "enabledPlugin": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "1": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "suffixes": {},
            "type": {}
          },
          "3": {
            "description": {},
            "enabledPlugin": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "1": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "suffixes": {},
            "type": {}
          },
          "item": function () { },
          "length": {},
          "namedItem": function () { }
        },
        "onLine": {},
        "permissions": {
          "query": function () { }
        },
        "platform": {},
        "plugins": {
          "0": {
            "0": {
              "description": {},
              "enabledPlugin": {},
              "suffixes": {},
              "type": {}
            },
            "description": {},
            "filename": {},
            "item": function () { },
            "length": {},
            "name": {},
            "namedItem": function () { }
          },
          "1": {
            "0": {
              "description": {},
              "enabledPlugin": {},
              "suffixes": {},
              "type": {}
            },
            "description": {},
            "filename": {},
            "item": function () { },
            "length": {},
            "name": {},
            "namedItem": function () { }
          },
          "2": {
            "0": {
              "description": {},
              "enabledPlugin": {},
              "suffixes": {},
              "type": {}
            },
            "1": {
              "description": {},
              "enabledPlugin": {},
              "suffixes": {},
              "type": {}
            },
            "description": {},
            "filename": {},
            "item": function () { },
            "length": {},
            "name": {},
            "namedItem": function () { }
          },
          "item": function () { },
          "length": {},
          "namedItem": function () { },
          "refresh": function () { }
        },
        "presentation": {
          "defaultRequest": {},
          "receiver": {}
        },
        "product": {},
        "productSub": {},
        "registerProtocolHandler": function () { },
        "requestMIDIAccess": function () { },
        "requestMediaKeySystemAccess": function () { },
        "sendBeacon": function () { },
        "serviceWorker": {
          "addEventListener": function () { },
          "controller": {},
          "dispatchEvent": function () { },
          "getRegistration": function () { },
          "getRegistrations": function () { },
          "oncontrollerchange": {},
          "onmessage": {},
          "onmessageerror": {},
          "ready": {},
          "register": function () { },
          "removeEventListener": function () { },
          "startMessages": function () { }
        },
        "setAppBadge": function () { },
        "storage": {
          "estimate": function () { },
          "persist": function () { },
          "persisted": function () { }
        },
        "unregisterProtocolHandler": function () { },
        "usb": {
          "addEventListener": function () { },
          "dispatchEvent": function () { },
          "getDevices": function () { },
          "onconnect": {},
          "ondisconnect": {},
          "removeEventListener": function () { },
          "requestDevice": function () { }
        },
        "userActivation": {
          "hasBeenActive": {},
          "isActive": {}
        },
        "userAgent": {},
        "vendor": {},
        "vendorSub": {},
        "vibrate": function () { },
        "webkitGetUserMedia": function () { },
        "webkitPersistentStorage": {
          "queryUsageAndQuota": function () { },
          "requestQuota": function () { }
        },
        "webkitTemporaryStorage": {
          "queryUsageAndQuota": function () { },
          "requestQuota": function () { }
        },
        "xr": {
          "addEventListener": function () { },
          "dispatchEvent": function () { },
          "isSessionSupported": function () { },
          "ondevicechange": {},
          "removeEventListener": function () { },
          "requestSession": function () { },
          "supportsSession": function () { }
        }
      },
      "onabort": {},
      "onafterprint": {},
      "onanimationend": {},
      "onanimationiteration": {},
      "onanimationstart": {},
      "onappinstalled": {},
      "onauxclick": {},
      "onbeforeinstallprompt": {},
      "onbeforeprint": {},
      "onbeforeunload": {},
      "onblur": {},
      "oncancel": {},
      "oncanplay": {},
      "oncanplaythrough": {},
      "onchange": {},
      "onclick": {},
      "onclose": {},
      "oncontextmenu": {},
      "oncuechange": {},
      "ondblclick": {},
      "ondevicemotion": {},
      "ondeviceorientation": {},
      "ondeviceorientationabsolute": {},
      "ondrag": {},
      "ondragend": {},
      "ondragenter": {},
      "ondragleave": {},
      "ondragover": {},
      "ondragstart": {},
      "ondrop": {},
      "ondurationchange": {},
      "onemptied": {},
      "onended": {},
      "onerror": {},
      "onfocus": {},
      "onformdata": {},
      "ongotpointercapture": {},
      "onhashchange": {},
      "oninput": {},
      "oninvalid": {},
      "onkeydown": {},
      "onkeypress": {},
      "onkeyup": {},
      "onlanguagechange": {},
      "onload": {},
      "onloadeddata": {},
      "onloadedmetadata": {},
      "onloadstart": {},
      "onlostpointercapture": {},
      "onmessage": {},
      "onmessageerror": {},
      "onmousedown": {},
      "onmouseenter": {},
      "onmouseleave": {},
      "onmousemove": {},
      "onmouseout": {},
      "onmouseover": {},
      "onmouseup": {},
      "onmousewheel": {},
      "onoffline": {},
      "ononline": {},
      "onpagehide": {},
      "onpageshow": {},
      "onpause": {},
      "onplay": {},
      "onplaying": {},
      "onpointercancel": {},
      "onpointerdown": {},
      "onpointerenter": {},
      "onpointerleave": {},
      "onpointermove": {},
      "onpointerout": {},
      "onpointerover": {},
      "onpointerrawupdate": {},
      "onpointerup": {},
      "onpopstate": {},
      "onprogress": {},
      "onratechange": {},
      "onrejectionhandled": {},
      "onreset": {},
      "onresize": {},
      "onscroll": {},
      "onsearch": {},
      "onseeked": {},
      "onseeking": {},
      "onselect": {},
      "onselectionchange": {},
      "onselectstart": {},
      "onstalled": {},
      "onstorage": {},
      "onsubmit": {},
      "onsuspend": {},
      "ontimeupdate": {},
      "ontoggle": {},
      "ontransitionend": {},
      "onunhandledrejection": {},
      "onunload": {},
      "onvolumechange": {},
      "onwaiting": {},
      "onwebkitanimationend": {},
      "onwebkitanimationiteration": {},
      "onwebkitanimationstart": {},
      "onwebkittransitionend": {},
      "onwheel": {},
      "open": function () { },
      "openDatabase": function () { },
      "opener": {},
      "origin": {},
      "outerHeight": {},
      "outerWidth": {},
      "pageXOffset": {},
      "pageYOffset": {},
      "parent": {
        "PERSISTENT": {},
        "React": {
          "Children": {
            "count": function () { },
            "forEach": function () { },
            "map": function () { },
            "only": function () { },
            "toArray": function () { }
          },
          "Component": function () { },
          "DOM": {
            "a": {
              "type": {}
            },
            "abbr": {
              "type": {}
            },
            "address": {
              "type": {}
            },
            "area": {
              "type": {}
            },
            "article": {
              "type": {}
            },
            "aside": {
              "type": {}
            },
            "audio": {
              "type": {}
            },
            "b": {
              "type": {}
            },
            "base": {
              "type": {}
            },
            "bdi": {
              "type": {}
            },
            "bdo": {
              "type": {}
            },
            "big": {
              "type": {}
            },
            "blockquote": {
              "type": {}
            },
            "body": {
              "type": {}
            },
            "br": {
              "type": {}
            },
            "button": {
              "type": {}
            },
            "canvas": {
              "type": {}
            },
            "caption": {
              "type": {}
            },
            "circle": {
              "type": {}
            },
            "cite": {
              "type": {}
            },
            "clipPath": {
              "type": {}
            },
            "code": {
              "type": {}
            },
            "col": {
              "type": {}
            },
            "colgroup": {
              "type": {}
            },
            "data": {
              "type": {}
            },
            "datalist": {
              "type": {}
            },
            "dd": {
              "type": {}
            },
            "defs": {
              "type": {}
            },
            "del": {
              "type": {}
            },
            "details": {
              "type": {}
            },
            "dfn": {
              "type": {}
            },
            "dialog": {
              "type": {}
            },
            "div": {
              "type": {}
            },
            "dl": {
              "type": {}
            },
            "dt": {
              "type": {}
            },
            "ellipse": {
              "type": {}
            },
            "em": {
              "type": {}
            },
            "embed": {
              "type": {}
            },
            "fieldset": {
              "type": {}
            },
            "figcaption": {
              "type": {}
            },
            "figure": {
              "type": {}
            },
            "footer": {
              "type": {}
            },
            "form": {
              "type": {}
            },
            "g": {
              "type": {}
            },
            "h1": {
              "type": {}
            },
            "h2": {
              "type": {}
            },
            "h3": {
              "type": {}
            },
            "h4": {
              "type": {}
            },
            "h5": {
              "type": {}
            },
            "h6": {
              "type": {}
            },
            "head": {
              "type": {}
            },
            "header": {
              "type": {}
            },
            "hgroup": {
              "type": {}
            },
            "hr": {
              "type": {}
            },
            "html": {
              "type": {}
            },
            "i": {
              "type": {}
            },
            "iframe": {
              "type": {}
            },
            "image": {
              "type": {}
            },
            "img": {
              "type": {}
            },
            "input": {
              "type": {}
            },
            "ins": {
              "type": {}
            },
            "kbd": {
              "type": {}
            },
            "keygen": {
              "type": {}
            },
            "label": {
              "type": {}
            },
            "legend": {
              "type": {}
            },
            "li": {
              "type": {}
            },
            "line": {
              "type": {}
            },
            "linearGradient": {
              "type": {}
            },
            "link": {
              "type": {}
            },
            "main": {
              "type": {}
            },
            "map": {
              "type": {}
            },
            "mark": {
              "type": {}
            },
            "mask": {
              "type": {}
            },
            "menu": {
              "type": {}
            },
            "menuitem": {
              "type": {}
            },
            "meta": {
              "type": {}
            },
            "meter": {
              "type": {}
            },
            "nav": {
              "type": {}
            },
            "noscript": {
              "type": {}
            },
            "object": {
              "type": {}
            },
            "ol": {
              "type": {}
            },
            "optgroup": {
              "type": {}
            },
            "option": {
              "type": {}
            },
            "output": {
              "type": {}
            },
            "p": {
              "type": {}
            },
            "param": {
              "type": {}
            },
            "path": {
              "type": {}
            },
            "pattern": {
              "type": {}
            },
            "picture": {
              "type": {}
            },
            "polygon": {
              "type": {}
            },
            "polyline": {
              "type": {}
            },
            "pre": {
              "type": {}
            },
            "progress": {
              "type": {}
            },
            "q": {
              "type": {}
            },
            "radialGradient": {
              "type": {}
            },
            "rect": {
              "type": {}
            },
            "rp": {
              "type": {}
            },
            "rt": {
              "type": {}
            },
            "ruby": {
              "type": {}
            },
            "s": {
              "type": {}
            },
            "samp": {
              "type": {}
            },
            "script": {
              "type": {}
            },
            "section": {
              "type": {}
            },
            "select": {
              "type": {}
            },
            "small": {
              "type": {}
            },
            "source": {
              "type": {}
            },
            "span": {
              "type": {}
            },
            "stop": {
              "type": {}
            },
            "strong": {
              "type": {}
            },
            "style": {
              "type": {}
            },
            "sub": {
              "type": {}
            },
            "summary": {
              "type": {}
            },
            "sup": {
              "type": {}
            },
            "svg": {
              "type": {}
            },
            "table": {
              "type": {}
            },
            "tbody": {
              "type": {}
            },
            "td": {
              "type": {}
            },
            "text": {
              "type": {}
            },
            "textarea": {
              "type": {}
            },
            "tfoot": {
              "type": {}
            },
            "th": {
              "type": {}
            },
            "thead": {
              "type": {}
            },
            "time": {
              "type": {}
            },
            "title": {
              "type": {}
            },
            "tr": {
              "type": {}
            },
            "track": {
              "type": {}
            },
            "tspan": {
              "type": {}
            },
            "u": {
              "type": {}
            },
            "ul": {
              "type": {}
            },
            "var": {
              "type": {}
            },
            "video": {
              "type": {}
            },
            "wbr": {
              "type": {}
            }
          },
          "PropTypes": {
            "PropTypes": {},
            "any": {
              "isRequired": function () { }
            },
            "array": {
              "isRequired": function () { }
            },
            "arrayOf": function () { },
            "bool": {
              "isRequired": function () { }
            },
            "checkPropTypes": function () { },
            "element": {
              "isRequired": function () { }
            },
            "func": {
              "isRequired": function () { }
            },
            "instanceOf": function () { },
            "node": {
              "isRequired": function () { }
            },
            "number": {
              "isRequired": function () { }
            },
            "object": {
              "isRequired": function () { }
            },
            "objectOf": function () { },
            "oneOf": function () { },
            "oneOfType": function () { },
            "shape": function () { },
            "string": {
              "isRequired": function () { }
            },
            "symbol": {
              "isRequired": function () { }
            }
          },
          "PureComponent": function () { },
          "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": {
            "ReactCurrentOwner": {
              "current": {}
            }
          },
          "__spread": function () { },
          "cloneElement": function () { },
          "createClass": function () { },
          "createElement": function () { },
          "createFactory": function () { },
          "createMixin": function () { },
          "isValidElement": function () { },
          "version": {}
        },
        "ReactDOM": {
          "findDOMNode": function () { },
          "render": function () { },
          "unmountComponentAtNode": function () { },
          "unstable_batchedUpdates": function () { },
          "unstable_renderSubtreeIntoContainer": function () { },
          "version": {}
        },
        "TEMPORARY": {},
        "addEventListener": function () { },
        "alert": function () { },
        "applicationCache": {
          "CHECKING": {},
          "DOWNLOADING": {},
          "IDLE": {},
          "OBSOLETE": {},
          "UNCACHED": {},
          "UPDATEREADY": {},
          "abort": function () { },
          "addEventListener": function () { },
          "dispatchEvent": function () { },
          "oncached": {},
          "onchecking": {},
          "ondownloading": {},
          "onerror": {},
          "onnoupdate": {},
          "onobsolete": {},
          "onprogress": {},
          "onupdateready": {},
          "removeEventListener": function () { },
          "status": {},
          "swapCache": function () { },
          "update": function () { }
        },
        "atob": function () { },
        "blur": function () { },
        "btoa": function () { },
        "caches": {
          "delete": function () { },
          "has": function () { },
          "keys": function () { },
          "match": function () { },
          "open": function () { }
        },
        "cancelAnimationFrame": function () { },
        "cancelIdleCallback": function () { },
        "captureEvents": function () { },
        "chrome": {
          "app": {
            "InstallState": {
              "DISABLED": {},
              "INSTALLED": {},
              "NOT_INSTALLED": {}
            },
            "RunningState": {
              "CANNOT_RUN": {},
              "READY_TO_RUN": {},
              "RUNNING": {}
            },
            "getDetails": function () { },
            "getIsInstalled": function () { },
            "installState": function () { },
            "isInstalled": {},
            "runningState": function () { }
          },
          "csi": function () { },
          "loadTimes": function () { },
          "runtime": {
            "OnInstalledReason": {
              "CHROME_UPDATE": {},
              "INSTALL": {},
              "SHARED_MODULE_UPDATE": {},
              "UPDATE": {}
            },
            "OnRestartRequiredReason": {
              "APP_UPDATE": {},
              "OS_UPDATE": {},
              "PERIODIC": {}
            },
            "PlatformArch": {
              "ARM": {},
              "ARM64": {},
              "MIPS": {},
              "MIPS64": {},
              "X86_32": {},
              "X86_64": {}
            },
            "PlatformNaclArch": {
              "ARM": {},
              "MIPS": {},
              "MIPS64": {},
              "X86_32": {},
              "X86_64": {}
            },
            "PlatformOs": {
              "ANDROID": {},
              "CROS": {},
              "LINUX": {},
              "MAC": {},
              "OPENBSD": {},
              "WIN": {}
            },
            "RequestUpdateCheckStatus": {
              "NO_UPDATE": {},
              "THROTTLED": {},
              "UPDATE_AVAILABLE": {}
            },
            "connect": function () { },
            "id": {},
            "sendMessage": function () { }
          }
        },
        "clearInterval": function () { },
        "clearTimeout": function () { },
        "clientInformation": {
          "appCodeName": {},
          "appName": {},
          "appVersion": {},
          "bluetooth": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "getAvailability": function () { },
            "removeEventListener": function () { },
            "requestDevice": function () { }
          },
          "clearAppBadge": function () { },
          "clipboard": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "read": function () { },
            "readText": function () { },
            "removeEventListener": function () { },
            "write": function () { },
            "writeText": function () { }
          },
          "connection": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "downlink": {},
            "effectiveType": {},
            "onchange": {},
            "removeEventListener": function () { },
            "rtt": {},
            "saveData": {}
          },
          "cookieEnabled": {},
          "credentials": {
            "create": function () { },
            "get": function () { },
            "preventSilentAccess": function () { },
            "store": function () { }
          },
          "deviceMemory": {},
          "doNotTrack": {},
          "geolocation": {
            "clearWatch": function () { },
            "getCurrentPosition": function () { },
            "watchPosition": function () { }
          },
          "getBattery": function () { },
          "getGamepads": function () { },
          "getInstalledRelatedApps": function () { },
          "getUserMedia": function () { },
          "hardwareConcurrency": {},
          "javaEnabled": function () { },
          "keyboard": {
            "getLayoutMap": function () { },
            "lock": function () { },
            "unlock": function () { }
          },
          "language": {},
          "languages": {},
          "locks": {
            "query": function () { },
            "request": function () { }
          },
          "maxTouchPoints": {},
          "mediaCapabilities": {
            "decodingInfo": function () { }
          },
          "mediaDevices": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "enumerateDevices": function () { },
            "getDisplayMedia": function () { },
            "getSupportedConstraints": function () { },
            "getUserMedia": function () { },
            "ondevicechange": {},
            "removeEventListener": function () { }
          },
          "mediaSession": {
            "metadata": {},
            "playbackState": {},
            "setActionHandler": function () { },
            "setPositionState": function () { }
          },
          "mimeTypes": {
            "0": {
              "description": {},
              "enabledPlugin": {
                "0": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "description": {},
                "filename": {},
                "item": function () { },
                "length": {},
                "name": {},
                "namedItem": function () { }
              },
              "suffixes": {},
              "type": {}
            },
            "1": {
              "description": {},
              "enabledPlugin": {
                "0": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "description": {},
                "filename": {},
                "item": function () { },
                "length": {},
                "name": {},
                "namedItem": function () { }
              },
              "suffixes": {},
              "type": {}
            },
            "2": {
              "description": {},
              "enabledPlugin": {
                "0": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "1": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "description": {},
                "filename": {},
                "item": function () { },
                "length": {},
                "name": {},
                "namedItem": function () { }
              },
              "suffixes": {},
              "type": {}
            },
            "3": {
              "description": {},
              "enabledPlugin": {
                "0": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "1": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "description": {},
                "filename": {},
                "item": function () { },
                "length": {},
                "name": {},
                "namedItem": function () { }
              },
              "suffixes": {},
              "type": {}
            },
            "item": function () { },
            "length": {},
            "namedItem": function () { }
          },
          "onLine": {},
          "permissions": {
            "query": function () { }
          },
          "platform": {},
          "plugins": {
            "0": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "1": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "2": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "1": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "item": function () { },
            "length": {},
            "namedItem": function () { },
            "refresh": function () { }
          },
          "presentation": {
            "defaultRequest": {},
            "receiver": {}
          },
          "product": {},
          "productSub": {},
          "registerProtocolHandler": function () { },
          "requestMIDIAccess": function () { },
          "requestMediaKeySystemAccess": function () { },
          "sendBeacon": function () { },
          "serviceWorker": {
            "addEventListener": function () { },
            "controller": {},
            "dispatchEvent": function () { },
            "getRegistration": function () { },
            "getRegistrations": function () { },
            "oncontrollerchange": {},
            "onmessage": {},
            "onmessageerror": {},
            "ready": {},
            "register": function () { },
            "removeEventListener": function () { },
            "startMessages": function () { }
          },
          "setAppBadge": function () { },
          "storage": {
            "estimate": function () { },
            "persist": function () { },
            "persisted": function () { }
          },
          "unregisterProtocolHandler": function () { },
          "usb": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "getDevices": function () { },
            "onconnect": {},
            "ondisconnect": {},
            "removeEventListener": function () { },
            "requestDevice": function () { }
          },
          "userActivation": {
            "hasBeenActive": {},
            "isActive": {}
          },
          "userAgent": {},
          "vendor": {},
          "vendorSub": {},
          "vibrate": function () { },
          "webkitGetUserMedia": function () { },
          "webkitPersistentStorage": {
            "queryUsageAndQuota": function () { },
            "requestQuota": function () { }
          },
          "webkitTemporaryStorage": {
            "queryUsageAndQuota": function () { },
            "requestQuota": function () { }
          },
          "xr": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "isSessionSupported": function () { },
            "ondevicechange": {},
            "removeEventListener": function () { },
            "requestSession": function () { },
            "supportsSession": function () { }
          }
        },
        "close": function () { },
        "closed": {},
        "confirm": function () { },
        "createImageBitmap": function () { },
        "createReactClass": function () { },
        "crypto": {
          "getRandomValues": function () { },
          "subtle": {
            "decrypt": function () { },
            "deriveBits": function () { },
            "deriveKey": function () { },
            "digest": function () { },
            "encrypt": function () { },
            "exportKey": function () { },
            "generateKey": function () { },
            "importKey": function () { },
            "sign": function () { },
            "unwrapKey": function () { },
            "verify": function () { },
            "wrapKey": function () { }
          }
        },
        "customElements": {
          "define": function () { },
          "get": function () { },
          "upgrade": function () { },
          "whenDefined": function () { }
        },
        "defaultStatus": {},
        "defaultstatus": {},
        "devicePixelRatio": {},
        "dispatchEvent": function () { },
        "document": {},
        "external": {
          "AddSearchProvider": function () { },
          "IsSearchProviderInstalled": function () { }
        },
        "fetch": function () { },
        "find": function () { },
        "focus": function () { },
        "frameElement": {},
        "frames": {},
        "getComputedStyle": function () { },
        "getSelection": function () { },
        "history": {
          "back": function () { },
          "forward": function () { },
          "go": function () { },
          "length": {},
          "pushState": function () { },
          "replaceState": function () { },
          "scrollRestoration": {},
          "state": {}
        },
        "indexedDB": {
          "cmp": function () { },
          "databases": function () { },
          "deleteDatabase": function () { },
          "open": function () { }
        },
        "innerHeight": {},
        "innerWidth": {},
        "isSecureContext": {},
        "javascript_externs_generator": {
          "ui": {
            "core": {
              "init": function () { },
              "re_render": function () { }
            }
          }
        },
        "js_beautify": function () { },
        "length": {},
        "localStorage": {
          "clear": function () { },
          "getItem": function () { },
          "key": function () { },
          "length": {},
          "removeItem": function () { },
          "setItem": function () { }
        },
        "location": {
          "ancestorOrigins": {
            "contains": function () { },
            "item": function () { },
            "length": {}
          },
          "assign": function () { },
          "fragmentDirective": {},
          "hash": {},
          "host": {},
          "hostname": {},
          "href": {},
          "origin": {},
          "pathname": {},
          "port": {},
          "protocol": {},
          "reload": function () { },
          "replace": function () { },
          "search": {},
          "toString": function () { }
        },
        "locationbar": {
          "visible": {}
        },
        "matchMedia": function () { },
        "menubar": {
          "visible": {}
        },
        "moveBy": function () { },
        "moveTo": function () { },
        "name": {},
        "navigator": {
          "appCodeName": {},
          "appName": {},
          "appVersion": {},
          "bluetooth": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "getAvailability": function () { },
            "removeEventListener": function () { },
            "requestDevice": function () { }
          },
          "clearAppBadge": function () { },
          "clipboard": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "read": function () { },
            "readText": function () { },
            "removeEventListener": function () { },
            "write": function () { },
            "writeText": function () { }
          },
          "connection": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "downlink": {},
            "effectiveType": {},
            "onchange": {},
            "removeEventListener": function () { },
            "rtt": {},
            "saveData": {}
          },
          "cookieEnabled": {},
          "credentials": {
            "create": function () { },
            "get": function () { },
            "preventSilentAccess": function () { },
            "store": function () { }
          },
          "deviceMemory": {},
          "doNotTrack": {},
          "geolocation": {
            "clearWatch": function () { },
            "getCurrentPosition": function () { },
            "watchPosition": function () { }
          },
          "getBattery": function () { },
          "getGamepads": function () { },
          "getInstalledRelatedApps": function () { },
          "getUserMedia": function () { },
          "hardwareConcurrency": {},
          "javaEnabled": function () { },
          "keyboard": {
            "getLayoutMap": function () { },
            "lock": function () { },
            "unlock": function () { }
          },
          "language": {},
          "languages": {},
          "locks": {
            "query": function () { },
            "request": function () { }
          },
          "maxTouchPoints": {},
          "mediaCapabilities": {
            "decodingInfo": function () { }
          },
          "mediaDevices": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "enumerateDevices": function () { },
            "getDisplayMedia": function () { },
            "getSupportedConstraints": function () { },
            "getUserMedia": function () { },
            "ondevicechange": {},
            "removeEventListener": function () { }
          },
          "mediaSession": {
            "metadata": {},
            "playbackState": {},
            "setActionHandler": function () { },
            "setPositionState": function () { }
          },
          "mimeTypes": {
            "0": {
              "description": {},
              "enabledPlugin": {
                "0": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "description": {},
                "filename": {},
                "item": function () { },
                "length": {},
                "name": {},
                "namedItem": function () { }
              },
              "suffixes": {},
              "type": {}
            },
            "1": {
              "description": {},
              "enabledPlugin": {
                "0": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "description": {},
                "filename": {},
                "item": function () { },
                "length": {},
                "name": {},
                "namedItem": function () { }
              },
              "suffixes": {},
              "type": {}
            },
            "2": {
              "description": {},
              "enabledPlugin": {
                "0": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "1": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "description": {},
                "filename": {},
                "item": function () { },
                "length": {},
                "name": {},
                "namedItem": function () { }
              },
              "suffixes": {},
              "type": {}
            },
            "3": {
              "description": {},
              "enabledPlugin": {
                "0": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "1": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "description": {},
                "filename": {},
                "item": function () { },
                "length": {},
                "name": {},
                "namedItem": function () { }
              },
              "suffixes": {},
              "type": {}
            },
            "item": function () { },
            "length": {},
            "namedItem": function () { }
          },
          "onLine": {},
          "permissions": {
            "query": function () { }
          },
          "platform": {},
          "plugins": {
            "0": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "1": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "2": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "1": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "item": function () { },
            "length": {},
            "namedItem": function () { },
            "refresh": function () { }
          },
          "presentation": {
            "defaultRequest": {},
            "receiver": {}
          },
          "product": {},
          "productSub": {},
          "registerProtocolHandler": function () { },
          "requestMIDIAccess": function () { },
          "requestMediaKeySystemAccess": function () { },
          "sendBeacon": function () { },
          "serviceWorker": {
            "addEventListener": function () { },
            "controller": {},
            "dispatchEvent": function () { },
            "getRegistration": function () { },
            "getRegistrations": function () { },
            "oncontrollerchange": {},
            "onmessage": {},
            "onmessageerror": {},
            "ready": {},
            "register": function () { },
            "removeEventListener": function () { },
            "startMessages": function () { }
          },
          "setAppBadge": function () { },
          "storage": {
            "estimate": function () { },
            "persist": function () { },
            "persisted": function () { }
          },
          "unregisterProtocolHandler": function () { },
          "usb": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "getDevices": function () { },
            "onconnect": {},
            "ondisconnect": {},
            "removeEventListener": function () { },
            "requestDevice": function () { }
          },
          "userActivation": {
            "hasBeenActive": {},
            "isActive": {}
          },
          "userAgent": {},
          "vendor": {},
          "vendorSub": {},
          "vibrate": function () { },
          "webkitGetUserMedia": function () { },
          "webkitPersistentStorage": {
            "queryUsageAndQuota": function () { },
            "requestQuota": function () { }
          },
          "webkitTemporaryStorage": {
            "queryUsageAndQuota": function () { },
            "requestQuota": function () { }
          },
          "xr": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "isSessionSupported": function () { },
            "ondevicechange": {},
            "removeEventListener": function () { },
            "requestSession": function () { },
            "supportsSession": function () { }
          }
        },
        "onabort": {},
        "onafterprint": {},
        "onanimationend": {},
        "onanimationiteration": {},
        "onanimationstart": {},
        "onappinstalled": {},
        "onauxclick": {},
        "onbeforeinstallprompt": {},
        "onbeforeprint": {},
        "onbeforeunload": {},
        "onblur": {},
        "oncancel": {},
        "oncanplay": {},
        "oncanplaythrough": {},
        "onchange": {},
        "onclick": {},
        "onclose": {},
        "oncontextmenu": {},
        "oncuechange": {},
        "ondblclick": {},
        "ondevicemotion": {},
        "ondeviceorientation": {},
        "ondeviceorientationabsolute": {},
        "ondrag": {},
        "ondragend": {},
        "ondragenter": {},
        "ondragleave": {},
        "ondragover": {},
        "ondragstart": {},
        "ondrop": {},
        "ondurationchange": {},
        "onemptied": {},
        "onended": {},
        "onerror": {},
        "onfocus": {},
        "onformdata": {},
        "ongotpointercapture": {},
        "onhashchange": {},
        "oninput": {},
        "oninvalid": {},
        "onkeydown": {},
        "onkeypress": {},
        "onkeyup": {},
        "onlanguagechange": {},
        "onload": {},
        "onloadeddata": {},
        "onloadedmetadata": {},
        "onloadstart": {},
        "onlostpointercapture": {},
        "onmessage": {},
        "onmessageerror": {},
        "onmousedown": {},
        "onmouseenter": {},
        "onmouseleave": {},
        "onmousemove": {},
        "onmouseout": {},
        "onmouseover": {},
        "onmouseup": {},
        "onmousewheel": {},
        "onoffline": {},
        "ononline": {},
        "onpagehide": {},
        "onpageshow": {},
        "onpause": {},
        "onplay": {},
        "onplaying": {},
        "onpointercancel": {},
        "onpointerdown": {},
        "onpointerenter": {},
        "onpointerleave": {},
        "onpointermove": {},
        "onpointerout": {},
        "onpointerover": {},
        "onpointerrawupdate": {},
        "onpointerup": {},
        "onpopstate": {},
        "onprogress": {},
        "onratechange": {},
        "onrejectionhandled": {},
        "onreset": {},
        "onresize": {},
        "onscroll": {},
        "onsearch": {},
        "onseeked": {},
        "onseeking": {},
        "onselect": {},
        "onselectionchange": {},
        "onselectstart": {},
        "onstalled": {},
        "onstorage": {},
        "onsubmit": {},
        "onsuspend": {},
        "ontimeupdate": {},
        "ontoggle": {},
        "ontransitionend": {},
        "onunhandledrejection": {},
        "onunload": {},
        "onvolumechange": {},
        "onwaiting": {},
        "onwebkitanimationend": {},
        "onwebkitanimationiteration": {},
        "onwebkitanimationstart": {},
        "onwebkittransitionend": {},
        "onwheel": {},
        "open": function () { },
        "openDatabase": function () { },
        "opener": {},
        "origin": {},
        "outerHeight": {},
        "outerWidth": {},
        "pageXOffset": {},
        "pageYOffset": {},
        "parent": {},
        "performance": {
          "addEventListener": function () { },
          "clearMarks": function () { },
          "clearMeasures": function () { },
          "clearResourceTimings": function () { },
          "dispatchEvent": function () { },
          "getEntries": function () { },
          "getEntriesByName": function () { },
          "getEntriesByType": function () { },
          "mark": function () { },
          "measure": function () { },
          "memory": {
            "jsHeapSizeLimit": {},
            "totalJSHeapSize": {},
            "usedJSHeapSize": {}
          },
          "navigation": {
            "TYPE_BACK_FORWARD": {},
            "TYPE_NAVIGATE": {},
            "TYPE_RELOAD": {},
            "TYPE_RESERVED": {},
            "redirectCount": {},
            "toJSON": function () { },
            "type": {}
          },
          "now": function () { },
          "onresourcetimingbufferfull": {},
          "removeEventListener": function () { },
          "setResourceTimingBufferSize": function () { },
          "timeOrigin": {},
          "timing": {
            "connectEnd": {},
            "connectStart": {},
            "domComplete": {},
            "domContentLoadedEventEnd": {},
            "domContentLoadedEventStart": {},
            "domInteractive": {},
            "domLoading": {},
            "domainLookupEnd": {},
            "domainLookupStart": {},
            "fetchStart": {},
            "loadEventEnd": {},
            "loadEventStart": {},
            "navigationStart": {},
            "redirectEnd": {},
            "redirectStart": {},
            "requestStart": {},
            "responseEnd": {},
            "responseStart": {},
            "secureConnectionStart": {},
            "toJSON": function () { },
            "unloadEventEnd": {},
            "unloadEventStart": {}
          },
          "toJSON": function () { }
        },
        "personalbar": {
          "visible": {}
        },
        "postMessage": function () { },
        "print": function () { },
        "prompt": function () { },
        "queueMicrotask": function () { },
        "reagent": {
          "core": {
            "force_update_all": function () { }
          }
        },
        "releaseEvents": function () { },
        "removeEventListener": function () { },
        "requestAnimationFrame": function () { },
        "requestIdleCallback": function () { },
        "resizeBy": function () { },
        "resizeTo": function () { },
        "screen": {
          "availHeight": {},
          "availLeft": {},
          "availTop": {},
          "availWidth": {},
          "colorDepth": {},
          "height": {},
          "orientation": {
            "addEventListener": function () { },
            "angle": {},
            "dispatchEvent": function () { },
            "lock": function () { },
            "onchange": {},
            "removeEventListener": function () { },
            "type": {},
            "unlock": function () { }
          },
          "pixelDepth": {},
          "width": {}
        },
        "screenLeft": {},
        "screenTop": {},
        "screenX": {},
        "screenY": {},
        "scroll": function () { },
        "scrollBy": function () { },
        "scrollTo": function () { },
        "scrollX": {},
        "scrollY": {},
        "scrollbars": {
          "visible": {}
        },
        "self": {},
        "sessionStorage": {
          "clear": function () { },
          "getItem": function () { },
          "key": function () { },
          "length": {},
          "removeItem": function () { },
          "setItem": function () { }
        },
        "setInterval": function () { },
        "setTimeout": function () { },
        "speechSynthesis": {
          "addEventListener": function () { },
          "cancel": function () { },
          "dispatchEvent": function () { },
          "getVoices": function () { },
          "onvoiceschanged": {},
          "pause": function () { },
          "paused": {},
          "pending": {},
          "removeEventListener": function () { },
          "resume": function () { },
          "speak": function () { },
          "speaking": {}
        },
        "status": {},
        "statusbar": {
          "visible": {}
        },
        "stop": function () { },
        "styleMedia": {
          "matchMedium": function () { },
          "type": {}
        },
        "toolbar": {
          "visible": {}
        },
        "top": {},
        "trustedTypes": {
          "createPolicy": function () { },
          "defaultPolicy": {},
          "emptyHTML": {
            "toString": function () { }
          },
          "emptyScript": {
            "toString": function () { }
          },
          "getAttributeType": function () { },
          "getPropertyType": function () { },
          "getTypeMapping": function () { },
          "isHTML": function () { },
          "isScript": function () { },
          "isScriptURL": function () { }
        },
        "visualViewport": {
          "addEventListener": function () { },
          "dispatchEvent": function () { },
          "height": {},
          "offsetLeft": {},
          "offsetTop": {},
          "onresize": {},
          "onscroll": {},
          "pageLeft": {},
          "pageTop": {},
          "removeEventListener": function () { },
          "scale": {},
          "width": {}
        },
        "webkitCancelAnimationFrame": function () { },
        "webkitRequestAnimationFrame": function () { },
        "webkitRequestFileSystem": function () { },
        "webkitResolveLocalFileSystemURL": function () { },
        "webkitStorageInfo": {
          "PERSISTENT": {},
          "TEMPORARY": {},
          "queryUsageAndQuota": function () { },
          "requestQuota": function () { }
        },
        "window": {}
      },
      "performance": {
        "addEventListener": function () { },
        "clearMarks": function () { },
        "clearMeasures": function () { },
        "clearResourceTimings": function () { },
        "dispatchEvent": function () { },
        "getEntries": function () { },
        "getEntriesByName": function () { },
        "getEntriesByType": function () { },
        "mark": function () { },
        "measure": function () { },
        "memory": {
          "jsHeapSizeLimit": {},
          "totalJSHeapSize": {},
          "usedJSHeapSize": {}
        },
        "navigation": {
          "TYPE_BACK_FORWARD": {},
          "TYPE_NAVIGATE": {},
          "TYPE_RELOAD": {},
          "TYPE_RESERVED": {},
          "redirectCount": {},
          "toJSON": function () { },
          "type": {}
        },
        "now": function () { },
        "onresourcetimingbufferfull": {},
        "removeEventListener": function () { },
        "setResourceTimingBufferSize": function () { },
        "timeOrigin": {},
        "timing": {
          "connectEnd": {},
          "connectStart": {},
          "domComplete": {},
          "domContentLoadedEventEnd": {},
          "domContentLoadedEventStart": {},
          "domInteractive": {},
          "domLoading": {},
          "domainLookupEnd": {},
          "domainLookupStart": {},
          "fetchStart": {},
          "loadEventEnd": {},
          "loadEventStart": {},
          "navigationStart": {},
          "redirectEnd": {},
          "redirectStart": {},
          "requestStart": {},
          "responseEnd": {},
          "responseStart": {},
          "secureConnectionStart": {},
          "toJSON": function () { },
          "unloadEventEnd": {},
          "unloadEventStart": {}
        },
        "toJSON": function () { }
      },
      "personalbar": {
        "visible": {}
      },
      "postMessage": function () { },
      "print": function () { },
      "prompt": function () { },
      "queueMicrotask": function () { },
      "regeneratorRuntime": {
        "AsyncIterator": function () { },
        "async": function () { },
        "awrap": function () { },
        "isGeneratorFunction": function () { },
        "keys": function () { },
        "mark": function () { },
        "values": function () { },
        "wrap": function () { }
      },
      "releaseEvents": function () { },
      "removeEventListener": function () { },
      "requestAnimationFrame": function () { },
      "requestIdleCallback": function () { },
      "resizeBy": function () { },
      "resizeTo": function () { },
      "screen": {
        "availHeight": {},
        "availLeft": {},
        "availTop": {},
        "availWidth": {},
        "colorDepth": {},
        "height": {},
        "orientation": {
          "addEventListener": function () { },
          "angle": {},
          "dispatchEvent": function () { },
          "lock": function () { },
          "onchange": {},
          "removeEventListener": function () { },
          "type": {},
          "unlock": function () { }
        },
        "pixelDepth": {},
        "width": {}
      },
      "screenLeft": {},
      "screenTop": {},
      "screenX": {},
      "screenY": {},
      "scroll": function () { },
      "scrollBy": function () { },
      "scrollTo": function () { },
      "scrollX": {},
      "scrollY": {},
      "scrollbars": {
        "visible": {}
      },
      "self": {},
      "sessionStorage": {
        "clear": function () { },
        "getItem": function () { },
        "key": function () { },
        "length": {},
        "removeItem": function () { },
        "setItem": function () { }
      },
      "setImmediate": function () { },
      "setInterval": function () { },
      "setTimeout": function () { },
      "speechSynthesis": {
        "addEventListener": function () { },
        "cancel": function () { },
        "dispatchEvent": function () { },
        "getVoices": function () { },
        "onvoiceschanged": {},
        "pause": function () { },
        "paused": {},
        "pending": {},
        "removeEventListener": function () { },
        "resume": function () { },
        "speak": function () { },
        "speaking": {}
      },
      "status": {},
      "statusbar": {
        "visible": {}
      },
      "stop": function () { },
      "styleMedia": {
        "matchMedium": function () { },
        "type": {}
      },
      "tf": {
        "AdadeltaOptimizer": {
          "className": {},
          "fromConfig": function () { }
        },
        "AdagradOptimizer": {
          "className": {},
          "fromConfig": function () { }
        },
        "AdamOptimizer": {
          "className": {},
          "fromConfig": function () { }
        },
        "AdamaxOptimizer": {
          "className": {},
          "fromConfig": function () { }
        },
        "Add": {},
        "AddN": {},
        "Atan2": {},
        "AvgPool": {},
        "AvgPool3D": {},
        "AvgPool3DBackprop": {},
        "AvgPoolBackprop": {},
        "BatchMatMul": {},
        "BatchToSpaceND": {},
        "BroadcastTo": {},
        "Callback": function () { },
        "CallbackList": function () { },
        "Complex": {},
        "Concat": {},
        "Conv2D": {},
        "Conv2DBackpropFilter": {},
        "Conv2DBackpropInput": {},
        "Conv3D": {},
        "Conv3DBackpropFilterV2": {},
        "Conv3DBackpropInputV2": {},
        "Cumsum": {},
        "CustomCallback": function () { },
        "DataStorage": function () { },
        "DepthToSpace": {},
        "DepthwiseConv2dNative": {},
        "DepthwiseConv2dNativeBackpropFilter": {},
        "DepthwiseConv2dNativeBackpropInput": {},
        "Diag": {},
        "Div": {},
        "ENV": {},
        "EarlyStopping": function () { },
        "Elu": {},
        "EluGrad": {},
        "Environment": function () { },
        "Equal": {},
        "Fill": {},
        "FloorDiv": {},
        "FromPixels": {},
        "FusedBatchNorm": {},
        "GatherNd": {},
        "GraphModel": function () { },
        "Greater": {},
        "GreaterEqual": {},
        "History": function () { },
        "Identity": {},
        "Imag": {},
        "InputSpec": function () { },
        "KernelBackend": function () { },
        "LRN": {},
        "LRNBackprop": {},
        "LayerVariable": function () { },
        "LayersModel": {
          "className": {},
          "fromConfig": function () { },
          "nodeKey": function () { }
        },
        "Less": {},
        "LessEqual": {},
        "Max": {},
        "MaxPool": {},
        "MaxPool3D": {},
        "MaxPool3DBackprop": {},
        "MaxPoolBackprop": {},
        "MaxPoolWithArgmax": {},
        "Maximum": {},
        "Minimum": {},
        "Mod": {},
        "MomentumOptimizer": {
          "className": {},
          "fromConfig": function () { }
        },
        "Multiply": {},
        "NonMaxSuppressionV3": {},
        "NonMaxSuppressionV5": {},
        "NotEqual": {},
        "OneHot": {},
        "Optimizer": {
          "fromConfig": function () { }
        },
        "PadV2": {},
        "Pool": {},
        "Pow": {},
        "Prelu": {},
        "RMSPropOptimizer": {
          "className": {},
          "fromConfig": function () { }
        },
        "RNN": {
          "className": {},
          "fromConfig": function () { },
          "nodeKey": function () { }
        },
        "Rank": {
          "R0": {},
          "R1": {},
          "R2": {},
          "R3": {},
          "R4": {},
          "R5": {},
          "R6": {}
        },
        "Real": {},
        "Reduction": {
          "0": {},
          "1": {},
          "2": {},
          "3": {},
          "MEAN": {},
          "NONE": {},
          "SUM": {},
          "SUM_BY_NONZERO_WEIGHTS": {}
        },
        "Relu": {},
        "Relu6": {},
        "SGDOptimizer": {
          "className": {},
          "fromConfig": function () { }
        },
        "SelectV2": {},
        "Selu": {},
        "Sequential": {
          "className": {},
          "fromConfig": function () { },
          "nodeKey": function () { }
        },
        "SpaceToBatchND": {},
        "SplitV": {},
        "Square": {},
        "SquaredDifference": {},
        "Sub": {},
        "SymbolicTensor": function () { },
        "Tensor": function () { },
        "TensorBuffer": function () { },
        "Tile": {},
        "Transpose": {},
        "Variable": function () { },
        "abs": function () { },
        "acos": function () { },
        "acosh": function () { },
        "add": function () { },
        "addN": function () { },
        "addStrict": function () { },
        "all": function () { },
        "any": function () { },
        "argMax": function () { },
        "argMin": function () { },
        "asin": function () { },
        "asinh": function () { },
        "atan": function () { },
        "atan2": function () { },
        "atanh": function () { },
        "avgPool": function () { },
        "avgPool3d": function () { },
        "backend": function () { },
        "backend_util": {
          "ERF_A1": {},
          "ERF_A2": {},
          "ERF_A3": {},
          "ERF_A4": {},
          "ERF_A5": {},
          "ERF_P": {},
          "PARALLELIZE_THRESHOLD": {},
          "SELU_SCALE": {},
          "SELU_SCALEALPHA": {},
          "assertAndGetBroadcastShape": function () { },
          "assertAxesAreInnerMostDims": function () { },
          "assertParamsConsistent": function () { },
          "assignToTypedArray": function () { },
          "axesAreInnerMostDims": function () { },
          "calculateShapes": function () { },
          "castTensor": function () { },
          "combineLocations": function () { },
          "complexWithEvenIndex": function () { },
          "complexWithOddIndex": function () { },
          "computeConv2DInfo": function () { },
          "computeConv3DInfo": function () { },
          "computeDefaultPad": function () { },
          "computeOptimalWindowSize": function () { },
          "computeOutAndReduceShapes": function () { },
          "computeOutShape": function () { },
          "computePool2DInfo": function () { },
          "computePool3DInfo": function () { },
          "convertConv2DDataFormat": function () { },
          "eitherStridesOrDilationsAreOne": function () { },
          "expandShapeToKeepDim": function () { },
          "exponent": function () { },
          "exponents": function () { },
          "getAxesPermutation": function () { },
          "getBroadcastDims": function () { },
          "getComplexWithIndex": function () { },
          "getInnerMostAxes": function () { },
          "getPermuted": function () { },
          "getReductionAxes": function () { },
          "getReshaped": function () { },
          "getReshapedPermuted": function () { },
          "getSliceBeginCoords": function () { },
          "getSliceSize": function () { },
          "getUndoAxesPermutation": function () { },
          "linspaceImpl": function () { },
          "log": function () { },
          "mergeRealAndImagArrays": function () { },
          "nonMaxSuppressionV3": function () { },
          "nonMaxSuppressionV5": function () { },
          "prepareAndValidate": function () { },
          "reshapeTensor": function () { },
          "segment_util": {
            "collectGatherOpShapeInfo": function () { },
            "computeOutShape": function () { },
            "segOpComputeOptimalWindowSize": function () { }
          },
          "shouldFuse": function () { },
          "splitRealAndImagArrays": function () { },
          "tupleValuesAreOne": function () { },
          "upcastType": function () { },
          "validateInput": function () { },
          "validateUpdateShape": function () { },
          "warn": function () { }
        },
        "basicLSTMCell": function () { },
        "batchNorm": function () { },
        "batchNorm2d": function () { },
        "batchNorm3d": function () { },
        "batchNorm4d": function () { },
        "batchToSpaceND": function () { },
        "booleanMaskAsync": function () { },
        "broadcastTo": function () { },
        "browser": {
          "fromPixels": function () { },
          "toPixels": function () { }
        },
        "buffer": function () { },
        "callbacks": {
          "earlyStopping": function () { }
        },
        "cast": function () { },
        "ceil": function () { },
        "clipByValue": function () { },
        "clone": function () { },
        "complex": function () { },
        "concat": function () { },
        "concat1d": function () { },
        "concat2d": function () { },
        "concat3d": function () { },
        "concat4d": function () { },
        "constraints": {
          "maxNorm": function () { },
          "minMaxNorm": function () { },
          "nonNeg": function () { },
          "unitNorm": function () { }
        },
        "conv1d": function () { },
        "conv2d": function () { },
        "conv2dTranspose": function () { },
        "conv3d": function () { },
        "conv3dTranspose": function () { },
        "cos": function () { },
        "cosh": function () { },
        "cumsum": function () { },
        "customGrad": function () { },
        "data": {
          "CSVDataset": {
            "MAX_BUFFER_SIZE": {}
          },
          "Dataset": {
            "MAX_BUFFER_SIZE": {}
          },
          "FileDataSource": function () { },
          "TextLineDataset": {
            "MAX_BUFFER_SIZE": {}
          },
          "URLDataSource": function () { },
          "array": function () { },
          "csv": function () { },
          "func": function () { },
          "generator": function () { },
          "microphone": function () { },
          "version_data": {},
          "webcam": function () { },
          "zip": function () { }
        },
        "deprecationWarn": function () { },
        "depthToSpace": function () { },
        "depthwiseConv2d": function () { },
        "deregisterOp": function () { },
        "device_util": {
          "isBrowser": function () { },
          "isMobile": function () { }
        },
        "diag": function () { },
        "disableDeprecationWarnings": function () { },
        "dispose": function () { },
        "disposeVariables": function () { },
        "div": function () { },
        "divNoNan": function () { },
        "divStrict": function () { },
        "dot": function () { },
        "dropout": function () { },
        "elu": function () { },
        "enableDebugMode": function () { },
        "enableProdMode": function () { },
        "engine": function () { },
        "env": function () { },
        "equal": function () { },
        "equalStrict": function () { },
        "erf": function () { },
        "exp": function () { },
        "expandDims": function () { },
        "expm1": function () { },
        "eye": function () { },
        "fft": function () { },
        "fill": function () { },
        "findBackend": function () { },
        "findBackendFactory": function () { },
        "floor": function () { },
        "floorDiv": function () { },
        "frame": function () { },
        "fused": {
          "conv2d": function () { },
          "depthwiseConv2d": function () { },
          "matMul": function () { }
        },
        "gather": function () { },
        "gatherND": function () { },
        "gather_util": {
          "prepareAndValidate": function () { }
        },
        "getBackend": function () { },
        "getGradient": function () { },
        "getKernel": function () { },
        "getKernelsForBackend": function () { },
        "grad": function () { },
        "grads": function () { },
        "greater": function () { },
        "greaterEqual": function () { },
        "greaterEqualStrict": function () { },
        "greaterStrict": function () { },
        "hammingWindow": function () { },
        "hannWindow": function () { },
        "ifft": function () { },
        "imag": function () { },
        "image": {
          "cropAndResize": function () { },
          "nonMaxSuppression": function () { },
          "nonMaxSuppressionAsync": function () { },
          "nonMaxSuppressionWithScore": function () { },
          "nonMaxSuppressionWithScoreAsync": function () { },
          "resizeBilinear": function () { },
          "resizeNearestNeighbor": function () { }
        },
        "inTopKAsync": function () { },
        "initializers": {
          "constant": function () { },
          "glorotNormal": function () { },
          "glorotUniform": function () { },
          "heNormal": function () { },
          "heUniform": function () { },
          "identity": function () { },
          "leCunNormal": function () { },
          "leCunUniform": function () { },
          "ones": function () { },
          "orthogonal": function () { },
          "randomNormal": function () { },
          "randomUniform": function () { },
          "truncatedNormal": function () { },
          "varianceScaling": function () { },
          "zeros": function () { }
        },
        "input": function () { },
        "io": {
          "browserFiles": function () { },
          "browserHTTPRequest": function () { },
          "concatenateArrayBuffers": function () { },
          "copyModel": function () { },
          "decodeWeights": function () { },
          "encodeWeights": function () { },
          "fromMemory": function () { },
          "getLoadHandlers": function () { },
          "getModelArtifactsInfoForJSON": function () { },
          "getSaveHandlers": function () { },
          "http": function () { },
          "isHTTPScheme": function () { },
          "listModels": function () { },
          "loadWeights": function () { },
          "moveModel": function () { },
          "registerLoadRouter": function () { },
          "registerSaveRouter": function () { },
          "removeModel": function () { },
          "weightsLoaderFactory": function () { },
          "withSaveHandler": function () { }
        },
        "irfft": function () { },
        "isFinite": function () { },
        "isInf": function () { },
        "isNaN": function () { },
        "keep": function () { },
        "kernel_impls": {
          "nonMaxSuppressionV3": function () { },
          "nonMaxSuppressionV5": function () { },
          "split": function () { },
          "tile": function () { },
          "topkImpl": function () { },
          "whereImpl": function () { }
        },
        "layers": {
          "Layer": {
            "fromConfig": function () { },
            "nodeKey": function () { }
          },
          "RNN": {
            "className": {},
            "fromConfig": function () { },
            "nodeKey": function () { }
          },
          "RNNCell": {
            "fromConfig": function () { },
            "nodeKey": function () { }
          },
          "activation": function () { },
          "add": function () { },
          "alphaDropout": function () { },
          "average": function () { },
          "averagePooling1d": function () { },
          "averagePooling2d": function () { },
          "averagePooling3d": function () { },
          "avgPool1d": function () { },
          "avgPool2d": function () { },
          "avgPool3d": function () { },
          "avgPooling1d": function () { },
          "avgPooling2d": function () { },
          "avgPooling3d": function () { },
          "batchNormalization": function () { },
          "bidirectional": function () { },
          "concatenate": function () { },
          "conv1d": function () { },
          "conv2d": function () { },
          "conv2dTranspose": function () { },
          "conv3d": function () { },
          "cropping2D": function () { },
          "dense": function () { },
          "depthwiseConv2d": function () { },
          "dot": function () { },
          "dropout": function () { },
          "elu": function () { },
          "embedding": function () { },
          "flatten": function () { },
          "gaussianDropout": function () { },
          "gaussianNoise": function () { },
          "globalAveragePooling1d": function () { },
          "globalAveragePooling2d": function () { },
          "globalMaxPool1d": function () { },
          "globalMaxPool2d": function () { },
          "globalMaxPooling1d": function () { },
          "globalMaxPooling2d": function () { },
          "gru": function () { },
          "gruCell": function () { },
          "input": function () { },
          "inputLayer": function () { },
          "layerNormalization": function () { },
          "leakyReLU": function () { },
          "lstm": function () { },
          "lstmCell": function () { },
          "masking": function () { },
          "maxPool1d": function () { },
          "maxPool2d": function () { },
          "maxPooling1d": function () { },
          "maxPooling2d": function () { },
          "maxPooling3d": function () { },
          "maximum": function () { },
          "minimum": function () { },
          "multiply": function () { },
          "permute": function () { },
          "prelu": function () { },
          "reLU": function () { },
          "repeatVector": function () { },
          "reshape": function () { },
          "rnn": function () { },
          "separableConv2d": function () { },
          "simpleRNN": function () { },
          "simpleRNNCell": function () { },
          "softmax": function () { },
          "spatialDropout1d": function () { },
          "stackedRNNCells": function () { },
          "thresholdedReLU": function () { },
          "timeDistributed": function () { },
          "upSampling2d": function () { },
          "zeroPadding2d": function () { }
        },
        "leakyRelu": function () { },
        "less": function () { },
        "lessEqual": function () { },
        "lessEqualStrict": function () { },
        "lessStrict": function () { },
        "linalg": {
          "bandPart": function () { },
          "gramSchmidt": function () { },
          "qr": function () { }
        },
        "linspace": function () { },
        "loadGraphModel": function () { },
        "loadLayersModel": function () { },
        "localResponseNormalization": function () { },
        "log": function () { },
        "log1p": function () { },
        "logSigmoid": function () { },
        "logSoftmax": function () { },
        "logSumExp": function () { },
        "logicalAnd": function () { },
        "logicalNot": function () { },
        "logicalOr": function () { },
        "logicalXor": function () { },
        "losses": {
          "Reduction": {
            "0": {},
            "1": {},
            "2": {},
            "3": {},
            "MEAN": {},
            "NONE": {},
            "SUM": {},
            "SUM_BY_NONZERO_WEIGHTS": {}
          },
          "absoluteDifference": function () { },
          "computeWeightedLoss": function () { },
          "cosineDistance": function () { },
          "hingeLoss": function () { },
          "huberLoss": function () { },
          "logLoss": function () { },
          "meanSquaredError": function () { },
          "sigmoidCrossEntropy": function () { },
          "softmaxCrossEntropy": function () { }
        },
        "matMul": function () { },
        "math": {
          "confusionMatrix": function () { }
        },
        "max": function () { },
        "maxPool": function () { },
        "maxPool3d": function () { },
        "maxPoolWithArgmax": function () { },
        "maximum": function () { },
        "maximumStrict": function () { },
        "mean": function () { },
        "memory": function () { },
        "metrics": {
          "MAPE": function () { },
          "MSE": function () { },
          "binaryAccuracy": function () { },
          "binaryCrossentropy": function () { },
          "categoricalAccuracy": function () { },
          "categoricalCrossentropy": function () { },
          "cosineProximity": function () { },
          "mape": function () { },
          "meanAbsoluteError": function () { },
          "meanAbsolutePercentageError": function () { },
          "meanSquaredError": function () { },
          "mse": function () { },
          "precision": function () { },
          "recall": function () { },
          "sparseCategoricalAccuracy": function () { }
        },
        "min": function () { },
        "minimum": function () { },
        "minimumStrict": function () { },
        "mod": function () { },
        "modStrict": function () { },
        "model": function () { },
        "models": {
          "modelFromJSON": function () { }
        },
        "moments": function () { },
        "movingAverage": function () { },
        "mul": function () { },
        "mulStrict": function () { },
        "multiRNNCell": function () { },
        "multinomial": function () { },
        "neg": function () { },
        "nextFrame": function () { },
        "norm": function () { },
        "notEqual": function () { },
        "notEqualStrict": function () { },
        "oneHot": function () { },
        "ones": function () { },
        "onesLike": function () { },
        "op": function () { },
        "outerProduct": function () { },
        "pad": function () { },
        "pad1d": function () { },
        "pad2d": function () { },
        "pad3d": function () { },
        "pad4d": function () { },
        "pool": function () { },
        "pow": function () { },
        "powStrict": function () { },
        "prelu": function () { },
        "print": function () { },
        "prod": function () { },
        "profile": function () { },
        "rand": function () { },
        "randomGamma": function () { },
        "randomNormal": function () { },
        "randomUniform": function () { },
        "range": function () { },
        "ready": function () { },
        "real": function () { },
        "reciprocal": function () { },
        "registerBackend": function () { },
        "registerCallbackConstructor": function () { },
        "registerGradient": function () { },
        "registerKernel": function () { },
        "registerOp": function () { },
        "regularizers": {
          "l1": function () { },
          "l1l2": function () { },
          "l2": function () { }
        },
        "relu": function () { },
        "relu6": function () { },
        "removeBackend": function () { },
        "reshape": function () { },
        "reverse": function () { },
        "reverse1d": function () { },
        "reverse2d": function () { },
        "reverse3d": function () { },
        "reverse4d": function () { },
        "rfft": function () { },
        "round": function () { },
        "rsqrt": function () { },
        "scalar": function () { },
        "scatterND": function () { },
        "scatter_util": {
          "calculateShapes": function () { },
          "validateInput": function () { },
          "validateUpdateShape": function () { }
        },
        "selu": function () { },
        "separableConv2d": function () { },
        "sequential": function () { },
        "serialization": {
          "Serializable": {
            "fromConfig": function () { }
          },
          "SerializationMap": {
            "getMap": function () { },
            "instance": {
              "classNameMap": {
                "Activation": {},
                "Adadelta": {},
                "Adagrad": {},
                "Adam": {},
                "Adamax": {},
                "Add": {},
                "AlphaDropout": {},
                "Average": {},
                "AveragePooling1D": {},
                "AveragePooling2D": {},
                "AveragePooling3D": {},
                "BatchNormalization": {},
                "Bidirectional": {},
                "Concatenate": {},
                "Constant": {},
                "Conv1D": {},
                "Conv2D": {},
                "Conv2DTranspose": {},
                "Conv3D": {},
                "Cropping2D": {},
                "Dense": {},
                "DepthwiseConv2D": {},
                "Dot": {},
                "Dropout": {},
                "ELU": {},
                "Embedding": {},
                "Flatten": {},
                "GRU": {},
                "GRUCell": {},
                "GaussianDropout": {},
                "GaussianNoise": {},
                "GlobalAveragePooling1D": {},
                "GlobalAveragePooling2D": {},
                "GlobalMaxPooling1D": {},
                "GlobalMaxPooling2D": {},
                "GlorotNormal": {},
                "GlorotUniform": {},
                "HeNormal": {},
                "HeUniform": {},
                "Identity": {},
                "InputLayer": {},
                "L1L2": {},
                "LSTM": {},
                "LSTMCell": {},
                "LayerNormalization": {},
                "LeCunNormal": {},
                "LeakyReLU": {},
                "Masking": {},
                "MaxNorm": {},
                "MaxPooling1D": {},
                "MaxPooling2D": {},
                "MaxPooling3D": {},
                "Maximum": {},
                "MinMaxNorm": {},
                "Minimum": {},
                "Model": {},
                "Momentum": {},
                "Multiply": {},
                "NonNeg": {},
                "Ones": {},
                "Orthogonal": {},
                "PReLU": {},
                "Permute": {},
                "RMSProp": {},
                "RNN": {},
                "RandomNormal": {},
                "RandomUniform": {},
                "ReLU": {},
                "RepeatVector": {},
                "Reshape": {},
                "SGD": {},
                "SeparableConv2D": {},
                "Sequential": {},
                "SimpleRNN": {},
                "SimpleRNNCell": {},
                "Softmax": {},
                "SpatialDropout1D": {},
                "StackedRNNCells": {},
                "ThresholdedReLU": {},
                "TimeDistributed": {},
                "TruncatedNormal": {},
                "UnitNorm": {},
                "UpSampling2D": {},
                "VarianceScaling": {},
                "ZeroPadding2D": {},
                "Zeros": {},
                "elu": {},
                "hardSigmoid": {},
                "linear": {},
                "logSoftmax": {},
                "relu": {},
                "relu6": {},
                "selu": {},
                "sigmoid": {},
                "softmax": {},
                "softplus": {},
                "softsign": {},
                "tanh": {}
              }
            },
            "register": function () { }
          },
          "registerClass": function () { }
        },
        "setBackend": function () { },
        "setPlatform": function () { },
        "setdiff1dAsync": function () { },
        "sigmoid": function () { },
        "sign": function () { },
        "signal": {
          "frame": function () { },
          "hammingWindow": function () { },
          "hannWindow": function () { },
          "stft": function () { }
        },
        "sin": function () { },
        "sinh": function () { },
        "slice": function () { },
        "slice1d": function () { },
        "slice2d": function () { },
        "slice3d": function () { },
        "slice4d": function () { },
        "slice_util": {
          "assertParamsValid": function () { },
          "computeFlatOffset": function () { },
          "computeOutShape": function () { },
          "isSliceContinous": function () { },
          "maskToAxes": function () { },
          "startForAxis": function () { },
          "startIndicesWithElidedDims": function () { },
          "stopForAxis": function () { },
          "stopIndicesWithElidedDims": function () { },
          "stridesForAxis": function () { },
          "stridesWithElidedDims": function () { }
        },
        "softmax": function () { },
        "softplus": function () { },
        "spaceToBatchND": function () { },
        "sparseToDense": function () { },
        "spectral": {
          "fft": function () { },
          "ifft": function () { },
          "irfft": function () { },
          "rfft": function () { }
        },
        "split": function () { },
        "sqrt": function () { },
        "square": function () { },
        "squaredDifference": function () { },
        "squaredDifferenceStrict": function () { },
        "squeeze": function () { },
        "stack": function () { },
        "step": function () { },
        "stft": function () { },
        "stridedSlice": function () { },
        "sub": function () { },
        "subStrict": function () { },
        "sum": function () { },
        "sumOutType": function () { },
        "tan": function () { },
        "tanh": function () { },
        "tensor": function () { },
        "tensor1d": function () { },
        "tensor2d": function () { },
        "tensor3d": function () { },
        "tensor4d": function () { },
        "tensor5d": function () { },
        "tensor6d": function () { },
        "tensor_util": {
          "assertTypesMatch": function () { },
          "getTensorsInContainer": function () { },
          "isTensorInList": function () { },
          "makeTypesMatch": function () { }
        },
        "test_util": {
          "TEST_EPSILON_FLOAT16": {},
          "expectArrayBuffersEqual": function () { },
          "expectArraysClose": function () { },
          "expectArraysEqual": function () { },
          "expectNumbersClose": function () { },
          "expectPromiseToFail": function () { },
          "expectValuesInRange": function () { },
          "testEpsilon": function () { }
        },
        "tidy": function () { },
        "tile": function () { },
        "time": function () { },
        "topk": function () { },
        "train": {
          "adadelta": function () { },
          "adagrad": function () { },
          "adam": function () { },
          "adamax": function () { },
          "momentum": function () { },
          "rmsprop": function () { },
          "sgd": function () { }
        },
        "transpose": function () { },
        "truncatedNormal": function () { },
        "unregisterGradient": function () { },
        "unregisterKernel": function () { },
        "unsortedSegmentSum": function () { },
        "unstack": function () { },
        "upcastType": function () { },
        "util": {
          "arraysEqual": function () { },
          "assert": function () { },
          "assertNonNegativeIntegerDimensions": function () { },
          "assertNonNull": function () { },
          "assertShapesMatch": function () { },
          "bytesFromStringArray": function () { },
          "bytesPerElement": function () { },
          "checkConversionForErrors": function () { },
          "clamp": function () { },
          "computeStrides": function () { },
          "createShuffledIndices": function () { },
          "decodeString": function () { },
          "distSquared": function () { },
          "encodeString": function () { },
          "fetch": function () { },
          "flatten": function () { },
          "getArrayFromDType": function () { },
          "getTypedArrayFromDType": function () { },
          "hasEncodingLoss": function () { },
          "indexToLoc": function () { },
          "inferDtype": function () { },
          "inferFromImplicitShape": function () { },
          "isBoolean": function () { },
          "isFunction": function () { },
          "isInt": function () { },
          "isNumber": function () { },
          "isScalarShape": function () { },
          "isString": function () { },
          "isTypedArray": function () { },
          "isValidDtype": function () { },
          "locToIndex": function () { },
          "makeOnesTypedArray": function () { },
          "makeZerosTypedArray": function () { },
          "nearestDivisor": function () { },
          "nearestLargerEven": function () { },
          "now": function () { },
          "parseAxisParam": function () { },
          "randUniform": function () { },
          "repeatedTry": function () { },
          "rightPad": function () { },
          "shuffle": function () { },
          "sizeFromShape": function () { },
          "sizeToSquarishShape": function () { },
          "squeezeShape": function () { },
          "sum": function () { },
          "tanh": function () { },
          "toNestedArray": function () { },
          "toTypedArray": function () { }
        },
        "valueAndGrad": function () { },
        "valueAndGrads": function () { },
        "variable": function () { },
        "variableGrads": function () { },
        "version": {
          "tfjs": {},
          "tfjs-backend-cpu": {},
          "tfjs-backend-webgl": {},
          "tfjs-converter": {},
          "tfjs-core": {},
          "tfjs-data": {},
          "tfjs-layers": {}
        },
        "version_converter": {},
        "version_core": {},
        "version_layers": {},
        "where": function () { },
        "whereAsync": function () { },
        "zeros": function () { },
        "zerosLike": function () { }
      },
      "toolbar": {
        "visible": {}
      },
      "top": {
        "PERSISTENT": {},
        "React": {
          "Children": {
            "count": function () { },
            "forEach": function () { },
            "map": function () { },
            "only": function () { },
            "toArray": function () { }
          },
          "Component": function () { },
          "DOM": {
            "a": {
              "type": {}
            },
            "abbr": {
              "type": {}
            },
            "address": {
              "type": {}
            },
            "area": {
              "type": {}
            },
            "article": {
              "type": {}
            },
            "aside": {
              "type": {}
            },
            "audio": {
              "type": {}
            },
            "b": {
              "type": {}
            },
            "base": {
              "type": {}
            },
            "bdi": {
              "type": {}
            },
            "bdo": {
              "type": {}
            },
            "big": {
              "type": {}
            },
            "blockquote": {
              "type": {}
            },
            "body": {
              "type": {}
            },
            "br": {
              "type": {}
            },
            "button": {
              "type": {}
            },
            "canvas": {
              "type": {}
            },
            "caption": {
              "type": {}
            },
            "circle": {
              "type": {}
            },
            "cite": {
              "type": {}
            },
            "clipPath": {
              "type": {}
            },
            "code": {
              "type": {}
            },
            "col": {
              "type": {}
            },
            "colgroup": {
              "type": {}
            },
            "data": {
              "type": {}
            },
            "datalist": {
              "type": {}
            },
            "dd": {
              "type": {}
            },
            "defs": {
              "type": {}
            },
            "del": {
              "type": {}
            },
            "details": {
              "type": {}
            },
            "dfn": {
              "type": {}
            },
            "dialog": {
              "type": {}
            },
            "div": {
              "type": {}
            },
            "dl": {
              "type": {}
            },
            "dt": {
              "type": {}
            },
            "ellipse": {
              "type": {}
            },
            "em": {
              "type": {}
            },
            "embed": {
              "type": {}
            },
            "fieldset": {
              "type": {}
            },
            "figcaption": {
              "type": {}
            },
            "figure": {
              "type": {}
            },
            "footer": {
              "type": {}
            },
            "form": {
              "type": {}
            },
            "g": {
              "type": {}
            },
            "h1": {
              "type": {}
            },
            "h2": {
              "type": {}
            },
            "h3": {
              "type": {}
            },
            "h4": {
              "type": {}
            },
            "h5": {
              "type": {}
            },
            "h6": {
              "type": {}
            },
            "head": {
              "type": {}
            },
            "header": {
              "type": {}
            },
            "hgroup": {
              "type": {}
            },
            "hr": {
              "type": {}
            },
            "html": {
              "type": {}
            },
            "i": {
              "type": {}
            },
            "iframe": {
              "type": {}
            },
            "image": {
              "type": {}
            },
            "img": {
              "type": {}
            },
            "input": {
              "type": {}
            },
            "ins": {
              "type": {}
            },
            "kbd": {
              "type": {}
            },
            "keygen": {
              "type": {}
            },
            "label": {
              "type": {}
            },
            "legend": {
              "type": {}
            },
            "li": {
              "type": {}
            },
            "line": {
              "type": {}
            },
            "linearGradient": {
              "type": {}
            },
            "link": {
              "type": {}
            },
            "main": {
              "type": {}
            },
            "map": {
              "type": {}
            },
            "mark": {
              "type": {}
            },
            "mask": {
              "type": {}
            },
            "menu": {
              "type": {}
            },
            "menuitem": {
              "type": {}
            },
            "meta": {
              "type": {}
            },
            "meter": {
              "type": {}
            },
            "nav": {
              "type": {}
            },
            "noscript": {
              "type": {}
            },
            "object": {
              "type": {}
            },
            "ol": {
              "type": {}
            },
            "optgroup": {
              "type": {}
            },
            "option": {
              "type": {}
            },
            "output": {
              "type": {}
            },
            "p": {
              "type": {}
            },
            "param": {
              "type": {}
            },
            "path": {
              "type": {}
            },
            "pattern": {
              "type": {}
            },
            "picture": {
              "type": {}
            },
            "polygon": {
              "type": {}
            },
            "polyline": {
              "type": {}
            },
            "pre": {
              "type": {}
            },
            "progress": {
              "type": {}
            },
            "q": {
              "type": {}
            },
            "radialGradient": {
              "type": {}
            },
            "rect": {
              "type": {}
            },
            "rp": {
              "type": {}
            },
            "rt": {
              "type": {}
            },
            "ruby": {
              "type": {}
            },
            "s": {
              "type": {}
            },
            "samp": {
              "type": {}
            },
            "script": {
              "type": {}
            },
            "section": {
              "type": {}
            },
            "select": {
              "type": {}
            },
            "small": {
              "type": {}
            },
            "source": {
              "type": {}
            },
            "span": {
              "type": {}
            },
            "stop": {
              "type": {}
            },
            "strong": {
              "type": {}
            },
            "style": {
              "type": {}
            },
            "sub": {
              "type": {}
            },
            "summary": {
              "type": {}
            },
            "sup": {
              "type": {}
            },
            "svg": {
              "type": {}
            },
            "table": {
              "type": {}
            },
            "tbody": {
              "type": {}
            },
            "td": {
              "type": {}
            },
            "text": {
              "type": {}
            },
            "textarea": {
              "type": {}
            },
            "tfoot": {
              "type": {}
            },
            "th": {
              "type": {}
            },
            "thead": {
              "type": {}
            },
            "time": {
              "type": {}
            },
            "title": {
              "type": {}
            },
            "tr": {
              "type": {}
            },
            "track": {
              "type": {}
            },
            "tspan": {
              "type": {}
            },
            "u": {
              "type": {}
            },
            "ul": {
              "type": {}
            },
            "var": {
              "type": {}
            },
            "video": {
              "type": {}
            },
            "wbr": {
              "type": {}
            }
          },
          "PropTypes": {
            "PropTypes": {},
            "any": {
              "isRequired": function () { }
            },
            "array": {
              "isRequired": function () { }
            },
            "arrayOf": function () { },
            "bool": {
              "isRequired": function () { }
            },
            "checkPropTypes": function () { },
            "element": {
              "isRequired": function () { }
            },
            "func": {
              "isRequired": function () { }
            },
            "instanceOf": function () { },
            "node": {
              "isRequired": function () { }
            },
            "number": {
              "isRequired": function () { }
            },
            "object": {
              "isRequired": function () { }
            },
            "objectOf": function () { },
            "oneOf": function () { },
            "oneOfType": function () { },
            "shape": function () { },
            "string": {
              "isRequired": function () { }
            },
            "symbol": {
              "isRequired": function () { }
            }
          },
          "PureComponent": function () { },
          "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED": {
            "ReactCurrentOwner": {
              "current": {}
            }
          },
          "__spread": function () { },
          "cloneElement": function () { },
          "createClass": function () { },
          "createElement": function () { },
          "createFactory": function () { },
          "createMixin": function () { },
          "isValidElement": function () { },
          "version": {}
        },
        "ReactDOM": {
          "findDOMNode": function () { },
          "render": function () { },
          "unmountComponentAtNode": function () { },
          "unstable_batchedUpdates": function () { },
          "unstable_renderSubtreeIntoContainer": function () { },
          "version": {}
        },
        "TEMPORARY": {},
        "addEventListener": function () { },
        "alert": function () { },
        "applicationCache": {
          "CHECKING": {},
          "DOWNLOADING": {},
          "IDLE": {},
          "OBSOLETE": {},
          "UNCACHED": {},
          "UPDATEREADY": {},
          "abort": function () { },
          "addEventListener": function () { },
          "dispatchEvent": function () { },
          "oncached": {},
          "onchecking": {},
          "ondownloading": {},
          "onerror": {},
          "onnoupdate": {},
          "onobsolete": {},
          "onprogress": {},
          "onupdateready": {},
          "removeEventListener": function () { },
          "status": {},
          "swapCache": function () { },
          "update": function () { }
        },
        "atob": function () { },
        "blur": function () { },
        "btoa": function () { },
        "caches": {
          "delete": function () { },
          "has": function () { },
          "keys": function () { },
          "match": function () { },
          "open": function () { }
        },
        "cancelAnimationFrame": function () { },
        "cancelIdleCallback": function () { },
        "captureEvents": function () { },
        "chrome": {
          "app": {
            "InstallState": {
              "DISABLED": {},
              "INSTALLED": {},
              "NOT_INSTALLED": {}
            },
            "RunningState": {
              "CANNOT_RUN": {},
              "READY_TO_RUN": {},
              "RUNNING": {}
            },
            "getDetails": function () { },
            "getIsInstalled": function () { },
            "installState": function () { },
            "isInstalled": {},
            "runningState": function () { }
          },
          "csi": function () { },
          "loadTimes": function () { },
          "runtime": {
            "OnInstalledReason": {
              "CHROME_UPDATE": {},
              "INSTALL": {},
              "SHARED_MODULE_UPDATE": {},
              "UPDATE": {}
            },
            "OnRestartRequiredReason": {
              "APP_UPDATE": {},
              "OS_UPDATE": {},
              "PERIODIC": {}
            },
            "PlatformArch": {
              "ARM": {},
              "ARM64": {},
              "MIPS": {},
              "MIPS64": {},
              "X86_32": {},
              "X86_64": {}
            },
            "PlatformNaclArch": {
              "ARM": {},
              "MIPS": {},
              "MIPS64": {},
              "X86_32": {},
              "X86_64": {}
            },
            "PlatformOs": {
              "ANDROID": {},
              "CROS": {},
              "LINUX": {},
              "MAC": {},
              "OPENBSD": {},
              "WIN": {}
            },
            "RequestUpdateCheckStatus": {
              "NO_UPDATE": {},
              "THROTTLED": {},
              "UPDATE_AVAILABLE": {}
            },
            "connect": function () { },
            "id": {},
            "sendMessage": function () { }
          }
        },
        "clearInterval": function () { },
        "clearTimeout": function () { },
        "clientInformation": {
          "appCodeName": {},
          "appName": {},
          "appVersion": {},
          "bluetooth": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "getAvailability": function () { },
            "removeEventListener": function () { },
            "requestDevice": function () { }
          },
          "clearAppBadge": function () { },
          "clipboard": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "read": function () { },
            "readText": function () { },
            "removeEventListener": function () { },
            "write": function () { },
            "writeText": function () { }
          },
          "connection": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "downlink": {},
            "effectiveType": {},
            "onchange": {},
            "removeEventListener": function () { },
            "rtt": {},
            "saveData": {}
          },
          "cookieEnabled": {},
          "credentials": {
            "create": function () { },
            "get": function () { },
            "preventSilentAccess": function () { },
            "store": function () { }
          },
          "deviceMemory": {},
          "doNotTrack": {},
          "geolocation": {
            "clearWatch": function () { },
            "getCurrentPosition": function () { },
            "watchPosition": function () { }
          },
          "getBattery": function () { },
          "getGamepads": function () { },
          "getInstalledRelatedApps": function () { },
          "getUserMedia": function () { },
          "hardwareConcurrency": {},
          "javaEnabled": function () { },
          "keyboard": {
            "getLayoutMap": function () { },
            "lock": function () { },
            "unlock": function () { }
          },
          "language": {},
          "languages": {},
          "locks": {
            "query": function () { },
            "request": function () { }
          },
          "maxTouchPoints": {},
          "mediaCapabilities": {
            "decodingInfo": function () { }
          },
          "mediaDevices": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "enumerateDevices": function () { },
            "getDisplayMedia": function () { },
            "getSupportedConstraints": function () { },
            "getUserMedia": function () { },
            "ondevicechange": {},
            "removeEventListener": function () { }
          },
          "mediaSession": {
            "metadata": {},
            "playbackState": {},
            "setActionHandler": function () { },
            "setPositionState": function () { }
          },
          "mimeTypes": {
            "0": {
              "description": {},
              "enabledPlugin": {
                "0": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "description": {},
                "filename": {},
                "item": function () { },
                "length": {},
                "name": {},
                "namedItem": function () { }
              },
              "suffixes": {},
              "type": {}
            },
            "1": {
              "description": {},
              "enabledPlugin": {
                "0": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "description": {},
                "filename": {},
                "item": function () { },
                "length": {},
                "name": {},
                "namedItem": function () { }
              },
              "suffixes": {},
              "type": {}
            },
            "2": {
              "description": {},
              "enabledPlugin": {
                "0": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "1": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "description": {},
                "filename": {},
                "item": function () { },
                "length": {},
                "name": {},
                "namedItem": function () { }
              },
              "suffixes": {},
              "type": {}
            },
            "3": {
              "description": {},
              "enabledPlugin": {
                "0": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "1": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "description": {},
                "filename": {},
                "item": function () { },
                "length": {},
                "name": {},
                "namedItem": function () { }
              },
              "suffixes": {},
              "type": {}
            },
            "item": function () { },
            "length": {},
            "namedItem": function () { }
          },
          "onLine": {},
          "permissions": {
            "query": function () { }
          },
          "platform": {},
          "plugins": {
            "0": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "1": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "2": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "1": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "item": function () { },
            "length": {},
            "namedItem": function () { },
            "refresh": function () { }
          },
          "presentation": {
            "defaultRequest": {},
            "receiver": {}
          },
          "product": {},
          "productSub": {},
          "registerProtocolHandler": function () { },
          "requestMIDIAccess": function () { },
          "requestMediaKeySystemAccess": function () { },
          "sendBeacon": function () { },
          "serviceWorker": {
            "addEventListener": function () { },
            "controller": {},
            "dispatchEvent": function () { },
            "getRegistration": function () { },
            "getRegistrations": function () { },
            "oncontrollerchange": {},
            "onmessage": {},
            "onmessageerror": {},
            "ready": {},
            "register": function () { },
            "removeEventListener": function () { },
            "startMessages": function () { }
          },
          "setAppBadge": function () { },
          "storage": {
            "estimate": function () { },
            "persist": function () { },
            "persisted": function () { }
          },
          "unregisterProtocolHandler": function () { },
          "usb": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "getDevices": function () { },
            "onconnect": {},
            "ondisconnect": {},
            "removeEventListener": function () { },
            "requestDevice": function () { }
          },
          "userActivation": {
            "hasBeenActive": {},
            "isActive": {}
          },
          "userAgent": {},
          "vendor": {},
          "vendorSub": {},
          "vibrate": function () { },
          "webkitGetUserMedia": function () { },
          "webkitPersistentStorage": {
            "queryUsageAndQuota": function () { },
            "requestQuota": function () { }
          },
          "webkitTemporaryStorage": {
            "queryUsageAndQuota": function () { },
            "requestQuota": function () { }
          },
          "xr": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "isSessionSupported": function () { },
            "ondevicechange": {},
            "removeEventListener": function () { },
            "requestSession": function () { },
            "supportsSession": function () { }
          }
        },
        "close": function () { },
        "closed": {},
        "confirm": function () { },
        "createImageBitmap": function () { },
        "createReactClass": function () { },
        "crypto": {
          "getRandomValues": function () { },
          "subtle": {
            "decrypt": function () { },
            "deriveBits": function () { },
            "deriveKey": function () { },
            "digest": function () { },
            "encrypt": function () { },
            "exportKey": function () { },
            "generateKey": function () { },
            "importKey": function () { },
            "sign": function () { },
            "unwrapKey": function () { },
            "verify": function () { },
            "wrapKey": function () { }
          }
        },
        "customElements": {
          "define": function () { },
          "get": function () { },
          "upgrade": function () { },
          "whenDefined": function () { }
        },
        "defaultStatus": {},
        "defaultstatus": {},
        "devicePixelRatio": {},
        "dispatchEvent": function () { },
        "document": {},
        "external": {
          "AddSearchProvider": function () { },
          "IsSearchProviderInstalled": function () { }
        },
        "fetch": function () { },
        "find": function () { },
        "focus": function () { },
        "frameElement": {},
        "frames": {},
        "getComputedStyle": function () { },
        "getSelection": function () { },
        "history": {
          "back": function () { },
          "forward": function () { },
          "go": function () { },
          "length": {},
          "pushState": function () { },
          "replaceState": function () { },
          "scrollRestoration": {},
          "state": {}
        },
        "indexedDB": {
          "cmp": function () { },
          "databases": function () { },
          "deleteDatabase": function () { },
          "open": function () { }
        },
        "innerHeight": {},
        "innerWidth": {},
        "isSecureContext": {},
        "javascript_externs_generator": {
          "ui": {
            "core": {
              "init": function () { },
              "re_render": function () { }
            }
          }
        },
        "js_beautify": function () { },
        "length": {},
        "localStorage": {
          "clear": function () { },
          "getItem": function () { },
          "key": function () { },
          "length": {},
          "removeItem": function () { },
          "setItem": function () { }
        },
        "location": {
          "ancestorOrigins": {
            "contains": function () { },
            "item": function () { },
            "length": {}
          },
          "assign": function () { },
          "fragmentDirective": {},
          "hash": {},
          "host": {},
          "hostname": {},
          "href": {},
          "origin": {},
          "pathname": {},
          "port": {},
          "protocol": {},
          "reload": function () { },
          "replace": function () { },
          "search": {},
          "toString": function () { }
        },
        "locationbar": {
          "visible": {}
        },
        "matchMedia": function () { },
        "menubar": {
          "visible": {}
        },
        "moveBy": function () { },
        "moveTo": function () { },
        "name": {},
        "navigator": {
          "appCodeName": {},
          "appName": {},
          "appVersion": {},
          "bluetooth": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "getAvailability": function () { },
            "removeEventListener": function () { },
            "requestDevice": function () { }
          },
          "clearAppBadge": function () { },
          "clipboard": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "read": function () { },
            "readText": function () { },
            "removeEventListener": function () { },
            "write": function () { },
            "writeText": function () { }
          },
          "connection": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "downlink": {},
            "effectiveType": {},
            "onchange": {},
            "removeEventListener": function () { },
            "rtt": {},
            "saveData": {}
          },
          "cookieEnabled": {},
          "credentials": {
            "create": function () { },
            "get": function () { },
            "preventSilentAccess": function () { },
            "store": function () { }
          },
          "deviceMemory": {},
          "doNotTrack": {},
          "geolocation": {
            "clearWatch": function () { },
            "getCurrentPosition": function () { },
            "watchPosition": function () { }
          },
          "getBattery": function () { },
          "getGamepads": function () { },
          "getInstalledRelatedApps": function () { },
          "getUserMedia": function () { },
          "hardwareConcurrency": {},
          "javaEnabled": function () { },
          "keyboard": {
            "getLayoutMap": function () { },
            "lock": function () { },
            "unlock": function () { }
          },
          "language": {},
          "languages": {},
          "locks": {
            "query": function () { },
            "request": function () { }
          },
          "maxTouchPoints": {},
          "mediaCapabilities": {
            "decodingInfo": function () { }
          },
          "mediaDevices": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "enumerateDevices": function () { },
            "getDisplayMedia": function () { },
            "getSupportedConstraints": function () { },
            "getUserMedia": function () { },
            "ondevicechange": {},
            "removeEventListener": function () { }
          },
          "mediaSession": {
            "metadata": {},
            "playbackState": {},
            "setActionHandler": function () { },
            "setPositionState": function () { }
          },
          "mimeTypes": {
            "0": {
              "description": {},
              "enabledPlugin": {
                "0": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "description": {},
                "filename": {},
                "item": function () { },
                "length": {},
                "name": {},
                "namedItem": function () { }
              },
              "suffixes": {},
              "type": {}
            },
            "1": {
              "description": {},
              "enabledPlugin": {
                "0": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "description": {},
                "filename": {},
                "item": function () { },
                "length": {},
                "name": {},
                "namedItem": function () { }
              },
              "suffixes": {},
              "type": {}
            },
            "2": {
              "description": {},
              "enabledPlugin": {
                "0": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "1": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "description": {},
                "filename": {},
                "item": function () { },
                "length": {},
                "name": {},
                "namedItem": function () { }
              },
              "suffixes": {},
              "type": {}
            },
            "3": {
              "description": {},
              "enabledPlugin": {
                "0": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "1": {
                  "description": {},
                  "enabledPlugin": {},
                  "suffixes": {},
                  "type": {}
                },
                "description": {},
                "filename": {},
                "item": function () { },
                "length": {},
                "name": {},
                "namedItem": function () { }
              },
              "suffixes": {},
              "type": {}
            },
            "item": function () { },
            "length": {},
            "namedItem": function () { }
          },
          "onLine": {},
          "permissions": {
            "query": function () { }
          },
          "platform": {},
          "plugins": {
            "0": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "1": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "2": {
              "0": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "1": {
                "description": {},
                "enabledPlugin": {},
                "suffixes": {},
                "type": {}
              },
              "description": {},
              "filename": {},
              "item": function () { },
              "length": {},
              "name": {},
              "namedItem": function () { }
            },
            "item": function () { },
            "length": {},
            "namedItem": function () { },
            "refresh": function () { }
          },
          "presentation": {
            "defaultRequest": {},
            "receiver": {}
          },
          "product": {},
          "productSub": {},
          "registerProtocolHandler": function () { },
          "requestMIDIAccess": function () { },
          "requestMediaKeySystemAccess": function () { },
          "sendBeacon": function () { },
          "serviceWorker": {
            "addEventListener": function () { },
            "controller": {},
            "dispatchEvent": function () { },
            "getRegistration": function () { },
            "getRegistrations": function () { },
            "oncontrollerchange": {},
            "onmessage": {},
            "onmessageerror": {},
            "ready": {},
            "register": function () { },
            "removeEventListener": function () { },
            "startMessages": function () { }
          },
          "setAppBadge": function () { },
          "storage": {
            "estimate": function () { },
            "persist": function () { },
            "persisted": function () { }
          },
          "unregisterProtocolHandler": function () { },
          "usb": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "getDevices": function () { },
            "onconnect": {},
            "ondisconnect": {},
            "removeEventListener": function () { },
            "requestDevice": function () { }
          },
          "userActivation": {
            "hasBeenActive": {},
            "isActive": {}
          },
          "userAgent": {},
          "vendor": {},
          "vendorSub": {},
          "vibrate": function () { },
          "webkitGetUserMedia": function () { },
          "webkitPersistentStorage": {
            "queryUsageAndQuota": function () { },
            "requestQuota": function () { }
          },
          "webkitTemporaryStorage": {
            "queryUsageAndQuota": function () { },
            "requestQuota": function () { }
          },
          "xr": {
            "addEventListener": function () { },
            "dispatchEvent": function () { },
            "isSessionSupported": function () { },
            "ondevicechange": {},
            "removeEventListener": function () { },
            "requestSession": function () { },
            "supportsSession": function () { }
          }
        },
        "onabort": {},
        "onafterprint": {},
        "onanimationend": {},
        "onanimationiteration": {},
        "onanimationstart": {},
        "onappinstalled": {},
        "onauxclick": {},
        "onbeforeinstallprompt": {},
        "onbeforeprint": {},
        "onbeforeunload": {},
        "onblur": {},
        "oncancel": {},
        "oncanplay": {},
        "oncanplaythrough": {},
        "onchange": {},
        "onclick": {},
        "onclose": {},
        "oncontextmenu": {},
        "oncuechange": {},
        "ondblclick": {},
        "ondevicemotion": {},
        "ondeviceorientation": {},
        "ondeviceorientationabsolute": {},
        "ondrag": {},
        "ondragend": {},
        "ondragenter": {},
        "ondragleave": {},
        "ondragover": {},
        "ondragstart": {},
        "ondrop": {},
        "ondurationchange": {},
        "onemptied": {},
        "onended": {},
        "onerror": {},
        "onfocus": {},
        "onformdata": {},
        "ongotpointercapture": {},
        "onhashchange": {},
        "oninput": {},
        "oninvalid": {},
        "onkeydown": {},
        "onkeypress": {},
        "onkeyup": {},
        "onlanguagechange": {},
        "onload": {},
        "onloadeddata": {},
        "onloadedmetadata": {},
        "onloadstart": {},
        "onlostpointercapture": {},
        "onmessage": {},
        "onmessageerror": {},
        "onmousedown": {},
        "onmouseenter": {},
        "onmouseleave": {},
        "onmousemove": {},
        "onmouseout": {},
        "onmouseover": {},
        "onmouseup": {},
        "onmousewheel": {},
        "onoffline": {},
        "ononline": {},
        "onpagehide": {},
        "onpageshow": {},
        "onpause": {},
        "onplay": {},
        "onplaying": {},
        "onpointercancel": {},
        "onpointerdown": {},
        "onpointerenter": {},
        "onpointerleave": {},
        "onpointermove": {},
        "onpointerout": {},
        "onpointerover": {},
        "onpointerrawupdate": {},
        "onpointerup": {},
        "onpopstate": {},
        "onprogress": {},
        "onratechange": {},
        "onrejectionhandled": {},
        "onreset": {},
        "onresize": {},
        "onscroll": {},
        "onsearch": {},
        "onseeked": {},
        "onseeking": {},
        "onselect": {},
        "onselectionchange": {},
        "onselectstart": {},
        "onstalled": {},
        "onstorage": {},
        "onsubmit": {},
        "onsuspend": {},
        "ontimeupdate": {},
        "ontoggle": {},
        "ontransitionend": {},
        "onunhandledrejection": {},
        "onunload": {},
        "onvolumechange": {},
        "onwaiting": {},
        "onwebkitanimationend": {},
        "onwebkitanimationiteration": {},
        "onwebkitanimationstart": {},
        "onwebkittransitionend": {},
        "onwheel": {},
        "open": function () { },
        "openDatabase": function () { },
        "opener": {},
        "origin": {},
        "outerHeight": {},
        "outerWidth": {},
        "pageXOffset": {},
        "pageYOffset": {},
        "parent": {},
        "performance": {
          "addEventListener": function () { },
          "clearMarks": function () { },
          "clearMeasures": function () { },
          "clearResourceTimings": function () { },
          "dispatchEvent": function () { },
          "getEntries": function () { },
          "getEntriesByName": function () { },
          "getEntriesByType": function () { },
          "mark": function () { },
          "measure": function () { },
          "memory": {
            "jsHeapSizeLimit": {},
            "totalJSHeapSize": {},
            "usedJSHeapSize": {}
          },
          "navigation": {
            "TYPE_BACK_FORWARD": {},
            "TYPE_NAVIGATE": {},
            "TYPE_RELOAD": {},
            "TYPE_RESERVED": {},
            "redirectCount": {},
            "toJSON": function () { },
            "type": {}
          },
          "now": function () { },
          "onresourcetimingbufferfull": {},
          "removeEventListener": function () { },
          "setResourceTimingBufferSize": function () { },
          "timeOrigin": {},
          "timing": {
            "connectEnd": {},
            "connectStart": {},
            "domComplete": {},
            "domContentLoadedEventEnd": {},
            "domContentLoadedEventStart": {},
            "domInteractive": {},
            "domLoading": {},
            "domainLookupEnd": {},
            "domainLookupStart": {},
            "fetchStart": {},
            "loadEventEnd": {},
            "loadEventStart": {},
            "navigationStart": {},
            "redirectEnd": {},
            "redirectStart": {},
            "requestStart": {},
            "responseEnd": {},
            "responseStart": {},
            "secureConnectionStart": {},
            "toJSON": function () { },
            "unloadEventEnd": {},
            "unloadEventStart": {}
          },
          "toJSON": function () { }
        },
        "personalbar": {
          "visible": {}
        },
        "postMessage": function () { },
        "print": function () { },
        "prompt": function () { },
        "queueMicrotask": function () { },
        "reagent": {
          "core": {
            "force_update_all": function () { }
          }
        },
        "releaseEvents": function () { },
        "removeEventListener": function () { },
        "requestAnimationFrame": function () { },
        "requestIdleCallback": function () { },
        "resizeBy": function () { },
        "resizeTo": function () { },
        "screen": {
          "availHeight": {},
          "availLeft": {},
          "availTop": {},
          "availWidth": {},
          "colorDepth": {},
          "height": {},
          "orientation": {
            "addEventListener": function () { },
            "angle": {},
            "dispatchEvent": function () { },
            "lock": function () { },
            "onchange": {},
            "removeEventListener": function () { },
            "type": {},
            "unlock": function () { }
          },
          "pixelDepth": {},
          "width": {}
        },
        "screenLeft": {},
        "screenTop": {},
        "screenX": {},
        "screenY": {},
        "scroll": function () { },
        "scrollBy": function () { },
        "scrollTo": function () { },
        "scrollX": {},
        "scrollY": {},
        "scrollbars": {
          "visible": {}
        },
        "self": {},
        "sessionStorage": {
          "clear": function () { },
          "getItem": function () { },
          "key": function () { },
          "length": {},
          "removeItem": function () { },
          "setItem": function () { }
        },
        "setInterval": function () { },
        "setTimeout": function () { },
        "speechSynthesis": {
          "addEventListener": function () { },
          "cancel": function () { },
          "dispatchEvent": function () { },
          "getVoices": function () { },
          "onvoiceschanged": {},
          "pause": function () { },
          "paused": {},
          "pending": {},
          "removeEventListener": function () { },
          "resume": function () { },
          "speak": function () { },
          "speaking": {}
        },
        "status": {},
        "statusbar": {
          "visible": {}
        },
        "stop": function () { },
        "styleMedia": {
          "matchMedium": function () { },
          "type": {}
        },
        "toolbar": {
          "visible": {}
        },
        "top": {},
        "trustedTypes": {
          "createPolicy": function () { },
          "defaultPolicy": {},
          "emptyHTML": {
            "toString": function () { }
          },
          "emptyScript": {
            "toString": function () { }
          },
          "getAttributeType": function () { },
          "getPropertyType": function () { },
          "getTypeMapping": function () { },
          "isHTML": function () { },
          "isScript": function () { },
          "isScriptURL": function () { }
        },
        "visualViewport": {
          "addEventListener": function () { },
          "dispatchEvent": function () { },
          "height": {},
          "offsetLeft": {},
          "offsetTop": {},
          "onresize": {},
          "onscroll": {},
          "pageLeft": {},
          "pageTop": {},
          "removeEventListener": function () { },
          "scale": {},
          "width": {}
        },
        "webkitCancelAnimationFrame": function () { },
        "webkitRequestAnimationFrame": function () { },
        "webkitRequestFileSystem": function () { },
        "webkitResolveLocalFileSystemURL": function () { },
        "webkitStorageInfo": {
          "PERSISTENT": {},
          "TEMPORARY": {},
          "queryUsageAndQuota": function () { },
          "requestQuota": function () { }
        },
        "window": {}
      },
      "trustedTypes": {
        "createPolicy": function () { },
        "defaultPolicy": {},
        "emptyHTML": {
          "toString": function () { }
        },
        "emptyScript": {
          "toString": function () { }
        },
        "getAttributeType": function () { },
        "getPropertyType": function () { },
        "getTypeMapping": function () { },
        "isHTML": function () { },
        "isScript": function () { },
        "isScriptURL": function () { }
      },
      "visualViewport": {
        "addEventListener": function () { },
        "dispatchEvent": function () { },
        "height": {},
        "offsetLeft": {},
        "offsetTop": {},
        "onresize": {},
        "onscroll": {},
        "pageLeft": {},
        "pageTop": {},
        "removeEventListener": function () { },
        "scale": {},
        "width": {}
      },
      "webkitCancelAnimationFrame": function () { },
      "webkitRequestAnimationFrame": function () { },
      "webkitRequestFileSystem": function () { },
      "webkitResolveLocalFileSystemURL": function () { },
      "webkitStorageInfo": {
        "PERSISTENT": {},
        "TEMPORARY": {},
        "queryUsageAndQuota": function () { },
        "requestQuota": function () { }
      },
      "window": {}
    },
    "platform": {
      "decode": function () { },
      "encode": function () { },
      "fetch": {
        "toString": function () { }
      },
      "now": function () { }
    },
    "platformName": {},
    "populateURLFlags": function () { },
    "registerFlag": function () { },
    "reset": function () { },
    "set": function () { },
    "setFlags": function () { },
    "setPlatform": function () { },
    "urlFlags": {}
  },
  "EarlyStopping": function () { },
  "Elu": {},
  "EluGrad": {},
  "Environment": function () { },
  "Equal": {},
  "Fill": {},
  "FloorDiv": {},
  "FromPixels": {},
  "FusedBatchNorm": {},
  "GatherNd": {},
  "GraphModel": function () { },
  "Greater": {},
  "GreaterEqual": {},
  "History": function () { },
  "Identity": {},
  "Imag": {},
  "InputSpec": function () { },
  "KernelBackend": function () { },
  "LRN": {},
  "LRNBackprop": {},
  "LayerVariable": function () { },
  "LayersModel": {
    "className": {},
    "fromConfig": function () { },
    "nodeKey": function () { }
  },
  "Less": {},
  "LessEqual": {},
  "Max": {},
  "MaxPool": {},
  "MaxPool3D": {},
  "MaxPool3DBackprop": {},
  "MaxPoolBackprop": {},
  "MaxPoolWithArgmax": {},
  "Maximum": {},
  "Minimum": {},
  "Mod": {},
  "MomentumOptimizer": {
    "className": {},
    "fromConfig": function () { }
  },
  "Multiply": {},
  "NonMaxSuppressionV3": {},
  "NonMaxSuppressionV5": {},
  "NotEqual": {},
  "OneHot": {},
  "Optimizer": {
    "fromConfig": function () { }
  },
  "PadV2": {},
  "Pool": {},
  "Pow": {},
  "Prelu": {},
  "RMSPropOptimizer": {
    "className": {},
    "fromConfig": function () { }
  },
  "RNN": {
    "className": {},
    "fromConfig": function () { },
    "nodeKey": function () { }
  },
  "Rank": {
    "R0": {},
    "R1": {},
    "R2": {},
    "R3": {},
    "R4": {},
    "R5": {},
    "R6": {}
  },
  "Real": {},
  "Reduction": {
    "0": {},
    "1": {},
    "2": {},
    "3": {},
    "MEAN": {},
    "NONE": {},
    "SUM": {},
    "SUM_BY_NONZERO_WEIGHTS": {}
  },
  "Relu": {},
  "Relu6": {},
  "SGDOptimizer": {
    "className": {},
    "fromConfig": function () { }
  },
  "SelectV2": {},
  "Selu": {},
  "Sequential": {
    "className": {},
    "fromConfig": function () { },
    "nodeKey": function () { }
  },
  "SpaceToBatchND": {},
  "SplitV": {},
  "Square": {},
  "SquaredDifference": {},
  "Sub": {},
  "SymbolicTensor": function () { },
  "Tensor": function () { },
  "TensorBuffer": function () { },
  "Tile": {},
  "Transpose": {},
  "Variable": function () { },
  "abs": function () { },
  "acos": function () { },
  "acosh": function () { },
  "add": function () { },
  "addN": function () { },
  "addStrict": function () { },
  "all": function () { },
  "any": function () { },
  "argMax": function () { },
  "argMin": function () { },
  "asin": function () { },
  "asinh": function () { },
  "atan": function () { },
  "atan2": function () { },
  "atanh": function () { },
  "avgPool": function () { },
  "avgPool3d": function () { },
  "backend": function () { },
  "backend_util": {
    "ERF_A1": {},
    "ERF_A2": {},
    "ERF_A3": {},
    "ERF_A4": {},
    "ERF_A5": {},
    "ERF_P": {},
    "PARALLELIZE_THRESHOLD": {},
    "SELU_SCALE": {},
    "SELU_SCALEALPHA": {},
    "assertAndGetBroadcastShape": function () { },
    "assertAxesAreInnerMostDims": function () { },
    "assertParamsConsistent": function () { },
    "assignToTypedArray": function () { },
    "axesAreInnerMostDims": function () { },
    "calculateShapes": function () { },
    "castTensor": function () { },
    "combineLocations": function () { },
    "complexWithEvenIndex": function () { },
    "complexWithOddIndex": function () { },
    "computeConv2DInfo": function () { },
    "computeConv3DInfo": function () { },
    "computeDefaultPad": function () { },
    "computeOptimalWindowSize": function () { },
    "computeOutAndReduceShapes": function () { },
    "computeOutShape": function () { },
    "computePool2DInfo": function () { },
    "computePool3DInfo": function () { },
    "convertConv2DDataFormat": function () { },
    "eitherStridesOrDilationsAreOne": function () { },
    "expandShapeToKeepDim": function () { },
    "exponent": function () { },
    "exponents": function () { },
    "getAxesPermutation": function () { },
    "getBroadcastDims": function () { },
    "getComplexWithIndex": function () { },
    "getInnerMostAxes": function () { },
    "getPermuted": function () { },
    "getReductionAxes": function () { },
    "getReshaped": function () { },
    "getReshapedPermuted": function () { },
    "getSliceBeginCoords": function () { },
    "getSliceSize": function () { },
    "getUndoAxesPermutation": function () { },
    "linspaceImpl": function () { },
    "log": function () { },
    "mergeRealAndImagArrays": function () { },
    "nonMaxSuppressionV3": function () { },
    "nonMaxSuppressionV5": function () { },
    "prepareAndValidate": function () { },
    "reshapeTensor": function () { },
    "segment_util": {
      "collectGatherOpShapeInfo": function () { },
      "computeOutShape": function () { },
      "segOpComputeOptimalWindowSize": function () { }
    },
    "shouldFuse": function () { },
    "splitRealAndImagArrays": function () { },
    "tupleValuesAreOne": function () { },
    "upcastType": function () { },
    "validateInput": function () { },
    "validateUpdateShape": function () { },
    "warn": function () { }
  },
  "basicLSTMCell": function () { },
  "batchNorm": function () { },
  "batchNorm2d": function () { },
  "batchNorm3d": function () { },
  "batchNorm4d": function () { },
  "batchToSpaceND": function () { },
  "booleanMaskAsync": function () { },
  "broadcastTo": function () { },
  "browser": {
    "fromPixels": function () { },
    "toPixels": function () { }
  },
  "buffer": function () { },
  "callbacks": {
    "earlyStopping": function () { }
  },
  "cast": function () { },
  "ceil": function () { },
  "clipByValue": function () { },
  "clone": function () { },
  "complex": function () { },
  "concat": function () { },
  "concat1d": function () { },
  "concat2d": function () { },
  "concat3d": function () { },
  "concat4d": function () { },
  "constraints": {
    "maxNorm": function () { },
    "minMaxNorm": function () { },
    "nonNeg": function () { },
    "unitNorm": function () { }
  },
  "conv1d": function () { },
  "conv2d": function () { },
  "conv2dTranspose": function () { },
  "conv3d": function () { },
  "conv3dTranspose": function () { },
  "cos": function () { },
  "cosh": function () { },
  "cumsum": function () { },
  "customGrad": function () { },
  "data": {
    "CSVDataset": {
      "MAX_BUFFER_SIZE": {}
    },
    "Dataset": {
      "MAX_BUFFER_SIZE": {}
    },
    "FileDataSource": function () { },
    "TextLineDataset": {
      "MAX_BUFFER_SIZE": {}
    },
    "URLDataSource": function () { },
    "array": function () { },
    "csv": function () { },
    "func": function () { },
    "generator": function () { },
    "microphone": function () { },
    "version_data": {},
    "webcam": function () { },
    "zip": function () { }
  },
  "deprecationWarn": function () { },
  "depthToSpace": function () { },
  "depthwiseConv2d": function () { },
  "deregisterOp": function () { },
  "device_util": {
    "isBrowser": function () { },
    "isMobile": function () { }
  },
  "diag": function () { },
  "disableDeprecationWarnings": function () { },
  "dispose": function () { },
  "disposeVariables": function () { },
  "div": function () { },
  "divNoNan": function () { },
  "divStrict": function () { },
  "dot": function () { },
  "dropout": function () { },
  "elu": function () { },
  "enableDebugMode": function () { },
  "enableProdMode": function () { },
  "engine": function () { },
  "env": function () { },
  "equal": function () { },
  "equalStrict": function () { },
  "erf": function () { },
  "exp": function () { },
  "expandDims": function () { },
  "expm1": function () { },
  "eye": function () { },
  "fft": function () { },
  "fill": function () { },
  "findBackend": function () { },
  "findBackendFactory": function () { },
  "floor": function () { },
  "floorDiv": function () { },
  "frame": function () { },
  "fused": {
    "conv2d": function () { },
    "depthwiseConv2d": function () { },
    "matMul": function () { }
  },
  "gather": function () { },
  "gatherND": function () { },
  "gather_util": {
    "prepareAndValidate": function () { }
  },
  "getBackend": function () { },
  "getGradient": function () { },
  "getKernel": function () { },
  "getKernelsForBackend": function () { },
  "grad": function () { },
  "grads": function () { },
  "greater": function () { },
  "greaterEqual": function () { },
  "greaterEqualStrict": function () { },
  "greaterStrict": function () { },
  "hammingWindow": function () { },
  "hannWindow": function () { },
  "ifft": function () { },
  "imag": function () { },
  "image": {
    "cropAndResize": function () { },
    "nonMaxSuppression": function () { },
    "nonMaxSuppressionAsync": function () { },
    "nonMaxSuppressionWithScore": function () { },
    "nonMaxSuppressionWithScoreAsync": function () { },
    "resizeBilinear": function () { },
    "resizeNearestNeighbor": function () { }
  },
  "inTopKAsync": function () { },
  "initializers": {
    "constant": function () { },
    "glorotNormal": function () { },
    "glorotUniform": function () { },
    "heNormal": function () { },
    "heUniform": function () { },
    "identity": function () { },
    "leCunNormal": function () { },
    "leCunUniform": function () { },
    "ones": function () { },
    "orthogonal": function () { },
    "randomNormal": function () { },
    "randomUniform": function () { },
    "truncatedNormal": function () { },
    "varianceScaling": function () { },
    "zeros": function () { }
  },
  "input": function () { },
  "io": {
    "browserFiles": function () { },
    "browserHTTPRequest": function () { },
    "concatenateArrayBuffers": function () { },
    "copyModel": function () { },
    "decodeWeights": function () { },
    "encodeWeights": function () { },
    "fromMemory": function () { },
    "getLoadHandlers": function () { },
    "getModelArtifactsInfoForJSON": function () { },
    "getSaveHandlers": function () { },
    "http": function () { },
    "isHTTPScheme": function () { },
    "listModels": function () { },
    "loadWeights": function () { },
    "moveModel": function () { },
    "registerLoadRouter": function () { },
    "registerSaveRouter": function () { },
    "removeModel": function () { },
    "weightsLoaderFactory": function () { },
    "withSaveHandler": function () { }
  },
  "irfft": function () { },
  "isFinite": function () { },
  "isInf": function () { },
  "isNaN": function () { },
  "keep": function () { },
  "kernel_impls": {
    "nonMaxSuppressionV3": function () { },
    "nonMaxSuppressionV5": function () { },
    "split": function () { },
    "tile": function () { },
    "topkImpl": function () { },
    "whereImpl": function () { }
  },
  "layers": {
    "Layer": {
      "fromConfig": function () { },
      "nodeKey": function () { }
    },
    "RNN": {
      "className": {},
      "fromConfig": function () { },
      "nodeKey": function () { }
    },
    "RNNCell": {
      "fromConfig": function () { },
      "nodeKey": function () { }
    },
    "activation": function () { },
    "add": function () { },
    "alphaDropout": function () { },
    "average": function () { },
    "averagePooling1d": function () { },
    "averagePooling2d": function () { },
    "averagePooling3d": function () { },
    "avgPool1d": function () { },
    "avgPool2d": function () { },
    "avgPool3d": function () { },
    "avgPooling1d": function () { },
    "avgPooling2d": function () { },
    "avgPooling3d": function () { },
    "batchNormalization": function () { },
    "bidirectional": function () { },
    "concatenate": function () { },
    "conv1d": function () { },
    "conv2d": function () { },
    "conv2dTranspose": function () { },
    "conv3d": function () { },
    "cropping2D": function () { },
    "dense": function () { },
    "depthwiseConv2d": function () { },
    "dot": function () { },
    "dropout": function () { },
    "elu": function () { },
    "embedding": function () { },
    "flatten": function () { },
    "gaussianDropout": function () { },
    "gaussianNoise": function () { },
    "globalAveragePooling1d": function () { },
    "globalAveragePooling2d": function () { },
    "globalMaxPool1d": function () { },
    "globalMaxPool2d": function () { },
    "globalMaxPooling1d": function () { },
    "globalMaxPooling2d": function () { },
    "gru": function () { },
    "gruCell": function () { },
    "input": function () { },
    "inputLayer": function () { },
    "layerNormalization": function () { },
    "leakyReLU": function () { },
    "lstm": function () { },
    "lstmCell": function () { },
    "masking": function () { },
    "maxPool1d": function () { },
    "maxPool2d": function () { },
    "maxPooling1d": function () { },
    "maxPooling2d": function () { },
    "maxPooling3d": function () { },
    "maximum": function () { },
    "minimum": function () { },
    "multiply": function () { },
    "permute": function () { },
    "prelu": function () { },
    "reLU": function () { },
    "repeatVector": function () { },
    "reshape": function () { },
    "rnn": function () { },
    "separableConv2d": function () { },
    "simpleRNN": function () { },
    "simpleRNNCell": function () { },
    "softmax": function () { },
    "spatialDropout1d": function () { },
    "stackedRNNCells": function () { },
    "thresholdedReLU": function () { },
    "timeDistributed": function () { },
    "upSampling2d": function () { },
    "zeroPadding2d": function () { }
  },
  "leakyRelu": function () { },
  "less": function () { },
  "lessEqual": function () { },
  "lessEqualStrict": function () { },
  "lessStrict": function () { },
  "linalg": {
    "bandPart": function () { },
    "gramSchmidt": function () { },
    "qr": function () { }
  },
  "linspace": function () { },
  "loadGraphModel": function () { },
  "loadLayersModel": function () { },
  "localResponseNormalization": function () { },
  "log": function () { },
  "log1p": function () { },
  "logSigmoid": function () { },
  "logSoftmax": function () { },
  "logSumExp": function () { },
  "logicalAnd": function () { },
  "logicalNot": function () { },
  "logicalOr": function () { },
  "logicalXor": function () { },
  "losses": {
    "Reduction": {
      "0": {},
      "1": {},
      "2": {},
      "3": {},
      "MEAN": {},
      "NONE": {},
      "SUM": {},
      "SUM_BY_NONZERO_WEIGHTS": {}
    },
    "absoluteDifference": function () { },
    "computeWeightedLoss": function () { },
    "cosineDistance": function () { },
    "hingeLoss": function () { },
    "huberLoss": function () { },
    "logLoss": function () { },
    "meanSquaredError": function () { },
    "sigmoidCrossEntropy": function () { },
    "softmaxCrossEntropy": function () { }
  },
  "matMul": function () { },
  "math": {
    "confusionMatrix": function () { }
  },
  "max": function () { },
  "maxPool": function () { },
  "maxPool3d": function () { },
  "maxPoolWithArgmax": function () { },
  "maximum": function () { },
  "maximumStrict": function () { },
  "mean": function () { },
  "memory": function () { },
  "metrics": {
    "MAPE": function () { },
    "MSE": function () { },
    "binaryAccuracy": function () { },
    "binaryCrossentropy": function () { },
    "categoricalAccuracy": function () { },
    "categoricalCrossentropy": function () { },
    "cosineProximity": function () { },
    "mape": function () { },
    "meanAbsoluteError": function () { },
    "meanAbsolutePercentageError": function () { },
    "meanSquaredError": function () { },
    "mse": function () { },
    "precision": function () { },
    "recall": function () { },
    "sparseCategoricalAccuracy": function () { }
  },
  "min": function () { },
  "minimum": function () { },
  "minimumStrict": function () { },
  "mod": function () { },
  "modStrict": function () { },
  "model": function () { },
  "models": {
    "modelFromJSON": function () { }
  },
  "moments": function () { },
  "movingAverage": function () { },
  "mul": function () { },
  "mulStrict": function () { },
  "multiRNNCell": function () { },
  "multinomial": function () { },
  "neg": function () { },
  "nextFrame": function () { },
  "norm": function () { },
  "notEqual": function () { },
  "notEqualStrict": function () { },
  "oneHot": function () { },
  "ones": function () { },
  "onesLike": function () { },
  "op": function () { },
  "outerProduct": function () { },
  "pad": function () { },
  "pad1d": function () { },
  "pad2d": function () { },
  "pad3d": function () { },
  "pad4d": function () { },
  "pool": function () { },
  "pow": function () { },
  "powStrict": function () { },
  "prelu": function () { },
  "print": function () { },
  "prod": function () { },
  "profile": function () { },
  "rand": function () { },
  "randomGamma": function () { },
  "randomNormal": function () { },
  "randomUniform": function () { },
  "range": function () { },
  "ready": function () { },
  "real": function () { },
  "reciprocal": function () { },
  "registerBackend": function () { },
  "registerCallbackConstructor": function () { },
  "registerGradient": function () { },
  "registerKernel": function () { },
  "registerOp": function () { },
  "regularizers": {
    "l1": function () { },
    "l1l2": function () { },
    "l2": function () { }
  },
  "relu": function () { },
  "relu6": function () { },
  "removeBackend": function () { },
  "reshape": function () { },
  "reverse": function () { },
  "reverse1d": function () { },
  "reverse2d": function () { },
  "reverse3d": function () { },
  "reverse4d": function () { },
  "rfft": function () { },
  "round": function () { },
  "rsqrt": function () { },
  "scalar": function () { },
  "scatterND": function () { },
  "scatter_util": {
    "calculateShapes": function () { },
    "validateInput": function () { },
    "validateUpdateShape": function () { }
  },
  "selu": function () { },
  "separableConv2d": function () { },
  "sequential": function () { },
  "serialization": {
    "Serializable": {
      "fromConfig": function () { }
    },
    "SerializationMap": {
      "getMap": function () { },
      "instance": {
        "classNameMap": {
          "Activation": {},
          "Adadelta": {},
          "Adagrad": {},
          "Adam": {},
          "Adamax": {},
          "Add": {},
          "AlphaDropout": {},
          "Average": {},
          "AveragePooling1D": {},
          "AveragePooling2D": {},
          "AveragePooling3D": {},
          "BatchNormalization": {},
          "Bidirectional": {},
          "Concatenate": {},
          "Constant": {},
          "Conv1D": {},
          "Conv2D": {},
          "Conv2DTranspose": {},
          "Conv3D": {},
          "Cropping2D": {},
          "Dense": {},
          "DepthwiseConv2D": {},
          "Dot": {},
          "Dropout": {},
          "ELU": {},
          "Embedding": {},
          "Flatten": {},
          "GRU": {},
          "GRUCell": {},
          "GaussianDropout": {},
          "GaussianNoise": {},
          "GlobalAveragePooling1D": {},
          "GlobalAveragePooling2D": {},
          "GlobalMaxPooling1D": {},
          "GlobalMaxPooling2D": {},
          "GlorotNormal": {},
          "GlorotUniform": {},
          "HeNormal": {},
          "HeUniform": {},
          "Identity": {},
          "InputLayer": {},
          "L1L2": {},
          "LSTM": {},
          "LSTMCell": {},
          "LayerNormalization": {},
          "LeCunNormal": {},
          "LeakyReLU": {},
          "Masking": {},
          "MaxNorm": {},
          "MaxPooling1D": {},
          "MaxPooling2D": {},
          "MaxPooling3D": {},
          "Maximum": {},
          "MinMaxNorm": {},
          "Minimum": {},
          "Model": {},
          "Momentum": {},
          "Multiply": {},
          "NonNeg": {},
          "Ones": {},
          "Orthogonal": {},
          "PReLU": {},
          "Permute": {},
          "RMSProp": {},
          "RNN": {},
          "RandomNormal": {},
          "RandomUniform": {},
          "ReLU": {},
          "RepeatVector": {},
          "Reshape": {},
          "SGD": {},
          "SeparableConv2D": {},
          "Sequential": {},
          "SimpleRNN": {},
          "SimpleRNNCell": {},
          "Softmax": {},
          "SpatialDropout1D": {},
          "StackedRNNCells": {},
          "ThresholdedReLU": {},
          "TimeDistributed": {},
          "TruncatedNormal": {},
          "UnitNorm": {},
          "UpSampling2D": {},
          "VarianceScaling": {},
          "ZeroPadding2D": {},
          "Zeros": {},
          "elu": {},
          "hardSigmoid": {},
          "linear": {},
          "logSoftmax": {},
          "relu": {},
          "relu6": {},
          "selu": {},
          "sigmoid": {},
          "softmax": {},
          "softplus": {},
          "softsign": {},
          "tanh": {}
        }
      },
      "register": function () { }
    },
    "registerClass": function () { }
  },
  "setBackend": function () { },
  "setPlatform": function () { },
  "setdiff1dAsync": function () { },
  "sigmoid": function () { },
  "sign": function () { },
  "signal": {
    "frame": function () { },
    "hammingWindow": function () { },
    "hannWindow": function () { },
    "stft": function () { }
  },
  "sin": function () { },
  "sinh": function () { },
  "slice": function () { },
  "slice1d": function () { },
  "slice2d": function () { },
  "slice3d": function () { },
  "slice4d": function () { },
  "slice_util": {
    "assertParamsValid": function () { },
    "computeFlatOffset": function () { },
    "computeOutShape": function () { },
    "isSliceContinous": function () { },
    "maskToAxes": function () { },
    "startForAxis": function () { },
    "startIndicesWithElidedDims": function () { },
    "stopForAxis": function () { },
    "stopIndicesWithElidedDims": function () { },
    "stridesForAxis": function () { },
    "stridesWithElidedDims": function () { }
  },
  "softmax": function () { },
  "softplus": function () { },
  "spaceToBatchND": function () { },
  "sparseToDense": function () { },
  "spectral": {
    "fft": function () { },
    "ifft": function () { },
    "irfft": function () { },
    "rfft": function () { }
  },
  "split": function () { },
  "sqrt": function () { },
  "square": function () { },
  "squaredDifference": function () { },
  "squaredDifferenceStrict": function () { },
  "squeeze": function () { },
  "stack": function () { },
  "step": function () { },
  "stft": function () { },
  "stridedSlice": function () { },
  "sub": function () { },
  "subStrict": function () { },
  "sum": function () { },
  "sumOutType": function () { },
  "tan": function () { },
  "tanh": function () { },
  "tensor": function () { },
  "tensor1d": function () { },
  "tensor2d": function () { },
  "tensor3d": function () { },
  "tensor4d": function () { },
  "tensor5d": function () { },
  "tensor6d": function () { },
  "tensor_util": {
    "assertTypesMatch": function () { },
    "getTensorsInContainer": function () { },
    "isTensorInList": function () { },
    "makeTypesMatch": function () { }
  },
  "test_util": {
    "TEST_EPSILON_FLOAT16": {},
    "expectArrayBuffersEqual": function () { },
    "expectArraysClose": function () { },
    "expectArraysEqual": function () { },
    "expectNumbersClose": function () { },
    "expectPromiseToFail": function () { },
    "expectValuesInRange": function () { },
    "testEpsilon": function () { }
  },
  "tidy": function () { },
  "tile": function () { },
  "time": function () { },
  "topk": function () { },
  "train": {
    "adadelta": function () { },
    "adagrad": function () { },
    "adam": function () { },
    "adamax": function () { },
    "momentum": function () { },
    "rmsprop": function () { },
    "sgd": function () { }
  },
  "transpose": function () { },
  "truncatedNormal": function () { },
  "unregisterGradient": function () { },
  "unregisterKernel": function () { },
  "unsortedSegmentSum": function () { },
  "unstack": function () { },
  "upcastType": function () { },
  "util": {
    "arraysEqual": function () { },
    "assert": function () { },
    "assertNonNegativeIntegerDimensions": function () { },
    "assertNonNull": function () { },
    "assertShapesMatch": function () { },
    "bytesFromStringArray": function () { },
    "bytesPerElement": function () { },
    "checkConversionForErrors": function () { },
    "clamp": function () { },
    "computeStrides": function () { },
    "createShuffledIndices": function () { },
    "decodeString": function () { },
    "distSquared": function () { },
    "encodeString": function () { },
    "fetch": function () { },
    "flatten": function () { },
    "getArrayFromDType": function () { },
    "getTypedArrayFromDType": function () { },
    "hasEncodingLoss": function () { },
    "indexToLoc": function () { },
    "inferDtype": function () { },
    "inferFromImplicitShape": function () { },
    "isBoolean": function () { },
    "isFunction": function () { },
    "isInt": function () { },
    "isNumber": function () { },
    "isScalarShape": function () { },
    "isString": function () { },
    "isTypedArray": function () { },
    "isValidDtype": function () { },
    "locToIndex": function () { },
    "makeOnesTypedArray": function () { },
    "makeZerosTypedArray": function () { },
    "nearestDivisor": function () { },
    "nearestLargerEven": function () { },
    "now": function () { },
    "parseAxisParam": function () { },
    "randUniform": function () { },
    "repeatedTry": function () { },
    "rightPad": function () { },
    "shuffle": function () { },
    "sizeFromShape": function () { },
    "sizeToSquarishShape": function () { },
    "squeezeShape": function () { },
    "sum": function () { },
    "tanh": function () { },
    "toNestedArray": function () { },
    "toTypedArray": function () { }
  },
  "valueAndGrad": function () { },
  "valueAndGrads": function () { },
  "variable": function () { },
  "variableGrads": function () { },
  "version": {
    "tfjs": {},
    "tfjs-backend-cpu": {},
    "tfjs-backend-webgl": {},
    "tfjs-converter": {},
    "tfjs-core": {},
    "tfjs-data": {},
    "tfjs-layers": {}
  },
  "version_converter": {},
  "version_core": {},
  "version_layers": {},
  "where": function () { },
  "whereAsync": function () { },
  "zeros": function () { },
  "zerosLike": function () { }
};
tf.AdadeltaOptimizer.prototype = {
  "applyGradients": function () { },
  "computeGradients": function () { },
  "constructor": function () { },
  "dispose": function () { },
  "extractIterations": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getWeights": function () { },
  "incrementIterations": function () { },
  "minimize": function () { },
  "saveIterations": function () { },
  "setWeights": function () { }
};
tf.AdagradOptimizer.prototype = {
  "applyGradients": function () { },
  "computeGradients": function () { },
  "constructor": function () { },
  "dispose": function () { },
  "extractIterations": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getWeights": function () { },
  "incrementIterations": function () { },
  "minimize": function () { },
  "saveIterations": function () { },
  "setWeights": function () { }
};
tf.AdamOptimizer.prototype = {
  "applyGradients": function () { },
  "computeGradients": function () { },
  "constructor": function () { },
  "dispose": function () { },
  "extractIterations": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getWeights": function () { },
  "incrementIterations": function () { },
  "minimize": function () { },
  "saveIterations": function () { },
  "setWeights": function () { }
};
tf.AdamaxOptimizer.prototype = {
  "applyGradients": function () { },
  "computeGradients": function () { },
  "constructor": function () { },
  "dispose": function () { },
  "extractIterations": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getWeights": function () { },
  "incrementIterations": function () { },
  "minimize": function () { },
  "saveIterations": function () { },
  "setWeights": function () { }
};
tf.Callback.prototype = {
  "constructor": function () { },
  "onBatchBegin": function () { },
  "onBatchEnd": function () { },
  "onEpochBegin": function () { },
  "onEpochEnd": function () { },
  "onTrainBegin": function () { },
  "onTrainEnd": function () { },
  "setModel": function () { },
  "setParams": function () { }
};
tf.CallbackList.prototype = {
  "append": function () { },
  "onBatchBegin": function () { },
  "onBatchEnd": function () { },
  "onEpochBegin": function () { },
  "onEpochEnd": function () { },
  "onTrainBegin": function () { },
  "onTrainEnd": function () { },
  "setModel": function () { },
  "setParams": function () { }
};
tf.CustomCallback.prototype = {
  "constructor": function () { },
  "maybeWait": function () { },
  "onBatchBegin": function () { },
  "onBatchEnd": function () { },
  "onEpochBegin": function () { },
  "onEpochEnd": function () { },
  "onTrainBegin": function () { },
  "onTrainEnd": function () { },
  "setModel": function () { },
  "setParams": function () { }
};
tf.DataStorage.prototype = {
  "delete": function () { },
  "get": function () { },
  "has": function () { },
  "numDataIds": function () { },
  "set": function () { }
};
tf.ENV.global.parent.React.Component.prototype = {
  "forceUpdate": function () { },
  "isReactComponent": function () { },
  "setState": function () { }
};
tf.ENV.global.parent.React.PureComponent.prototype = {
  "constructor": function () { },
  "forceUpdate": function () { },
  "isPureReactComponent": function () { },
  "isReactComponent": function () { },
  "setState": function () { }
};
tf.ENV.global.regeneratorRuntime.AsyncIterator.prototype = {
  "next": function () { },
  "return": function () { },
  "throw": function () { }
};
tf.ENV.global.tf.AdadeltaOptimizer.prototype = {
  "applyGradients": function () { },
  "computeGradients": function () { },
  "constructor": function () { },
  "dispose": function () { },
  "extractIterations": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getWeights": function () { },
  "incrementIterations": function () { },
  "minimize": function () { },
  "saveIterations": function () { },
  "setWeights": function () { }
};
tf.ENV.global.tf.AdagradOptimizer.prototype = {
  "applyGradients": function () { },
  "computeGradients": function () { },
  "constructor": function () { },
  "dispose": function () { },
  "extractIterations": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getWeights": function () { },
  "incrementIterations": function () { },
  "minimize": function () { },
  "saveIterations": function () { },
  "setWeights": function () { }
};
tf.ENV.global.tf.AdamOptimizer.prototype = {
  "applyGradients": function () { },
  "computeGradients": function () { },
  "constructor": function () { },
  "dispose": function () { },
  "extractIterations": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getWeights": function () { },
  "incrementIterations": function () { },
  "minimize": function () { },
  "saveIterations": function () { },
  "setWeights": function () { }
};
tf.ENV.global.tf.AdamaxOptimizer.prototype = {
  "applyGradients": function () { },
  "computeGradients": function () { },
  "constructor": function () { },
  "dispose": function () { },
  "extractIterations": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getWeights": function () { },
  "incrementIterations": function () { },
  "minimize": function () { },
  "saveIterations": function () { },
  "setWeights": function () { }
};
tf.ENV.global.tf.Callback.prototype = {
  "constructor": function () { },
  "onBatchBegin": function () { },
  "onBatchEnd": function () { },
  "onEpochBegin": function () { },
  "onEpochEnd": function () { },
  "onTrainBegin": function () { },
  "onTrainEnd": function () { },
  "setModel": function () { },
  "setParams": function () { }
};
tf.ENV.global.tf.CallbackList.prototype = {
  "append": function () { },
  "onBatchBegin": function () { },
  "onBatchEnd": function () { },
  "onEpochBegin": function () { },
  "onEpochEnd": function () { },
  "onTrainBegin": function () { },
  "onTrainEnd": function () { },
  "setModel": function () { },
  "setParams": function () { }
};
tf.ENV.global.tf.CustomCallback.prototype = {
  "constructor": function () { },
  "maybeWait": function () { },
  "onBatchBegin": function () { },
  "onBatchEnd": function () { },
  "onEpochBegin": function () { },
  "onEpochEnd": function () { },
  "onTrainBegin": function () { },
  "onTrainEnd": function () { },
  "setModel": function () { },
  "setParams": function () { }
};
tf.ENV.global.tf.DataStorage.prototype = {
  "delete": function () { },
  "get": function () { },
  "has": function () { },
  "numDataIds": function () { },
  "set": function () { }
};
tf.ENV.global.tf.EarlyStopping.prototype = {
  "constructor": function () { },
  "getMonitorValue": function () { },
  "onBatchBegin": function () { },
  "onBatchEnd": function () { },
  "onEpochBegin": function () { },
  "onEpochEnd": function () { },
  "onTrainBegin": function () { },
  "onTrainEnd": function () { },
  "setModel": function () { },
  "setParams": function () { }
};
tf.ENV.global.tf.Environment.prototype = {
  "evaluateFlag": function () { },
  "get": function () { },
  "getAsync": function () { },
  "getBool": function () { },
  "getFlags": function () { },
  "getNumber": function () { },
  "populateURLFlags": function () { },
  "registerFlag": function () { },
  "reset": function () { },
  "set": function () { },
  "setFlags": function () { },
  "setPlatform": function () { }
};
tf.ENV.global.tf.GraphModel.prototype = {
  "convertTensorMapToTensorsMap": function () { },
  "dispose": function () { },
  "execute": function () { },
  "executeAsync": function () { },
  "findIOHandler": function () { },
  "load": function () { },
  "loadSync": function () { },
  "normalizeInputs": function () { },
  "normalizeOutputs": function () { },
  "predict": function () { },
  "save": function () { }
};
tf.ENV.global.tf.History.prototype = {
  "constructor": function () { },
  "onBatchBegin": function () { },
  "onBatchEnd": function () { },
  "onEpochBegin": function () { },
  "onEpochEnd": function () { },
  "onTrainBegin": function () { },
  "onTrainEnd": function () { },
  "setModel": function () { },
  "setParams": function () { },
  "syncData": function () { }
};
tf.ENV.global.tf.KernelBackend.prototype = {
  "LRNGrad": function () { },
  "abs": function () { },
  "acos": function () { },
  "acosh": function () { },
  "add": function () { },
  "addN": function () { },
  "all": function () { },
  "any": function () { },
  "argMax": function () { },
  "argMin": function () { },
  "asin": function () { },
  "asinh": function () { },
  "atan": function () { },
  "atan2": function () { },
  "atanh": function () { },
  "avgPool": function () { },
  "avgPool3d": function () { },
  "avgPool3dBackprop": function () { },
  "avgPoolBackprop": function () { },
  "batchMatMul": function () { },
  "batchNorm": function () { },
  "batchToSpaceND": function () { },
  "cast": function () { },
  "ceil": function () { },
  "clip": function () { },
  "complex": function () { },
  "complexAbs": function () { },
  "concat": function () { },
  "conv2d": function () { },
  "conv2dDerFilter": function () { },
  "conv2dDerInput": function () { },
  "conv3d": function () { },
  "conv3dDerFilter": function () { },
  "conv3dDerInput": function () { },
  "cos": function () { },
  "cosh": function () { },
  "cropAndResize": function () { },
  "cumsum": function () { },
  "depthToSpace": function () { },
  "depthwiseConv2D": function () { },
  "depthwiseConv2DDerFilter": function () { },
  "depthwiseConv2DDerInput": function () { },
  "diag": function () { },
  "dispose": function () { },
  "disposeData": function () { },
  "elu": function () { },
  "eluDer": function () { },
  "epsilon": function () { },
  "equal": function () { },
  "erf": function () { },
  "exp": function () { },
  "expm1": function () { },
  "fft": function () { },
  "fill": function () { },
  "floatPrecision": function () { },
  "floor": function () { },
  "floorDiv": function () { },
  "fusedBatchMatMul": function () { },
  "fusedConv2d": function () { },
  "fusedDepthwiseConv2D": function () { },
  "gather": function () { },
  "gatherND": function () { },
  "greater": function () { },
  "greaterEqual": function () { },
  "ifft": function () { },
  "imag": function () { },
  "int": function () { },
  "isFinite": function () { },
  "isInf": function () { },
  "isNaN": function () { },
  "less": function () { },
  "lessEqual": function () { },
  "linspace": function () { },
  "localResponseNormalization4D": function () { },
  "log": function () { },
  "log1p": function () { },
  "logicalAnd": function () { },
  "logicalNot": function () { },
  "logicalOr": function () { },
  "max": function () { },
  "maxPool": function () { },
  "maxPool3d": function () { },
  "maxPool3dBackprop": function () { },
  "maxPoolBackprop": function () { },
  "maximum": function () { },
  "memory": function () { },
  "min": function () { },
  "minimum": function () { },
  "mod": function () { },
  "move": function () { },
  "multinomial": function () { },
  "multiply": function () { },
  "neg": function () { },
  "nonMaxSuppression": function () { },
  "notEqual": function () { },
  "numDataIds": function () { },
  "oneHot": function () { },
  "onesLike": function () { },
  "pad": function () { },
  "pow": function () { },
  "prelu": function () { },
  "prod": function () { },
  "read": function () { },
  "readSync": function () { },
  "real": function () { },
  "realDivide": function () { },
  "reciprocal": function () { },
  "relu": function () { },
  "relu6": function () { },
  "reshape": function () { },
  "resizeBilinear": function () { },
  "resizeBilinearBackprop": function () { },
  "resizeNearestNeighbor": function () { },
  "resizeNearestNeighborBackprop": function () { },
  "reverse": function () { },
  "round": function () { },
  "rsqrt": function () { },
  "scatterND": function () { },
  "select": function () { },
  "selu": function () { },
  "sigmoid": function () { },
  "sign": function () { },
  "sin": function () { },
  "sinh": function () { },
  "slice": function () { },
  "softmax": function () { },
  "softplus": function () { },
  "spaceToBatchND": function () { },
  "sparseToDense": function () { },
  "split": function () { },
  "sqrt": function () { },
  "square": function () { },
  "squaredDifference": function () { },
  "step": function () { },
  "stridedSlice": function () { },
  "subtract": function () { },
  "sum": function () { },
  "tan": function () { },
  "tanh": function () { },
  "tile": function () { },
  "time": function () { },
  "topk": function () { },
  "transpose": function () { },
  "unsortedSegmentSum": function () { },
  "unstack": function () { },
  "where": function () { },
  "write": function () { },
  "zerosLike": function () { }
};
tf.ENV.global.tf.LayerVariable.prototype = {
  "assertNotDisposed": function () { },
  "dispose": function () { },
  "read": function () { },
  "write": function () { }
};
tf.ENV.global.tf.LayersModel.prototype = {
  "addInboundNode": function () { },
  "addLoss": function () { },
  "addWeight": function () { },
  "apply": function () { },
  "assertInputCompatibility": function () { },
  "assertNotDisposed": function () { },
  "build": function () { },
  "buildNodeConversionMap": function () { },
  "calculateLosses": function () { },
  "call": function () { },
  "checkNumSamples": function () { },
  "checkTrainableWeightsConsistency": function () { },
  "clearCallHook": function () { },
  "compile": function () { },
  "computeMask": function () { },
  "computeOutputShape": function () { },
  "constructor": function () { },
  "countParams": function () { },
  "dispose": function () { },
  "disposeWeights": function () { },
  "evaluate": function () { },
  "evaluateDataset": function () { },
  "execute": function () { },
  "fit": function () { },
  "fitDataset": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getDedupedMetricsNames": function () { },
  "getInputAt": function () { },
  "getLayer": function () { },
  "getLossIdentifiers": function () { },
  "getMetricIdentifiers": function () { },
  "getNamedWeights": function () { },
  "getNodeAtIndex": function () { },
  "getOutputAt": function () { },
  "getTrainingConfig": function () { },
  "getUserDefinedMetadata": function () { },
  "getWeights": function () { },
  "invokeCallHook": function () { },
  "loadTrainingConfig": function () { },
  "loadWeights": function () { },
  "makeTestFunction": function () { },
  "makeTrainFunction": function () { },
  "predict": function () { },
  "predictLoop": function () { },
  "predictOnBatch": function () { },
  "resetStates": function () { },
  "retrieveSymbolicTensors": function () { },
  "runInternalGraph": function () { },
  "save": function () { },
  "setCallHook": function () { },
  "setFastWeightInitDuringBuild": function () { },
  "setUserDefinedMetadata": function () { },
  "setWeights": function () { },
  "standardizeUserData": function () { },
  "standardizeUserDataXY": function () { },
  "summary": function () { },
  "testLoop": function () { },
  "toJSON": function () { },
  "trainOnBatch": function () { },
  "updatedConfig": function () { },
  "warnOnIncompatibleInputShape": function () { }
};
tf.ENV.global.tf.MomentumOptimizer.prototype = {
  "applyGradients": function () { },
  "computeGradients": function () { },
  "constructor": function () { },
  "dispose": function () { },
  "extractIterations": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getWeights": function () { },
  "incrementIterations": function () { },
  "minimize": function () { },
  "saveIterations": function () { },
  "setLearningRate": function () { },
  "setMomentum": function () { },
  "setWeights": function () { }
};
tf.ENV.global.tf.Optimizer.prototype = {
  "computeGradients": function () { },
  "constructor": function () { },
  "dispose": function () { },
  "extractIterations": function () { },
  "getClassName": function () { },
  "getWeights": function () { },
  "incrementIterations": function () { },
  "minimize": function () { },
  "saveIterations": function () { },
  "setWeights": function () { }
};
tf.ENV.global.tf.RMSPropOptimizer.prototype = {
  "applyGradients": function () { },
  "computeGradients": function () { },
  "constructor": function () { },
  "dispose": function () { },
  "extractIterations": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getWeights": function () { },
  "incrementIterations": function () { },
  "minimize": function () { },
  "saveIterations": function () { },
  "setWeights": function () { }
};
tf.ENV.global.tf.RNN.prototype = {
  "addInboundNode": function () { },
  "addLoss": function () { },
  "addWeight": function () { },
  "apply": function () { },
  "assertInputCompatibility": function () { },
  "assertNotDisposed": function () { },
  "build": function () { },
  "calculateLosses": function () { },
  "call": function () { },
  "clearCallHook": function () { },
  "computeMask": function () { },
  "computeOutputShape": function () { },
  "constructor": function () { },
  "countParams": function () { },
  "dispose": function () { },
  "disposeWeights": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getInitialState": function () { },
  "getInputAt": function () { },
  "getNodeAtIndex": function () { },
  "getOutputAt": function () { },
  "getStates": function () { },
  "getWeights": function () { },
  "invokeCallHook": function () { },
  "resetStates": function () { },
  "setCallHook": function () { },
  "setFastWeightInitDuringBuild": function () { },
  "setStates": function () { },
  "setWeights": function () { },
  "warnOnIncompatibleInputShape": function () { }
};
tf.ENV.global.tf.SGDOptimizer.prototype = {
  "applyGradients": function () { },
  "computeGradients": function () { },
  "constructor": function () { },
  "dispose": function () { },
  "extractIterations": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getWeights": function () { },
  "incrementIterations": function () { },
  "minimize": function () { },
  "saveIterations": function () { },
  "setLearningRate": function () { },
  "setWeights": function () { }
};
tf.ENV.global.tf.Sequential.prototype = {
  "add": function () { },
  "addInboundNode": function () { },
  "addLoss": function () { },
  "addWeight": function () { },
  "apply": function () { },
  "assertInputCompatibility": function () { },
  "assertNotDisposed": function () { },
  "build": function () { },
  "buildNodeConversionMap": function () { },
  "calculateLosses": function () { },
  "call": function () { },
  "checkNumSamples": function () { },
  "checkShape": function () { },
  "checkTrainableWeightsConsistency": function () { },
  "clearCallHook": function () { },
  "compile": function () { },
  "computeMask": function () { },
  "computeOutputShape": function () { },
  "constructor": function () { },
  "countParams": function () { },
  "dispose": function () { },
  "disposeWeights": function () { },
  "evaluate": function () { },
  "evaluateDataset": function () { },
  "execute": function () { },
  "fit": function () { },
  "fitDataset": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getDedupedMetricsNames": function () { },
  "getInputAt": function () { },
  "getLayer": function () { },
  "getLossIdentifiers": function () { },
  "getMetricIdentifiers": function () { },
  "getNamedWeights": function () { },
  "getNodeAtIndex": function () { },
  "getOutputAt": function () { },
  "getTrainingConfig": function () { },
  "getUserDefinedMetadata": function () { },
  "getWeights": function () { },
  "invokeCallHook": function () { },
  "loadTrainingConfig": function () { },
  "loadWeights": function () { },
  "makeTestFunction": function () { },
  "makeTrainFunction": function () { },
  "pop": function () { },
  "predict": function () { },
  "predictLoop": function () { },
  "predictOnBatch": function () { },
  "resetStates": function () { },
  "retrieveSymbolicTensors": function () { },
  "runInternalGraph": function () { },
  "save": function () { },
  "setCallHook": function () { },
  "setFastWeightInitDuringBuild": function () { },
  "setUserDefinedMetadata": function () { },
  "setWeights": function () { },
  "standardizeUserData": function () { },
  "standardizeUserDataXY": function () { },
  "summary": function () { },
  "testLoop": function () { },
  "toJSON": function () { },
  "trainOnBatch": function () { },
  "updatedConfig": function () { },
  "warnOnIncompatibleInputShape": function () { }
};
tf.ENV.global.tf.Tensor.prototype = {
  "abs": function () { },
  "acos": function () { },
  "acosh": function () { },
  "add": function () { },
  "addStrict": function () { },
  "all": function () { },
  "any": function () { },
  "argMax": function () { },
  "argMin": function () { },
  "array": function () { },
  "arraySync": function () { },
  "as1D": function () { },
  "as2D": function () { },
  "as3D": function () { },
  "as4D": function () { },
  "as5D": function () { },
  "asScalar": function () { },
  "asType": function () { },
  "asin": function () { },
  "asinh": function () { },
  "atan": function () { },
  "atan2": function () { },
  "atanh": function () { },
  "avgPool": function () { },
  "batchNorm": function () { },
  "batchToSpaceND": function () { },
  "broadcastTo": function () { },
  "buffer": function () { },
  "bufferSync": function () { },
  "bytes": function () { },
  "cast": function () { },
  "ceil": function () { },
  "clipByValue": function () { },
  "clone": function () { },
  "concat": function () { },
  "conv1d": function () { },
  "conv2d": function () { },
  "conv2dTranspose": function () { },
  "cos": function () { },
  "cosh": function () { },
  "cumsum": function () { },
  "data": function () { },
  "dataSync": function () { },
  "depthToSpace": function () { },
  "depthwiseConv2D": function () { },
  "depthwiseConv2d": function () { },
  "dispose": function () { },
  "div": function () { },
  "divNoNan": function () { },
  "divStrict": function () { },
  "dot": function () { },
  "elu": function () { },
  "equal": function () { },
  "equalStrict": function () { },
  "erf": function () { },
  "exp": function () { },
  "expandDims": function () { },
  "expm1": function () { },
  "fft": function () { },
  "flatten": function () { },
  "floor": function () { },
  "floorDiv": function () { },
  "gather": function () { },
  "greater": function () { },
  "greaterEqual": function () { },
  "greaterEqualStrict": function () { },
  "greaterStrict": function () { },
  "ifft": function () { },
  "irfft": function () { },
  "isFinite": function () { },
  "isInf": function () { },
  "isNaN": function () { },
  "leakyRelu": function () { },
  "less": function () { },
  "lessEqual": function () { },
  "lessEqualStrict": function () { },
  "lessStrict": function () { },
  "localResponseNormalization": function () { },
  "log": function () { },
  "log1p": function () { },
  "logSigmoid": function () { },
  "logSoftmax": function () { },
  "logSumExp": function () { },
  "logicalAnd": function () { },
  "logicalNot": function () { },
  "logicalOr": function () { },
  "logicalXor": function () { },
  "matMul": function () { },
  "max": function () { },
  "maxPool": function () { },
  "maximum": function () { },
  "maximumStrict": function () { },
  "mean": function () { },
  "min": function () { },
  "minimum": function () { },
  "minimumStrict": function () { },
  "mod": function () { },
  "modStrict": function () { },
  "mul": function () { },
  "mulStrict": function () { },
  "neg": function () { },
  "norm": function () { },
  "notEqual": function () { },
  "notEqualStrict": function () { },
  "oneHot": function () { },
  "onesLike": function () { },
  "pad": function () { },
  "pool": function () { },
  "pow": function () { },
  "powStrict": function () { },
  "prelu": function () { },
  "print": function () { },
  "prod": function () { },
  "reciprocal": function () { },
  "relu": function () { },
  "relu6": function () { },
  "reshape": function () { },
  "reshapeAs": function () { },
  "resizeBilinear": function () { },
  "resizeNearestNeighbor": function () { },
  "reverse": function () { },
  "rfft": function () { },
  "round": function () { },
  "rsqrt": function () { },
  "selu": function () { },
  "separableConv2d": function () { },
  "sigmoid": function () { },
  "sign": function () { },
  "sin": function () { },
  "sinh": function () { },
  "slice": function () { },
  "softmax": function () { },
  "softplus": function () { },
  "spaceToBatchND": function () { },
  "split": function () { },
  "sqrt": function () { },
  "square": function () { },
  "squaredDifference": function () { },
  "squaredDifferenceStrict": function () { },
  "squeeze": function () { },
  "stack": function () { },
  "step": function () { },
  "stridedSlice": function () { },
  "sub": function () { },
  "subStrict": function () { },
  "sum": function () { },
  "tan": function () { },
  "tanh": function () { },
  "throwIfDisposed": function () { },
  "tile": function () { },
  "toBool": function () { },
  "toFloat": function () { },
  "toInt": function () { },
  "toString": function () { },
  "topk": function () { },
  "transpose": function () { },
  "unsortedSegmentSum": function () { },
  "unstack": function () { },
  "variable": function () { },
  "where": function () { },
  "zerosLike": function () { }
};
tf.ENV.global.tf.TensorBuffer.prototype = {
  "get": function () { },
  "indexToLoc": function () { },
  "locToIndex": function () { },
  "set": function () { },
  "toTensor": function () { }
};
tf.ENV.global.tf.Variable.prototype = {
  "abs": function () { },
  "acos": function () { },
  "acosh": function () { },
  "add": function () { },
  "addStrict": function () { },
  "all": function () { },
  "any": function () { },
  "argMax": function () { },
  "argMin": function () { },
  "array": function () { },
  "arraySync": function () { },
  "as1D": function () { },
  "as2D": function () { },
  "as3D": function () { },
  "as4D": function () { },
  "as5D": function () { },
  "asScalar": function () { },
  "asType": function () { },
  "asin": function () { },
  "asinh": function () { },
  "assign": function () { },
  "atan": function () { },
  "atan2": function () { },
  "atanh": function () { },
  "avgPool": function () { },
  "batchNorm": function () { },
  "batchToSpaceND": function () { },
  "broadcastTo": function () { },
  "buffer": function () { },
  "bufferSync": function () { },
  "bytes": function () { },
  "cast": function () { },
  "ceil": function () { },
  "clipByValue": function () { },
  "clone": function () { },
  "concat": function () { },
  "constructor": function () { },
  "conv1d": function () { },
  "conv2d": function () { },
  "conv2dTranspose": function () { },
  "cos": function () { },
  "cosh": function () { },
  "cumsum": function () { },
  "data": function () { },
  "dataSync": function () { },
  "depthToSpace": function () { },
  "depthwiseConv2D": function () { },
  "depthwiseConv2d": function () { },
  "dispose": function () { },
  "div": function () { },
  "divNoNan": function () { },
  "divStrict": function () { },
  "dot": function () { },
  "elu": function () { },
  "equal": function () { },
  "equalStrict": function () { },
  "erf": function () { },
  "exp": function () { },
  "expandDims": function () { },
  "expm1": function () { },
  "fft": function () { },
  "flatten": function () { },
  "floor": function () { },
  "floorDiv": function () { },
  "gather": function () { },
  "greater": function () { },
  "greaterEqual": function () { },
  "greaterEqualStrict": function () { },
  "greaterStrict": function () { },
  "ifft": function () { },
  "irfft": function () { },
  "isFinite": function () { },
  "isInf": function () { },
  "isNaN": function () { },
  "leakyRelu": function () { },
  "less": function () { },
  "lessEqual": function () { },
  "lessEqualStrict": function () { },
  "lessStrict": function () { },
  "localResponseNormalization": function () { },
  "log": function () { },
  "log1p": function () { },
  "logSigmoid": function () { },
  "logSoftmax": function () { },
  "logSumExp": function () { },
  "logicalAnd": function () { },
  "logicalNot": function () { },
  "logicalOr": function () { },
  "logicalXor": function () { },
  "matMul": function () { },
  "max": function () { },
  "maxPool": function () { },
  "maximum": function () { },
  "maximumStrict": function () { },
  "mean": function () { },
  "min": function () { },
  "minimum": function () { },
  "minimumStrict": function () { },
  "mod": function () { },
  "modStrict": function () { },
  "mul": function () { },
  "mulStrict": function () { },
  "neg": function () { },
  "norm": function () { },
  "notEqual": function () { },
  "notEqualStrict": function () { },
  "oneHot": function () { },
  "onesLike": function () { },
  "pad": function () { },
  "pool": function () { },
  "pow": function () { },
  "powStrict": function () { },
  "prelu": function () { },
  "print": function () { },
  "prod": function () { },
  "reciprocal": function () { },
  "relu": function () { },
  "relu6": function () { },
  "reshape": function () { },
  "reshapeAs": function () { },
  "resizeBilinear": function () { },
  "resizeNearestNeighbor": function () { },
  "reverse": function () { },
  "rfft": function () { },
  "round": function () { },
  "rsqrt": function () { },
  "selu": function () { },
  "separableConv2d": function () { },
  "sigmoid": function () { },
  "sign": function () { },
  "sin": function () { },
  "sinh": function () { },
  "slice": function () { },
  "softmax": function () { },
  "softplus": function () { },
  "spaceToBatchND": function () { },
  "split": function () { },
  "sqrt": function () { },
  "square": function () { },
  "squaredDifference": function () { },
  "squaredDifferenceStrict": function () { },
  "squeeze": function () { },
  "stack": function () { },
  "step": function () { },
  "stridedSlice": function () { },
  "sub": function () { },
  "subStrict": function () { },
  "sum": function () { },
  "tan": function () { },
  "tanh": function () { },
  "throwIfDisposed": function () { },
  "tile": function () { },
  "toBool": function () { },
  "toFloat": function () { },
  "toInt": function () { },
  "toString": function () { },
  "topk": function () { },
  "transpose": function () { },
  "unsortedSegmentSum": function () { },
  "unstack": function () { },
  "variable": function () { },
  "where": function () { },
  "zerosLike": function () { }
};
tf.ENV.global.tf.data.CSVDataset.prototype = {
  "batch": function () { },
  "columnNames": function () { },
  "concatenate": function () { },
  "constructor": function () { },
  "filter": function () { },
  "forEachAsync": function () { },
  "getBoolean": function () { },
  "iterator": function () { },
  "makeDataElement": function () { },
  "map": function () { },
  "mapAsync": function () { },
  "maybeReadHeaderLine": function () { },
  "parseRow": function () { },
  "prefetch": function () { },
  "repeat": function () { },
  "setColumnNames": function () { },
  "shuffle": function () { },
  "skip": function () { },
  "take": function () { },
  "toArray": function () { },
  "toArrayForTest": function () { }
};
tf.ENV.global.tf.data.Dataset.prototype = {
  "batch": function () { },
  "concatenate": function () { },
  "filter": function () { },
  "forEachAsync": function () { },
  "map": function () { },
  "mapAsync": function () { },
  "prefetch": function () { },
  "repeat": function () { },
  "shuffle": function () { },
  "skip": function () { },
  "take": function () { },
  "toArray": function () { },
  "toArrayForTest": function () { }
};
tf.ENV.global.tf.data.FileDataSource.prototype = {
  "constructor": function () { },
  "iterator": function () { }
};
tf.ENV.global.tf.data.TextLineDataset.prototype = {
  "batch": function () { },
  "concatenate": function () { },
  "constructor": function () { },
  "filter": function () { },
  "forEachAsync": function () { },
  "iterator": function () { },
  "map": function () { },
  "mapAsync": function () { },
  "prefetch": function () { },
  "repeat": function () { },
  "shuffle": function () { },
  "skip": function () { },
  "take": function () { },
  "toArray": function () { },
  "toArrayForTest": function () { }
};
tf.ENV.global.tf.data.URLDataSource.prototype = {
  "constructor": function () { },
  "iterator": function () { }
};
tf.ENV.global.tf.layers.Layer.prototype = {
  "addInboundNode": function () { },
  "addLoss": function () { },
  "addWeight": function () { },
  "apply": function () { },
  "assertInputCompatibility": function () { },
  "assertNotDisposed": function () { },
  "build": function () { },
  "calculateLosses": function () { },
  "call": function () { },
  "clearCallHook": function () { },
  "computeMask": function () { },
  "computeOutputShape": function () { },
  "constructor": function () { },
  "countParams": function () { },
  "dispose": function () { },
  "disposeWeights": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getInputAt": function () { },
  "getNodeAtIndex": function () { },
  "getOutputAt": function () { },
  "getWeights": function () { },
  "invokeCallHook": function () { },
  "resetStates": function () { },
  "setCallHook": function () { },
  "setFastWeightInitDuringBuild": function () { },
  "setWeights": function () { },
  "warnOnIncompatibleInputShape": function () { }
};
tf.ENV.global.tf.layers.RNN.prototype = {
  "addInboundNode": function () { },
  "addLoss": function () { },
  "addWeight": function () { },
  "apply": function () { },
  "assertInputCompatibility": function () { },
  "assertNotDisposed": function () { },
  "build": function () { },
  "calculateLosses": function () { },
  "call": function () { },
  "clearCallHook": function () { },
  "computeMask": function () { },
  "computeOutputShape": function () { },
  "constructor": function () { },
  "countParams": function () { },
  "dispose": function () { },
  "disposeWeights": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getInitialState": function () { },
  "getInputAt": function () { },
  "getNodeAtIndex": function () { },
  "getOutputAt": function () { },
  "getStates": function () { },
  "getWeights": function () { },
  "invokeCallHook": function () { },
  "resetStates": function () { },
  "setCallHook": function () { },
  "setFastWeightInitDuringBuild": function () { },
  "setStates": function () { },
  "setWeights": function () { },
  "warnOnIncompatibleInputShape": function () { }
};
tf.ENV.global.tf.layers.RNNCell.prototype = {
  "addInboundNode": function () { },
  "addLoss": function () { },
  "addWeight": function () { },
  "apply": function () { },
  "assertInputCompatibility": function () { },
  "assertNotDisposed": function () { },
  "build": function () { },
  "calculateLosses": function () { },
  "call": function () { },
  "clearCallHook": function () { },
  "computeMask": function () { },
  "computeOutputShape": function () { },
  "constructor": function () { },
  "countParams": function () { },
  "dispose": function () { },
  "disposeWeights": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getInputAt": function () { },
  "getNodeAtIndex": function () { },
  "getOutputAt": function () { },
  "getWeights": function () { },
  "invokeCallHook": function () { },
  "resetStates": function () { },
  "setCallHook": function () { },
  "setFastWeightInitDuringBuild": function () { },
  "setWeights": function () { },
  "warnOnIncompatibleInputShape": function () { }
};
tf.ENV.global.tf.serialization.Serializable.prototype = {
  "getClassName": function () { }
};
tf.ENV.global.top.React.Component.prototype = {
  "forceUpdate": function () { },
  "isReactComponent": function () { },
  "setState": function () { }
};
tf.ENV.global.top.React.PureComponent.prototype = {
  "constructor": function () { },
  "forceUpdate": function () { },
  "isPureReactComponent": function () { },
  "isReactComponent": function () { },
  "setState": function () { }
};
tf.EarlyStopping.prototype = {
  "constructor": function () { },
  "getMonitorValue": function () { },
  "onBatchBegin": function () { },
  "onBatchEnd": function () { },
  "onEpochBegin": function () { },
  "onEpochEnd": function () { },
  "onTrainBegin": function () { },
  "onTrainEnd": function () { },
  "setModel": function () { },
  "setParams": function () { }
};
tf.Environment.prototype = {
  "evaluateFlag": function () { },
  "get": function () { },
  "getAsync": function () { },
  "getBool": function () { },
  "getFlags": function () { },
  "getNumber": function () { },
  "populateURLFlags": function () { },
  "registerFlag": function () { },
  "reset": function () { },
  "set": function () { },
  "setFlags": function () { },
  "setPlatform": function () { }
};
tf.GraphModel.prototype = {
  "convertTensorMapToTensorsMap": function () { },
  "dispose": function () { },
  "execute": function () { },
  "executeAsync": function () { },
  "findIOHandler": function () { },
  "load": function () { },
  "loadSync": function () { },
  "normalizeInputs": function () { },
  "normalizeOutputs": function () { },
  "predict": function () { },
  "save": function () { }
};
tf.History.prototype = {
  "constructor": function () { },
  "onBatchBegin": function () { },
  "onBatchEnd": function () { },
  "onEpochBegin": function () { },
  "onEpochEnd": function () { },
  "onTrainBegin": function () { },
  "onTrainEnd": function () { },
  "setModel": function () { },
  "setParams": function () { },
  "syncData": function () { }
};
tf.KernelBackend.prototype = {
  "LRNGrad": function () { },
  "abs": function () { },
  "acos": function () { },
  "acosh": function () { },
  "add": function () { },
  "addN": function () { },
  "all": function () { },
  "any": function () { },
  "argMax": function () { },
  "argMin": function () { },
  "asin": function () { },
  "asinh": function () { },
  "atan": function () { },
  "atan2": function () { },
  "atanh": function () { },
  "avgPool": function () { },
  "avgPool3d": function () { },
  "avgPool3dBackprop": function () { },
  "avgPoolBackprop": function () { },
  "batchMatMul": function () { },
  "batchNorm": function () { },
  "batchToSpaceND": function () { },
  "cast": function () { },
  "ceil": function () { },
  "clip": function () { },
  "complex": function () { },
  "complexAbs": function () { },
  "concat": function () { },
  "conv2d": function () { },
  "conv2dDerFilter": function () { },
  "conv2dDerInput": function () { },
  "conv3d": function () { },
  "conv3dDerFilter": function () { },
  "conv3dDerInput": function () { },
  "cos": function () { },
  "cosh": function () { },
  "cropAndResize": function () { },
  "cumsum": function () { },
  "depthToSpace": function () { },
  "depthwiseConv2D": function () { },
  "depthwiseConv2DDerFilter": function () { },
  "depthwiseConv2DDerInput": function () { },
  "diag": function () { },
  "dispose": function () { },
  "disposeData": function () { },
  "elu": function () { },
  "eluDer": function () { },
  "epsilon": function () { },
  "equal": function () { },
  "erf": function () { },
  "exp": function () { },
  "expm1": function () { },
  "fft": function () { },
  "fill": function () { },
  "floatPrecision": function () { },
  "floor": function () { },
  "floorDiv": function () { },
  "fusedBatchMatMul": function () { },
  "fusedConv2d": function () { },
  "fusedDepthwiseConv2D": function () { },
  "gather": function () { },
  "gatherND": function () { },
  "greater": function () { },
  "greaterEqual": function () { },
  "ifft": function () { },
  "imag": function () { },
  "int": function () { },
  "isFinite": function () { },
  "isInf": function () { },
  "isNaN": function () { },
  "less": function () { },
  "lessEqual": function () { },
  "linspace": function () { },
  "localResponseNormalization4D": function () { },
  "log": function () { },
  "log1p": function () { },
  "logicalAnd": function () { },
  "logicalNot": function () { },
  "logicalOr": function () { },
  "max": function () { },
  "maxPool": function () { },
  "maxPool3d": function () { },
  "maxPool3dBackprop": function () { },
  "maxPoolBackprop": function () { },
  "maximum": function () { },
  "memory": function () { },
  "min": function () { },
  "minimum": function () { },
  "mod": function () { },
  "move": function () { },
  "multinomial": function () { },
  "multiply": function () { },
  "neg": function () { },
  "nonMaxSuppression": function () { },
  "notEqual": function () { },
  "numDataIds": function () { },
  "oneHot": function () { },
  "onesLike": function () { },
  "pad": function () { },
  "pow": function () { },
  "prelu": function () { },
  "prod": function () { },
  "read": function () { },
  "readSync": function () { },
  "real": function () { },
  "realDivide": function () { },
  "reciprocal": function () { },
  "relu": function () { },
  "relu6": function () { },
  "reshape": function () { },
  "resizeBilinear": function () { },
  "resizeBilinearBackprop": function () { },
  "resizeNearestNeighbor": function () { },
  "resizeNearestNeighborBackprop": function () { },
  "reverse": function () { },
  "round": function () { },
  "rsqrt": function () { },
  "scatterND": function () { },
  "select": function () { },
  "selu": function () { },
  "sigmoid": function () { },
  "sign": function () { },
  "sin": function () { },
  "sinh": function () { },
  "slice": function () { },
  "softmax": function () { },
  "softplus": function () { },
  "spaceToBatchND": function () { },
  "sparseToDense": function () { },
  "split": function () { },
  "sqrt": function () { },
  "square": function () { },
  "squaredDifference": function () { },
  "step": function () { },
  "stridedSlice": function () { },
  "subtract": function () { },
  "sum": function () { },
  "tan": function () { },
  "tanh": function () { },
  "tile": function () { },
  "time": function () { },
  "topk": function () { },
  "transpose": function () { },
  "unsortedSegmentSum": function () { },
  "unstack": function () { },
  "where": function () { },
  "write": function () { },
  "zerosLike": function () { }
};
tf.LayerVariable.prototype = {
  "assertNotDisposed": function () { },
  "dispose": function () { },
  "read": function () { },
  "write": function () { }
};
tf.LayersModel.prototype = {
  "addInboundNode": function () { },
  "addLoss": function () { },
  "addWeight": function () { },
  "apply": function () { },
  "assertInputCompatibility": function () { },
  "assertNotDisposed": function () { },
  "build": function () { },
  "buildNodeConversionMap": function () { },
  "calculateLosses": function () { },
  "call": function () { },
  "checkNumSamples": function () { },
  "checkTrainableWeightsConsistency": function () { },
  "clearCallHook": function () { },
  "compile": function () { },
  "computeMask": function () { },
  "computeOutputShape": function () { },
  "constructor": function () { },
  "countParams": function () { },
  "dispose": function () { },
  "disposeWeights": function () { },
  "evaluate": function () { },
  "evaluateDataset": function () { },
  "execute": function () { },
  "fit": function () { },
  "fitDataset": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getDedupedMetricsNames": function () { },
  "getInputAt": function () { },
  "getLayer": function () { },
  "getLossIdentifiers": function () { },
  "getMetricIdentifiers": function () { },
  "getNamedWeights": function () { },
  "getNodeAtIndex": function () { },
  "getOutputAt": function () { },
  "getTrainingConfig": function () { },
  "getUserDefinedMetadata": function () { },
  "getWeights": function () { },
  "invokeCallHook": function () { },
  "loadTrainingConfig": function () { },
  "loadWeights": function () { },
  "makeTestFunction": function () { },
  "makeTrainFunction": function () { },
  "predict": function () { },
  "predictLoop": function () { },
  "predictOnBatch": function () { },
  "resetStates": function () { },
  "retrieveSymbolicTensors": function () { },
  "runInternalGraph": function () { },
  "save": function () { },
  "setCallHook": function () { },
  "setFastWeightInitDuringBuild": function () { },
  "setUserDefinedMetadata": function () { },
  "setWeights": function () { },
  "standardizeUserData": function () { },
  "standardizeUserDataXY": function () { },
  "summary": function () { },
  "testLoop": function () { },
  "toJSON": function () { },
  "trainOnBatch": function () { },
  "updatedConfig": function () { },
  "warnOnIncompatibleInputShape": function () { }
};
tf.MomentumOptimizer.prototype = {
  "applyGradients": function () { },
  "computeGradients": function () { },
  "constructor": function () { },
  "dispose": function () { },
  "extractIterations": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getWeights": function () { },
  "incrementIterations": function () { },
  "minimize": function () { },
  "saveIterations": function () { },
  "setLearningRate": function () { },
  "setMomentum": function () { },
  "setWeights": function () { }
};
tf.Optimizer.prototype = {
  "computeGradients": function () { },
  "constructor": function () { },
  "dispose": function () { },
  "extractIterations": function () { },
  "getClassName": function () { },
  "getWeights": function () { },
  "incrementIterations": function () { },
  "minimize": function () { },
  "saveIterations": function () { },
  "setWeights": function () { }
};
tf.RMSPropOptimizer.prototype = {
  "applyGradients": function () { },
  "computeGradients": function () { },
  "constructor": function () { },
  "dispose": function () { },
  "extractIterations": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getWeights": function () { },
  "incrementIterations": function () { },
  "minimize": function () { },
  "saveIterations": function () { },
  "setWeights": function () { }
};
tf.RNN.prototype = {
  "addInboundNode": function () { },
  "addLoss": function () { },
  "addWeight": function () { },
  "apply": function () { },
  "assertInputCompatibility": function () { },
  "assertNotDisposed": function () { },
  "build": function () { },
  "calculateLosses": function () { },
  "call": function () { },
  "clearCallHook": function () { },
  "computeMask": function () { },
  "computeOutputShape": function () { },
  "constructor": function () { },
  "countParams": function () { },
  "dispose": function () { },
  "disposeWeights": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getInitialState": function () { },
  "getInputAt": function () { },
  "getNodeAtIndex": function () { },
  "getOutputAt": function () { },
  "getStates": function () { },
  "getWeights": function () { },
  "invokeCallHook": function () { },
  "resetStates": function () { },
  "setCallHook": function () { },
  "setFastWeightInitDuringBuild": function () { },
  "setStates": function () { },
  "setWeights": function () { },
  "warnOnIncompatibleInputShape": function () { }
};
tf.SGDOptimizer.prototype = {
  "applyGradients": function () { },
  "computeGradients": function () { },
  "constructor": function () { },
  "dispose": function () { },
  "extractIterations": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getWeights": function () { },
  "incrementIterations": function () { },
  "minimize": function () { },
  "saveIterations": function () { },
  "setLearningRate": function () { },
  "setWeights": function () { }
};
tf.Sequential.prototype = {
  "add": function () { },
  "addInboundNode": function () { },
  "addLoss": function () { },
  "addWeight": function () { },
  "apply": function () { },
  "assertInputCompatibility": function () { },
  "assertNotDisposed": function () { },
  "build": function () { },
  "buildNodeConversionMap": function () { },
  "calculateLosses": function () { },
  "call": function () { },
  "checkNumSamples": function () { },
  "checkShape": function () { },
  "checkTrainableWeightsConsistency": function () { },
  "clearCallHook": function () { },
  "compile": function () { },
  "computeMask": function () { },
  "computeOutputShape": function () { },
  "constructor": function () { },
  "countParams": function () { },
  "dispose": function () { },
  "disposeWeights": function () { },
  "evaluate": function () { },
  "evaluateDataset": function () { },
  "execute": function () { },
  "fit": function () { },
  "fitDataset": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getDedupedMetricsNames": function () { },
  "getInputAt": function () { },
  "getLayer": function () { },
  "getLossIdentifiers": function () { },
  "getMetricIdentifiers": function () { },
  "getNamedWeights": function () { },
  "getNodeAtIndex": function () { },
  "getOutputAt": function () { },
  "getTrainingConfig": function () { },
  "getUserDefinedMetadata": function () { },
  "getWeights": function () { },
  "invokeCallHook": function () { },
  "loadTrainingConfig": function () { },
  "loadWeights": function () { },
  "makeTestFunction": function () { },
  "makeTrainFunction": function () { },
  "pop": function () { },
  "predict": function () { },
  "predictLoop": function () { },
  "predictOnBatch": function () { },
  "resetStates": function () { },
  "retrieveSymbolicTensors": function () { },
  "runInternalGraph": function () { },
  "save": function () { },
  "setCallHook": function () { },
  "setFastWeightInitDuringBuild": function () { },
  "setUserDefinedMetadata": function () { },
  "setWeights": function () { },
  "standardizeUserData": function () { },
  "standardizeUserDataXY": function () { },
  "summary": function () { },
  "testLoop": function () { },
  "toJSON": function () { },
  "trainOnBatch": function () { },
  "updatedConfig": function () { },
  "warnOnIncompatibleInputShape": function () { }
};
tf.Tensor.prototype = {
  "abs": function () { },
  "acos": function () { },
  "acosh": function () { },
  "add": function () { },
  "addStrict": function () { },
  "all": function () { },
  "any": function () { },
  "argMax": function () { },
  "argMin": function () { },
  "array": function () { },
  "arraySync": function () { },
  "as1D": function () { },
  "as2D": function () { },
  "as3D": function () { },
  "as4D": function () { },
  "as5D": function () { },
  "asScalar": function () { },
  "asType": function () { },
  "asin": function () { },
  "asinh": function () { },
  "atan": function () { },
  "atan2": function () { },
  "atanh": function () { },
  "avgPool": function () { },
  "batchNorm": function () { },
  "batchToSpaceND": function () { },
  "broadcastTo": function () { },
  "buffer": function () { },
  "bufferSync": function () { },
  "bytes": function () { },
  "cast": function () { },
  "ceil": function () { },
  "clipByValue": function () { },
  "clone": function () { },
  "concat": function () { },
  "conv1d": function () { },
  "conv2d": function () { },
  "conv2dTranspose": function () { },
  "cos": function () { },
  "cosh": function () { },
  "cumsum": function () { },
  "data": function () { },
  "dataSync": function () { },
  "depthToSpace": function () { },
  "depthwiseConv2D": function () { },
  "depthwiseConv2d": function () { },
  "dispose": function () { },
  "div": function () { },
  "divNoNan": function () { },
  "divStrict": function () { },
  "dot": function () { },
  "elu": function () { },
  "equal": function () { },
  "equalStrict": function () { },
  "erf": function () { },
  "exp": function () { },
  "expandDims": function () { },
  "expm1": function () { },
  "fft": function () { },
  "flatten": function () { },
  "floor": function () { },
  "floorDiv": function () { },
  "gather": function () { },
  "greater": function () { },
  "greaterEqual": function () { },
  "greaterEqualStrict": function () { },
  "greaterStrict": function () { },
  "ifft": function () { },
  "irfft": function () { },
  "isFinite": function () { },
  "isInf": function () { },
  "isNaN": function () { },
  "leakyRelu": function () { },
  "less": function () { },
  "lessEqual": function () { },
  "lessEqualStrict": function () { },
  "lessStrict": function () { },
  "localResponseNormalization": function () { },
  "log": function () { },
  "log1p": function () { },
  "logSigmoid": function () { },
  "logSoftmax": function () { },
  "logSumExp": function () { },
  "logicalAnd": function () { },
  "logicalNot": function () { },
  "logicalOr": function () { },
  "logicalXor": function () { },
  "matMul": function () { },
  "max": function () { },
  "maxPool": function () { },
  "maximum": function () { },
  "maximumStrict": function () { },
  "mean": function () { },
  "min": function () { },
  "minimum": function () { },
  "minimumStrict": function () { },
  "mod": function () { },
  "modStrict": function () { },
  "mul": function () { },
  "mulStrict": function () { },
  "neg": function () { },
  "norm": function () { },
  "notEqual": function () { },
  "notEqualStrict": function () { },
  "oneHot": function () { },
  "onesLike": function () { },
  "pad": function () { },
  "pool": function () { },
  "pow": function () { },
  "powStrict": function () { },
  "prelu": function () { },
  "print": function () { },
  "prod": function () { },
  "reciprocal": function () { },
  "relu": function () { },
  "relu6": function () { },
  "reshape": function () { },
  "reshapeAs": function () { },
  "resizeBilinear": function () { },
  "resizeNearestNeighbor": function () { },
  "reverse": function () { },
  "rfft": function () { },
  "round": function () { },
  "rsqrt": function () { },
  "selu": function () { },
  "separableConv2d": function () { },
  "sigmoid": function () { },
  "sign": function () { },
  "sin": function () { },
  "sinh": function () { },
  "slice": function () { },
  "softmax": function () { },
  "softplus": function () { },
  "spaceToBatchND": function () { },
  "split": function () { },
  "sqrt": function () { },
  "square": function () { },
  "squaredDifference": function () { },
  "squaredDifferenceStrict": function () { },
  "squeeze": function () { },
  "stack": function () { },
  "step": function () { },
  "stridedSlice": function () { },
  "sub": function () { },
  "subStrict": function () { },
  "sum": function () { },
  "tan": function () { },
  "tanh": function () { },
  "throwIfDisposed": function () { },
  "tile": function () { },
  "toBool": function () { },
  "toFloat": function () { },
  "toInt": function () { },
  "toString": function () { },
  "topk": function () { },
  "transpose": function () { },
  "unsortedSegmentSum": function () { },
  "unstack": function () { },
  "variable": function () { },
  "where": function () { },
  "zerosLike": function () { }
};
tf.TensorBuffer.prototype = {
  "get": function () { },
  "indexToLoc": function () { },
  "locToIndex": function () { },
  "set": function () { },
  "toTensor": function () { }
};
tf.Variable.prototype = {
  "abs": function () { },
  "acos": function () { },
  "acosh": function () { },
  "add": function () { },
  "addStrict": function () { },
  "all": function () { },
  "any": function () { },
  "argMax": function () { },
  "argMin": function () { },
  "array": function () { },
  "arraySync": function () { },
  "as1D": function () { },
  "as2D": function () { },
  "as3D": function () { },
  "as4D": function () { },
  "as5D": function () { },
  "asScalar": function () { },
  "asType": function () { },
  "asin": function () { },
  "asinh": function () { },
  "assign": function () { },
  "atan": function () { },
  "atan2": function () { },
  "atanh": function () { },
  "avgPool": function () { },
  "batchNorm": function () { },
  "batchToSpaceND": function () { },
  "broadcastTo": function () { },
  "buffer": function () { },
  "bufferSync": function () { },
  "bytes": function () { },
  "cast": function () { },
  "ceil": function () { },
  "clipByValue": function () { },
  "clone": function () { },
  "concat": function () { },
  "constructor": function () { },
  "conv1d": function () { },
  "conv2d": function () { },
  "conv2dTranspose": function () { },
  "cos": function () { },
  "cosh": function () { },
  "cumsum": function () { },
  "data": function () { },
  "dataSync": function () { },
  "depthToSpace": function () { },
  "depthwiseConv2D": function () { },
  "depthwiseConv2d": function () { },
  "dispose": function () { },
  "div": function () { },
  "divNoNan": function () { },
  "divStrict": function () { },
  "dot": function () { },
  "elu": function () { },
  "equal": function () { },
  "equalStrict": function () { },
  "erf": function () { },
  "exp": function () { },
  "expandDims": function () { },
  "expm1": function () { },
  "fft": function () { },
  "flatten": function () { },
  "floor": function () { },
  "floorDiv": function () { },
  "gather": function () { },
  "greater": function () { },
  "greaterEqual": function () { },
  "greaterEqualStrict": function () { },
  "greaterStrict": function () { },
  "ifft": function () { },
  "irfft": function () { },
  "isFinite": function () { },
  "isInf": function () { },
  "isNaN": function () { },
  "leakyRelu": function () { },
  "less": function () { },
  "lessEqual": function () { },
  "lessEqualStrict": function () { },
  "lessStrict": function () { },
  "localResponseNormalization": function () { },
  "log": function () { },
  "log1p": function () { },
  "logSigmoid": function () { },
  "logSoftmax": function () { },
  "logSumExp": function () { },
  "logicalAnd": function () { },
  "logicalNot": function () { },
  "logicalOr": function () { },
  "logicalXor": function () { },
  "matMul": function () { },
  "max": function () { },
  "maxPool": function () { },
  "maximum": function () { },
  "maximumStrict": function () { },
  "mean": function () { },
  "min": function () { },
  "minimum": function () { },
  "minimumStrict": function () { },
  "mod": function () { },
  "modStrict": function () { },
  "mul": function () { },
  "mulStrict": function () { },
  "neg": function () { },
  "norm": function () { },
  "notEqual": function () { },
  "notEqualStrict": function () { },
  "oneHot": function () { },
  "onesLike": function () { },
  "pad": function () { },
  "pool": function () { },
  "pow": function () { },
  "powStrict": function () { },
  "prelu": function () { },
  "print": function () { },
  "prod": function () { },
  "reciprocal": function () { },
  "relu": function () { },
  "relu6": function () { },
  "reshape": function () { },
  "reshapeAs": function () { },
  "resizeBilinear": function () { },
  "resizeNearestNeighbor": function () { },
  "reverse": function () { },
  "rfft": function () { },
  "round": function () { },
  "rsqrt": function () { },
  "selu": function () { },
  "separableConv2d": function () { },
  "sigmoid": function () { },
  "sign": function () { },
  "sin": function () { },
  "sinh": function () { },
  "slice": function () { },
  "softmax": function () { },
  "softplus": function () { },
  "spaceToBatchND": function () { },
  "split": function () { },
  "sqrt": function () { },
  "square": function () { },
  "squaredDifference": function () { },
  "squaredDifferenceStrict": function () { },
  "squeeze": function () { },
  "stack": function () { },
  "step": function () { },
  "stridedSlice": function () { },
  "sub": function () { },
  "subStrict": function () { },
  "sum": function () { },
  "tan": function () { },
  "tanh": function () { },
  "throwIfDisposed": function () { },
  "tile": function () { },
  "toBool": function () { },
  "toFloat": function () { },
  "toInt": function () { },
  "toString": function () { },
  "topk": function () { },
  "transpose": function () { },
  "unsortedSegmentSum": function () { },
  "unstack": function () { },
  "variable": function () { },
  "where": function () { },
  "zerosLike": function () { }
};
tf.data.CSVDataset.prototype = {
  "batch": function () { },
  "columnNames": function () { },
  "concatenate": function () { },
  "constructor": function () { },
  "filter": function () { },
  "forEachAsync": function () { },
  "getBoolean": function () { },
  "iterator": function () { },
  "makeDataElement": function () { },
  "map": function () { },
  "mapAsync": function () { },
  "maybeReadHeaderLine": function () { },
  "parseRow": function () { },
  "prefetch": function () { },
  "repeat": function () { },
  "setColumnNames": function () { },
  "shuffle": function () { },
  "skip": function () { },
  "take": function () { },
  "toArray": function () { },
  "toArrayForTest": function () { }
};
tf.data.Dataset.prototype = {
  "batch": function () { },
  "concatenate": function () { },
  "filter": function () { },
  "forEachAsync": function () { },
  "map": function () { },
  "mapAsync": function () { },
  "prefetch": function () { },
  "repeat": function () { },
  "shuffle": function () { },
  "skip": function () { },
  "take": function () { },
  "toArray": function () { },
  "toArrayForTest": function () { }
};
tf.data.FileDataSource.prototype = {
  "constructor": function () { },
  "iterator": function () { }
};
tf.data.TextLineDataset.prototype = {
  "batch": function () { },
  "concatenate": function () { },
  "constructor": function () { },
  "filter": function () { },
  "forEachAsync": function () { },
  "iterator": function () { },
  "map": function () { },
  "mapAsync": function () { },
  "prefetch": function () { },
  "repeat": function () { },
  "shuffle": function () { },
  "skip": function () { },
  "take": function () { },
  "toArray": function () { },
  "toArrayForTest": function () { }
};
tf.data.URLDataSource.prototype = {
  "constructor": function () { },
  "iterator": function () { }
};
tf.layers.Layer.prototype = {
  "addInboundNode": function () { },
  "addLoss": function () { },
  "addWeight": function () { },
  "apply": function () { },
  "assertInputCompatibility": function () { },
  "assertNotDisposed": function () { },
  "build": function () { },
  "calculateLosses": function () { },
  "call": function () { },
  "clearCallHook": function () { },
  "computeMask": function () { },
  "computeOutputShape": function () { },
  "constructor": function () { },
  "countParams": function () { },
  "dispose": function () { },
  "disposeWeights": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getInputAt": function () { },
  "getNodeAtIndex": function () { },
  "getOutputAt": function () { },
  "getWeights": function () { },
  "invokeCallHook": function () { },
  "resetStates": function () { },
  "setCallHook": function () { },
  "setFastWeightInitDuringBuild": function () { },
  "setWeights": function () { },
  "warnOnIncompatibleInputShape": function () { }
};
tf.layers.RNN.prototype = {
  "addInboundNode": function () { },
  "addLoss": function () { },
  "addWeight": function () { },
  "apply": function () { },
  "assertInputCompatibility": function () { },
  "assertNotDisposed": function () { },
  "build": function () { },
  "calculateLosses": function () { },
  "call": function () { },
  "clearCallHook": function () { },
  "computeMask": function () { },
  "computeOutputShape": function () { },
  "constructor": function () { },
  "countParams": function () { },
  "dispose": function () { },
  "disposeWeights": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getInitialState": function () { },
  "getInputAt": function () { },
  "getNodeAtIndex": function () { },
  "getOutputAt": function () { },
  "getStates": function () { },
  "getWeights": function () { },
  "invokeCallHook": function () { },
  "resetStates": function () { },
  "setCallHook": function () { },
  "setFastWeightInitDuringBuild": function () { },
  "setStates": function () { },
  "setWeights": function () { },
  "warnOnIncompatibleInputShape": function () { }
};
tf.layers.RNNCell.prototype = {
  "addInboundNode": function () { },
  "addLoss": function () { },
  "addWeight": function () { },
  "apply": function () { },
  "assertInputCompatibility": function () { },
  "assertNotDisposed": function () { },
  "build": function () { },
  "calculateLosses": function () { },
  "call": function () { },
  "clearCallHook": function () { },
  "computeMask": function () { },
  "computeOutputShape": function () { },
  "constructor": function () { },
  "countParams": function () { },
  "dispose": function () { },
  "disposeWeights": function () { },
  "getClassName": function () { },
  "getConfig": function () { },
  "getInputAt": function () { },
  "getNodeAtIndex": function () { },
  "getOutputAt": function () { },
  "getWeights": function () { },
  "invokeCallHook": function () { },
  "resetStates": function () { },
  "setCallHook": function () { },
  "setFastWeightInitDuringBuild": function () { },
  "setWeights": function () { },
  "warnOnIncompatibleInputShape": function () { }
};
tf.serialization.Serializable.prototype = {
  "getClassName": function () { }
};
/**********************************************************************
 * End Generated Extern for tf
/**********************************************************************/