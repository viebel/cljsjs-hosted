/**********************************************************************
 * Extern for Hls
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var Hls = {
  "DefaultConfig": {
    "abrBandWidthFactor": {},
    "abrBandWidthUpFactor": {},
    "abrController": function () {},
    "abrEwmaDefaultEstimate": {},
    "abrEwmaFastLive": {},
    "abrEwmaFastVoD": {},
    "abrEwmaSlowLive": {},
    "abrEwmaSlowVoD": {},
    "abrMaxWithRealBitrate": {},
    "appendErrorMaxRetry": {},
    "audioStreamController": function () {},
    "audioTrackController": function () {},
    "autoStartLoad": {},
    "bufferController": function () {},
    "capLevelController": {
      "contentScaleFactor": {},
      "getMaxLevelByMediaSize": function () {},
      "isLevelAllowed": function () {}
    },
    "capLevelOnFPSDrop": {},
    "capLevelToPlayerSize": {},
    "captionsTextTrack1Label": {},
    "captionsTextTrack1LanguageCode": {},
    "captionsTextTrack2Label": {},
    "captionsTextTrack2LanguageCode": {},
    "cueHandler": {
      "newCue": function () {}
    },
    "debug": {},
    "defaultAudioCodec": {},
    "emeController": function () {},
    "emeEnabled": {},
    "enableCEA708Captions": {},
    "enableSoftwareAES": {},
    "enableWebVTT": {},
    "enableWorker": {},
    "fLoader": {},
    "forceKeyFrameOnDiscontinuity": {},
    "fpsController": function () {},
    "fpsDroppedMonitoringPeriod": {},
    "fpsDroppedMonitoringThreshold": {},
    "fragLoadingMaxRetry": {},
    "fragLoadingMaxRetryTimeout": {},
    "fragLoadingRetryDelay": {},
    "fragLoadingTimeOut": {},
    "highBufferWatchdogPeriod": {},
    "initialLiveManifestSize": {},
    "levelLoadingMaxRetry": {},
    "levelLoadingMaxRetryTimeout": {},
    "levelLoadingRetryDelay": {},
    "levelLoadingTimeOut": {},
    "licenseXhrSetup": {},
    "liveBackBufferLength": {},
    "liveDurationInfinity": {},
    "liveMaxLatencyDuration": {},
    "liveMaxLatencyDurationCount": {},
    "liveSyncDuration": {},
    "liveSyncDurationCount": {},
    "loader": function () {},
    "lowBufferWatchdogPeriod": {},
    "manifestLoadingMaxRetry": {},
    "manifestLoadingMaxRetryTimeout": {},
    "manifestLoadingRetryDelay": {},
    "manifestLoadingTimeOut": {},
    "maxAudioFramesDrift": {},
    "maxBufferHole": {},
    "maxBufferLength": {},
    "maxBufferSize": {},
    "maxFragLookUpTolerance": {},
    "maxLoadingDelay": {},
    "maxMaxBufferLength": {},
    "maxStarvationDelay": {},
    "minAutoBitrate": {},
    "nudgeMaxRetry": {},
    "nudgeOffset": {},
    "pLoader": {},
    "requestMediaKeySystemAccessFunc": function () {},
    "startFragPrefetch": {},
    "startLevel": {},
    "startPosition": {},
    "stretchShortVideoTrack": {},
    "subtitleStreamController": function () {},
    "subtitleTrackController": function () {},
    "timelineController": function () {},
    "widevineLicenseUrl": {},
    "xhrSetup": {}
  },
  "ErrorDetails": {
    "AUDIO_TRACK_LOAD_ERROR": {},
    "AUDIO_TRACK_LOAD_TIMEOUT": {},
    "BUFFER_ADD_CODEC_ERROR": {},
    "BUFFER_APPENDING_ERROR": {},
    "BUFFER_APPEND_ERROR": {},
    "BUFFER_FULL_ERROR": {},
    "BUFFER_NUDGE_ON_STALL": {},
    "BUFFER_SEEK_OVER_HOLE": {},
    "BUFFER_STALLED_ERROR": {},
    "FRAG_DECRYPT_ERROR": {},
    "FRAG_LOAD_ERROR": {},
    "FRAG_LOAD_TIMEOUT": {},
    "FRAG_PARSING_ERROR": {},
    "INTERNAL_EXCEPTION": {},
    "KEY_LOAD_ERROR": {},
    "KEY_LOAD_TIMEOUT": {},
    "KEY_SYSTEM_LICENSE_REQUEST_FAILED": {},
    "KEY_SYSTEM_NO_ACCESS": {},
    "KEY_SYSTEM_NO_KEYS": {},
    "KEY_SYSTEM_NO_SESSION": {},
    "LEVEL_LOAD_ERROR": {},
    "LEVEL_LOAD_TIMEOUT": {},
    "LEVEL_SWITCH_ERROR": {},
    "MANIFEST_INCOMPATIBLE_CODECS_ERROR": {},
    "MANIFEST_LOAD_ERROR": {},
    "MANIFEST_LOAD_TIMEOUT": {},
    "MANIFEST_PARSING_ERROR": {},
    "REMUX_ALLOC_ERROR": {}
  },
  "ErrorTypes": {
    "KEY_SYSTEM_ERROR": {},
    "MEDIA_ERROR": {},
    "MUX_ERROR": {},
    "NETWORK_ERROR": {},
    "OTHER_ERROR": {}
  },
  "EventEmitter": {
    "EventEmitter": function () {},
    "prefixed": {}
  },
  "Events": {
    "AUDIO_TRACKS_UPDATED": {},
    "AUDIO_TRACK_LOADED": {},
    "AUDIO_TRACK_LOADING": {},
    "AUDIO_TRACK_SWITCHED": {},
    "AUDIO_TRACK_SWITCHING": {},
    "BUFFER_APPENDED": {},
    "BUFFER_APPENDING": {},
    "BUFFER_CODECS": {},
    "BUFFER_CREATED": {},
    "BUFFER_EOS": {},
    "BUFFER_FLUSHED": {},
    "BUFFER_FLUSHING": {},
    "BUFFER_RESET": {},
    "DESTROYING": {},
    "ERROR": {},
    "FPS_DROP": {},
    "FPS_DROP_LEVEL_CAPPING": {},
    "FRAG_BUFFERED": {},
    "FRAG_CHANGED": {},
    "FRAG_DECRYPTED": {},
    "FRAG_LOADED": {},
    "FRAG_LOADING": {},
    "FRAG_LOAD_EMERGENCY_ABORTED": {},
    "FRAG_LOAD_PROGRESS": {},
    "FRAG_PARSED": {},
    "FRAG_PARSING_DATA": {},
    "FRAG_PARSING_INIT_SEGMENT": {},
    "FRAG_PARSING_METADATA": {},
    "FRAG_PARSING_USERDATA": {},
    "INIT_PTS_FOUND": {},
    "KEY_LOADED": {},
    "KEY_LOADING": {},
    "LEVEL_LOADED": {},
    "LEVEL_LOADING": {},
    "LEVEL_PTS_UPDATED": {},
    "LEVEL_SWITCHED": {},
    "LEVEL_SWITCHING": {},
    "LEVEL_UPDATED": {},
    "MANIFEST_LOADED": {},
    "MANIFEST_LOADING": {},
    "MANIFEST_PARSED": {},
    "MEDIA_ATTACHED": {},
    "MEDIA_ATTACHING": {},
    "MEDIA_DETACHED": {},
    "MEDIA_DETACHING": {},
    "STREAM_STATE_TRANSITION": {},
    "SUBTITLE_FRAG_PROCESSED": {},
    "SUBTITLE_TRACKS_UPDATED": {},
    "SUBTITLE_TRACK_LOADED": {},
    "SUBTITLE_TRACK_LOADING": {},
    "SUBTITLE_TRACK_SWITCH": {}
  },
  "isSupported": function () {},
  "prefixed": {},
  "version": {}
};
Hls.prototype = {
  "addListener": function () {},
  "attachMedia": function () {},
  "audioTrack": function () {},
  "audioTracks": function () {},
  "autoLevelCapping": function () {},
  "autoLevelEnabled": function () {},
  "constructor": function () {},
  "currentLevel": function () {},
  "destroy": function () {},
  "detachMedia": function () {},
  "emit": function () {},
  "eventNames": function () {},
  "firstLevel": function () {},
  "levels": function () {},
  "listenerCount": function () {},
  "listeners": function () {},
  "liveSyncPosition": function () {},
  "loadLevel": function () {},
  "loadSource": function () {},
  "manualLevel": function () {},
  "maxAutoLevel": function () {},
  "minAutoLevel": function () {},
  "nextAutoLevel": function () {},
  "nextLevel": function () {},
  "nextLoadLevel": function () {},
  "off": function () {},
  "on": function () {},
  "once": function () {},
  "recoverMediaError": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {},
  "startLevel": function () {},
  "startLoad": function () {},
  "stopLoad": function () {},
  "subtitleDisplay": function () {},
  "subtitleTrack": function () {},
  "subtitleTracks": function () {},
  "swapAudioCodec": function () {},
  "trigger": function () {}
};
Hls.DefaultConfig.abrController.prototype = {
  "_abandonRulesCheck": function () {},
  "_findBestLevel": function () {},
  "_nextABRAutoLevel": function () {},
  "clearTimer": function () {},
  "constructor": function () {},
  "destroy": function () {},
  "isEventHandler": function () {},
  "nextAutoLevel": function () {},
  "onError": function () {},
  "onEvent": function () {},
  "onEventGeneric": function () {},
  "onFragBuffered": function () {},
  "onFragLoaded": function () {},
  "onFragLoading": function () {},
  "onHandlerDestroyed": function () {},
  "onHandlerDestroying": function () {},
  "registerListeners": function () {},
  "unregisterListeners": function () {}
};
Hls.DefaultConfig.audioStreamController.prototype = {
  "_checkAppendedParsed": function () {},
  "_streamEnded": function () {},
  "clearInterval": function () {},
  "clearNextTick": function () {},
  "constructor": function () {},
  "destroy": function () {},
  "doTick": function () {},
  "hasInterval": function () {},
  "hasNextTick": function () {},
  "isEventHandler": function () {},
  "onAudioTrackLoaded": function () {},
  "onAudioTrackSwitching": function () {},
  "onAudioTracksUpdated": function () {},
  "onBufferAppended": function () {},
  "onBufferCreated": function () {},
  "onBufferFlushed": function () {},
  "onBufferReset": function () {},
  "onError": function () {},
  "onEvent": function () {},
  "onEventGeneric": function () {},
  "onFragLoaded": function () {},
  "onFragParsed": function () {},
  "onFragParsingData": function () {},
  "onFragParsingInitSegment": function () {},
  "onHandlerDestroyed": function () {},
  "onHandlerDestroying": function () {},
  "onInitPtsFound": function () {},
  "onKeyLoaded": function () {},
  "onMediaAttached": function () {},
  "onMediaDetaching": function () {},
  "onMediaEnded": function () {},
  "onMediaSeeking": function () {},
  "registerListeners": function () {},
  "setInterval": function () {},
  "startLoad": function () {},
  "state": function () {},
  "stopLoad": function () {},
  "tick": function () {},
  "unregisterListeners": function () {}
};
Hls.DefaultConfig.audioTrackController.prototype = {
  "_handleLoadError": function () {},
  "_loadTrackDetailsIfNeeded": function () {},
  "_needsTrackLoading": function () {},
  "_selectInitialAudioTrack": function () {},
  "_setAudioTrack": function () {},
  "_updateTrack": function () {},
  "audioTrack": function () {},
  "audioTracks": function () {},
  "clearInterval": function () {},
  "clearNextTick": function () {},
  "constructor": function () {},
  "destroy": function () {},
  "doTick": function () {},
  "hasInterval": function () {},
  "hasNextTick": function () {},
  "isEventHandler": function () {},
  "onAudioTrackLoaded": function () {},
  "onAudioTrackSwitched": function () {},
  "onError": function () {},
  "onEvent": function () {},
  "onEventGeneric": function () {},
  "onHandlerDestroyed": function () {},
  "onHandlerDestroying": function () {},
  "onLevelLoaded": function () {},
  "onManifestLoading": function () {},
  "onManifestParsed": function () {},
  "registerListeners": function () {},
  "setInterval": function () {},
  "tick": function () {},
  "unregisterListeners": function () {}
};
Hls.DefaultConfig.bufferController.prototype = {
  "checkEos": function () {},
  "checkPendingTracks": function () {},
  "constructor": function () {},
  "createSourceBuffers": function () {},
  "destroy": function () {},
  "doAppending": function () {},
  "doFlush": function () {},
  "flushBuffer": function () {},
  "flushLiveBackBuffer": function () {},
  "isEventHandler": function () {},
  "onBufferAppendFail": function () {},
  "onBufferAppending": function () {},
  "onBufferCodecs": function () {},
  "onBufferEos": function () {},
  "onBufferFlushing": function () {},
  "onBufferReset": function () {},
  "onEvent": function () {},
  "onEventGeneric": function () {},
  "onHandlerDestroyed": function () {},
  "onHandlerDestroying": function () {},
  "onLevelPtsUpdated": function () {},
  "onLevelUpdated": function () {},
  "onManifestParsed": function () {},
  "onMediaAttaching": function () {},
  "onMediaDetaching": function () {},
  "onMediaSourceClose": function () {},
  "onMediaSourceEnded": function () {},
  "onMediaSourceOpen": function () {},
  "onSBUpdateEnd": function () {},
  "onSBUpdateError": function () {},
  "registerListeners": function () {},
  "removeBufferRange": function () {},
  "unregisterListeners": function () {},
  "updateMediaElementDuration": function () {}
};
Hls.DefaultConfig.capLevelController.prototype = {
  "_startCapping": function () {},
  "_stopCapping": function () {},
  "constructor": function () {},
  "destroy": function () {},
  "detectPlayerSize": function () {},
  "getMaxLevel": function () {},
  "isEventHandler": function () {},
  "mediaHeight": function () {},
  "mediaWidth": function () {},
  "onBufferCodecs": function () {},
  "onEvent": function () {},
  "onEventGeneric": function () {},
  "onFpsDropLevelCapping": function () {},
  "onHandlerDestroyed": function () {},
  "onHandlerDestroying": function () {},
  "onLevelsUpdated": function () {},
  "onManifestParsed": function () {},
  "onMediaAttaching": function () {},
  "onMediaDetaching": function () {},
  "registerListeners": function () {},
  "unregisterListeners": function () {}
};
Hls.DefaultConfig.emeController.prototype = {
  "_attemptKeySystemAccess": function () {},
  "_attemptSetMediaKeys": function () {},
  "_createLicenseXhr": function () {},
  "_generateLicenseRequestChallenge": function () {},
  "_generateRequestWithPreferredKeySession": function () {},
  "_onKeySessionMessage": function () {},
  "_onLicenseRequestReadyStageChange": function () {},
  "_onMediaEncrypted": function () {},
  "_onMediaKeySystemAccessObtained": function () {},
  "_onMediaKeysCreated": function () {},
  "_onNewMediaKeySession": function () {},
  "_requestLicense": function () {},
  "constructor": function () {},
  "destroy": function () {},
  "getLicenseServerUrl": function () {},
  "isEventHandler": function () {},
  "onEvent": function () {},
  "onEventGeneric": function () {},
  "onHandlerDestroyed": function () {},
  "onHandlerDestroying": function () {},
  "onManifestParsed": function () {},
  "onMediaAttached": function () {},
  "registerListeners": function () {},
  "requestMediaKeySystemAccess": function () {},
  "unregisterListeners": function () {}
};
Hls.DefaultConfig.fpsController.prototype = {
  "checkFPS": function () {},
  "checkFPSInterval": function () {},
  "constructor": function () {},
  "destroy": function () {},
  "isEventHandler": function () {},
  "onEvent": function () {},
  "onEventGeneric": function () {},
  "onHandlerDestroyed": function () {},
  "onHandlerDestroying": function () {},
  "onMediaAttaching": function () {},
  "registerListeners": function () {},
  "unregisterListeners": function () {}
};
Hls.DefaultConfig.loader.prototype = {
  "abort": function () {},
  "destroy": function () {},
  "load": function () {},
  "loadInternal": function () {},
  "loadprogress": function () {},
  "loadtimeout": function () {},
  "readystatechange": function () {}
};
Hls.DefaultConfig.subtitleStreamController.prototype = {
  "_getBuffered": function () {},
  "clearInterval": function () {},
  "clearNextTick": function () {},
  "constructor": function () {},
  "destroy": function () {},
  "doTick": function () {},
  "hasInterval": function () {},
  "hasNextTick": function () {},
  "isEventHandler": function () {},
  "onError": function () {},
  "onEvent": function () {},
  "onEventGeneric": function () {},
  "onFragLoaded": function () {},
  "onHandlerDestroyed": function () {},
  "onHandlerDestroying": function () {},
  "onKeyLoaded": function () {},
  "onMediaAttached": function () {},
  "onMediaDetaching": function () {},
  "onSubtitleFragProcessed": function () {},
  "onSubtitleTrackLoaded": function () {},
  "onSubtitleTrackSwitch": function () {},
  "onSubtitleTracksUpdated": function () {},
  "registerListeners": function () {},
  "setInterval": function () {},
  "tick": function () {},
  "unregisterListeners": function () {}
};
Hls.DefaultConfig.subtitleTrackController.prototype = {
  "_onTextTracksChanged": function () {},
  "_stopTimer": function () {},
  "_toggleTrackModes": function () {},
  "constructor": function () {},
  "destroy": function () {},
  "isEventHandler": function () {},
  "onEvent": function () {},
  "onEventGeneric": function () {},
  "onHandlerDestroyed": function () {},
  "onHandlerDestroying": function () {},
  "onManifestLoaded": function () {},
  "onManifestLoading": function () {},
  "onMediaAttached": function () {},
  "onMediaDetaching": function () {},
  "onSubtitleTrackLoaded": function () {},
  "onTick": function () {},
  "registerListeners": function () {},
  "setSubtitleTrackInternal": function () {},
  "subtitleTrack": function () {},
  "subtitleTracks": function () {},
  "unregisterListeners": function () {}
};
Hls.DefaultConfig.timelineController.prototype = {
  "_cleanTracks": function () {},
  "_parseVTTs": function () {},
  "addCues": function () {},
  "constructor": function () {},
  "createCaptionsTrack": function () {},
  "createTextTrack": function () {},
  "destroy": function () {},
  "extractCea608Data": function () {},
  "getExistingTrack": function () {},
  "isEventHandler": function () {},
  "onEvent": function () {},
  "onEventGeneric": function () {},
  "onFragDecrypted": function () {},
  "onFragLoaded": function () {},
  "onFragParsingUserdata": function () {},
  "onHandlerDestroyed": function () {},
  "onHandlerDestroying": function () {},
  "onInitPtsFound": function () {},
  "onLevelSwitching": function () {},
  "onManifestLoaded": function () {},
  "onManifestLoading": function () {},
  "onMediaAttaching": function () {},
  "onMediaDetaching": function () {},
  "registerListeners": function () {},
  "unregisterListeners": function () {}
};
Hls.EventEmitter.prototype = {
  "addListener": function () {},
  "emit": function () {},
  "eventNames": function () {},
  "listenerCount": function () {},
  "listeners": function () {},
  "off": function () {},
  "on": function () {},
  "once": function () {},
  "removeAllListeners": function () {},
  "removeListener": function () {}
};
/**********************************************************************
 * End Generated Extern for Hls
/**********************************************************************/
